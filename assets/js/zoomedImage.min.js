"use strict";
define("zoomedImage", ["lodash", "react", "reactDOM", "utils", "core", "santaProps", "imageCommon"], function(t, e, i, s, o, a, n) {
    var r = o.compMixins,
        p = n.imageElementFactoryMixin;
    return {
        mixins: [r.skinBasedComp, r.animationsMixin, p],
        displayName: "ZoomedImage",
        propTypes: {
            browser: a.Types.Browser.browser,
            currentUrl: a.Types.currentUrl,
            getMediaFullStaticUrl: a.Types.ServiceTopology.getMediaFullStaticUrl,
            devicePixelRatio: a.Types.Device.devicePixelRatio,
            containerWidth: e.PropTypes.number.isRequired,
            containerHeight: e.PropTypes.number.isRequired,
            imageData: e.PropTypes.object.isRequired,
            displayMode: e.PropTypes.string,
            effectName: e.PropTypes.string,
            initialClickPosition: e.PropTypes.object,
            style: e.PropTypes.object
        },
        statics: {
            useSantaTypes: !0
        },
        shouldZoom: !0,
        shouldDrag: !1,
        sequenceId: "",
        animatableElement: "image",
        getInitialState: function() {
            var t = this.props.browser;
            return this.cssFiltersSupported = !(t.ie || t.edge), {}
        },
        hasEffect: function() {
            return this.props.effectName && "none" !== this.props.effectName
        },
        getTargetPosition: function(t) {
            this.clientRect = this.clientRect || s.domMeasurements.getBoundingRect(i.findDOMNode(this));
            var e = {
                    height: this.props.containerHeight,
                    width: this.props.containerWidth
                },
                o = t.clientX - this.clientRect.left,
                a = t.clientY - this.clientRect.top;
            return {
                x: -(this.props.imageData.width - e.width) * (o / e.width),
                y: -(this.props.imageData.height - e.height) * (a / e.height)
            }
        },
        zoomOut: function(t) {
            this.stopSequence(this.sequenceId), t()
        },
        zoomIn: function() {
            this.shouldDrag = this.shouldZoom;
            var t = this.getTargetPosition(this.props.initialClickPosition);
            this.animate(this.animatableElement, "BasePosition", 0, 0, {
                to: {
                    x: -(this.props.imageData.width / 2 - this.props.containerWidth / 2),
                    y: -(this.props.imageData.height / 2 - this.props.containerHeight / 2)
                }
            }), this.sequenceId = this.animate(this.animatableElement, "BasePosition", .2, 0, {
                to: t
            })
        },
        drag: function(t) {
            if (this.shouldDrag) {
                var e = this.getTargetPosition(t);
                this.animate(this.animatableElement, "BasePosition", .5, 0, {
                    to: e
                })
            }
        },
        getDefaultSkinName: function() {
            return "skins.core.ImageNewSkinZoomable"
        },
        getSkinProperties: function() {
            var e, i, o = {
                containerWidth: this.props.imageData.width,
                containerHeight: this.props.imageData.height,
                imageData: this.props.imageData,
                displayMode: this.props.displayMode
            };
            return this.hasEffect() && !this.cssFiltersSupported ? (this.animatableElement = "svg", i = s.imageUtils.getImageComputedProperties(o, this.props.getMediaFullStaticUrl, this.props.currentUrl, this.props.devicePixelRatio, "svg"), e = this.getSvgOnlyImageComponent(i, this.zoomIn)) : (i = s.imageUtils.getImageComputedProperties(o, this.props.getMediaFullStaticUrl, this.props.currentUrl, this.props.devicePixelRatio, "img"), t.set(i, "css.img.outline", "1px solid transparent"), e = this.getImageComponents(i, this.zoomIn)), {
                "": {
                    style: t.assign({
                        width: this.props.containerWidth,
                        height: this.props.containerHeight,
                        WebkitTransform: "translateZ(0)",
                        transform: "translateZ(0)"
                    }, i.css.container),
                    onMouseMove: this.drag,
                    addChildren: e,
                    "data-image-zoomed": !0
                }
            }
        }
    }
});
//# sourceMappingURL=zoomedImage.min.js.map