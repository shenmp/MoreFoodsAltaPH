"use strict";
define("loginButton/translations/loginButtonTranslations", [], {
    de: {
        Login_Button_Hello: "Hallo",
        Login_Button_Sign_In: "Anmelden/Registrieren",
        Login_Button_Sign_Out: "Abmelden"
    },
    en: {
        Login_Button_Sign_In: "Login/Sign up",
        Login_Button_Sign_Out: "Log out",
        Login_Button_Hello: "Hello"
    },
    es: {
        Login_Button_Hello: "Hola",
        Login_Button_Sign_In: "Inicia Sesión/Regístrate",
        Login_Button_Sign_Out: "Salir"
    },
    fr: {
        Login_Button_Hello: "Bonjour",
        Login_Button_Sign_In: "Connexion / Inscription",
        Login_Button_Sign_Out: "Déconnexion"
    },
    it: {
        Login_Button_Hello: "Ciao",
        Login_Button_Sign_In: "Login/ Registrati",
        Login_Button_Sign_Out: "Esci"
    },
    ja: {
        Login_Button_Hello: "こんにちは、",
        Login_Button_Sign_In: "ログイン／会員登録",
        Login_Button_Sign_Out: "ログアウト"
    },
    ko: {
        Login_Button_Hello: "안녕하세요,",
        Login_Button_Sign_In: "로그인/가입하기",
        Login_Button_Sign_Out: "로그아웃"
    },
    pl: {
        Login_Button_Hello: "Witaj",
        Login_Button_Sign_In: "Zaloguj się/Zarejestruj się",
        Login_Button_Sign_Out: "Wyloguj się"
    },
    ru: {
        Login_Button_Hello: "Привет,",
        Login_Button_Sign_In: "Вход / Регистрация",
        Login_Button_Sign_Out: "Выход"
    },
    nl: {
        Login_Button_Hello: "Hallo",
        Login_Button_Sign_In: "Inloggen/aanmelden",
        Login_Button_Sign_Out: "Uitloggen"
    },
    tr: {
        Login_Button_Hello: "Merhaba",
        Login_Button_Sign_In: "Giriş / Kaydol",
        Login_Button_Sign_Out: "Çıkış"
    },
    sv: {
        Login_Button_Hello: "Hej",
        Login_Button_Sign_In: "Logga in/registrera dig",
        Login_Button_Sign_Out: "Logga ut"
    },
    pt: {
        Login_Button_Hello: "Olá",
        Login_Button_Sign_In: "Login / Registre-se",
        Login_Button_Sign_Out: "Sair"
    },
    no: {
        Login_Button_Hello: "Hei",
        Login_Button_Sign_In: "Logg inn/Registrer deg",
        Login_Button_Sign_Out: "Logg ut"
    },
    da: {
        Login_Button_Hello: "Hej",
        Login_Button_Sign_In: "Log ind/opret",
        Login_Button_Sign_Out: "Log ud"
    },
    hi: {
        Login_Button_Hello: "Hello",
        Login_Button_Sign_In: "Login/Sign up",
        Login_Button_Sign_Out: "Log out"
    },
    zh: {
        Login_Button_Hello: "Hello",
        Login_Button_Sign_In: "Login/Sign up",
        Login_Button_Sign_Out: "Log out"
    },
    cs: {
        Login_Button_Hello: "Ahoj",
        Login_Button_Sign_In: "Přihlásit se/Zaregistrovat se",
        Login_Button_Sign_Out: "Odhlásit"
    }
}), define("loginButton", ["lodash", "core", "santaProps", "loginButton/translations/loginButtonTranslations"], function(n, t, o, i) {
    function _(n, t) {
        return i[n] && i[n][t] || i.en[t]
    }

    function g(n) {
        var t;
        s() ? (r.logout(n), t = "logout") : (r.showAuthenticationDialog({
            language: n,
            appId: 3
        }), t = "login/signup"), r.reportSiteMembersBi("SITE_MEMBER_OPEN_LOGIN_OR_SIGNUP_DIALOGS", {
            action: t
        })
    }

    function e() {
        var n = r.getMemberDetails();
        return n ? n.attributes && n.attributes.name || n.email : ""
    }

    function u(n) {
        return s() ? _(n, "Login_Button_Sign_Out") : _(n, "Login_Button_Sign_In")
    }

    function l(n) {
        var t;
        return s() && (t = e()), t ? _(n, "Login_Button_Hello") + " " + t : ""
    }

    function s() {
        return !!r && r.isLoggedIn()
    }

    function L() {
        return !!r && (!r.isLoggedIn() || e().length > 0)
    }
    var r;
    return {
        displayName: "LoginButton",
        mixins: [t.compMixins.skinBasedComp],
        propTypes: {
            compData: o.Types.Component.compData,
            style: o.Types.Component.style.isRequired,
            siteMembersAspect: o.Types.SiteAspects.siteMembers.isRequired
        },
        statics: {
            useSantaTypes: !0
        },
        componentWillMount: function() {
            r = this.props.siteMembersAspect
        },
        getSkinProperties: function() {
            var n = this.props.compData ? this.props.compData.language : "en";
            return {
                "": {
                    style: {
                        visibility: L() ? null : "hidden"
                    }
                },
                actionTitle: {
                    style: {
                        width: this.props.style.width
                    },
                    children: u(n),
                    onClick: g.bind(this, n)
                },
                memberTitle: {
                    style: {
                        width: this.props.style.width,
                        display: s() ? null : "none"
                    },
                    children: l(n)
                }
            }
        }
    }
});
//# sourceMappingURL=loginButton.min.js.map