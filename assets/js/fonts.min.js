"use strict";
define("fonts/utils/fontUtils", ["lodash", "utils", "coreUtilsLib"], function(t, e, n) {
    function r(t, e) {
        M[t] = e
    }

    function o(t, e) {
        _[t] = e
    }

    function a(t) {
        return e.cssUtils.parseFontStr(t)
    }

    function s(e) {
        return t.compact(t.map(e, function(t) {
            return T.getFontsMetaData()[t]
        }))
    }

    function i(e) {
        return t(e).split(",").invokeMap("replace", /.*[^\w\d\-].*/, '"$&"').join(",")
    }

    function l(t) {
        var e, n = T.getFontsMetaData()[t.toLowerCase()],
            r = n.fontFamily;
        return n ? (e = r, "" !== n.fallbacks && (e += "," + n.fallbacks), e += "," + n.genericFamily) : e = t, i(e)
    }

    function u(e, n) {
        if (0 !== e.length) {
            var r = t.map(e, function(t) {
                return t.cdnName + ":n,b,i,bi|"
            });
            return n && (r.push("&subset="), r.push(n.join(","))), W + r.join("")
        }
    }

    function f(e, n) {
        return s(t.filter(c(e, n), function(e) {
            return t.has(T.getFontsMetaData(), e)
        }))
    }

    function c(t, e) {
        return g(t, e)
    }

    function F(e) {
        return d(e, t.times(11, function(t) {
            return "font_" + t
        }))
    }

    function g(n, r) {
        var o = n.getPageData(r).data.document_data,
            a = t(o).filter(function(e) {
                return t.has(M, e.type)
            }).map(function(r) {
                var o = M[r.type](n, r);
                return t.union(e.fonts.fontsParser.collectFontsFromTextDataArray(o))
            }).flattenDeep().value(),
            s = t(o).filter(function(e) {
                return t.has(_, e.type)
            }).map(function(t) {
                return _[t.type](n, t) || []
            }).flattenDeep().value(),
            i = t.get(o, "masterPage.usedFonts", []);
        return t.union(a, s, F(n), i)
    }

    function d(e, n) {
        var r = e.getGeneralTheme();
        return t.map(n, function(t) {
            return m(r, t)
        })
    }

    function m(t, e) {
        var n = t.font[parseInt(e.substring(e.indexOf("_") + 1), 10)],
            r = "";
        return n && (r = a(n).family.toLowerCase()), r
    }

    function p(e, n) {
        var r = x(e, n);
        return t.values(r)
    }

    function v(e, n) {
        var r = y(e);
        return t(D).intersection(n).map(function(t) {
            return {
                lang: t,
                fonts: r[t]
            }
        }).value()
    }

    function y(e) {
        var n = S(e),
            r = t.reduce(T.getFontsMetaData(), function(e, r, o) {
                var a = r.characterSets;
                return t.includes(n, r.permissions) && (r.cssFontFamily = l(o), t.forEach(a, function(t) {
                    e[t] || (e[t] = []), e[t].push(r)
                })), e
            }, {});
        return t.forOwn(r, function(e, n) {
            r[n] = t.sortBy(e, "displayName")
        }), r
    }

    function h(e, n, r) {
        var o = U(t.isArray(e) ? e : t.keys(e), n, r);
        return o ? W + o : ""
    }

    function S(t) {
        var e = ["all", "legacy"];
        return "WixSite" === t && e.push("studio"), e
    }

    function U(e, n, r) {
        var o = "",
            a = S(n);
        return t.forEach(e, function(e) {
            var n = T.getFontsMetaData()[e];
            n && n.cdnName && t.includes(a, n.permissions) && (o += n.cdnName, o += ":n,b,i,bi|")
        }), "" === o ? null : (r && (o += "&subset=" + r.join(",")), o)
    }

    function C(t) {
        k.lastIndex = 0;
        var e = k.exec(t);
        return e ? e[1] : void 0
    }

    function b(t) {
        return t.publicStaticsUrl + "/css/Helvetica/fontFace.css"
    }

    function x(t, n) {
        var r = {
            langauges: e.media.getMediaUrl(t, "user-site-fonts/v3/languages.css")
        };
        return "WixSite" === n && (r.helveticas = e.media.getMediaUrl(t, "user-site-fonts/v3/helvetica.css")), r
    }

    function P(e, n) {
        var r = {};
        return r.googleFonts = h(T.getFontsMetaData(), e, D), t.merge(r, x(n, e)), r
    }
    var T = n.fonts,
        W = "//fonts.googleapis.com/css?family=",
        D = ["latin-ext", "cyrillic", "japanese", "korean", "arabic", "hebrew", "latin"],
        k = /<[^>]+class="[^"]*(font_[0-9]+)[^"]*"/g,
        M = {
            StyledText: function(t, e) {
                return [e.text]
            },
            RichText: function(t, e) {
                return [e.text]
            }
        },
        _ = {};
    return e.sessionFreezer.freeze(_), {
        parseFontStr: T.parseFontStr,
        parseStyleFont: T.parseStyleFont,
        getMetadata: s,
        getGoogleFontsUrl: u,
        getFontFamily: T.getFontFamily,
        getFontFallback: T.getFontFallback,
        getPageFontsMetaData: f,
        getFontFamilyWithFallbacks: T.getFontFamilyWithFallbacks,
        getWixStoredFontsCssUrls: p,
        getWixStoredFontsCssUrlsWithParams: T.getWixStoredFontsCssUrlsWithParams,
        getCurrentSelectablefontsWithParams: v,
        collectFontsFromTextDataArray: e.fonts.fontsParser.collectFontsFromTextDataArray,
        getFontsUrlWithParams: T.getFontsUrlWithParams,
        getFontFamilyByStyleId: m,
        getFontClassName: C,
        registerCustomTextDataGetter: r,
        registerCustomFontFamiliesGetter: o,
        getPageUsedFontsList: c,
        getWixHelveticaUrl: b,
        getCssUrls: P,
        fontToCSSWithColor: T.fontToCSSWithColor,
        getFontFamilyPermissions: T.getFontFamilyPermissions,
        POSSIBLE_CHARACTERS_SETS: D
    }
}), define("fonts/utils/fontCss", ["lodash", "fonts/utils/fontUtils"], function(t, e) {
    function n(t) {
        var n = t,
            r = e.getFontFallback(t);
        return r && (n = n + "," + r), n = n.replace(/[^,]*[^\w,\d\-][^,]*/g, function(t) {
            return "'" + t.replace(/\+/g, " ") + "'"
        })
    }

    function r(r) {
        var o = r;
        t.includes(o, "#") && (o = o.slice(0, o.indexOf("#"))), o = o.replace(/\{color_\d+\}/, "");
        var a = e.getFontFamily(o),
            s = n(a);
        return o.replace(a, s) + ";"
    }

    function o(e, n) {
        if (t.startsWith(e, "font_")) {
            var r = e.split("font_");
            if (2 === r.length) return n.font[r[1]]
        }
        return e
    }

    function a(t, e) {
        return r(o(t, e))
    }

    function s(n, r) {
        var o = "";
        return t.forEach(n, function(t, n) {
            o += ".font_" + n + " {font: " + e.fontToCSSWithColor(t, r) + "} \n"
        }), o
    }
    return {
        fontToCSSWithoutColor: a,
        getThemeFontsCss: s,
        getFullFontFamily: n
    }
}), define("fonts/utils/fontsTracker", ["lodash", "fonts/utils/fontUtils"], function(t, e) {
    function n(n, s) {
        if (!t.isObject(n)) return !1;
        a.masterPage = a.masterPage || r(n, "masterPage"), a[s] = a[s] || r(n, s);
        var i = t.union(a.masterPage, a[s]),
            l = e.getMetadata(i);
        return t.some(l, {
            permissions: o.permissions,
            provider: o.provider
        })
    }

    function r(t, n) {
        return e.getPageUsedFontsList(t, n)
    }
    var o = {
            permissions: "all",
            provider: "monotype"
        },
        a = Object.create(null);
    return {
        shouldTrackFonts: n
    }
}), define("fonts", ["fonts/utils/fontUtils", "fonts/utils/fontCss", "fonts/utils/fontsTracker", "coreUtilsLib"], function(t, e, n, r) {
    return {
        fontUtils: t,
        fontCss: e,
        fontMetadata: r.fonts.getFontsMetaData(),
        uplodedFontsUtils: {
            isUploadedFontFamily: r.fonts.isUploadedFontFamily,
            getUploadedId: r.fonts.getUploadedId,
            getUploadedFontFaceStyles: r.fonts.getUploadedFontFaceStyles,
            getUploadedFontValue: r.fonts.getUploadedFontValue
        },
        fontsTracker: n
    }
});
//# sourceMappingURL=fonts.min.js.map