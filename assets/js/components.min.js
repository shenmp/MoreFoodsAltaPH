"use strict";
var _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
    return typeof e
} : function(e) {
    return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
};
define("components/components/masterPage/masterPage", ["lodash", "santaProps", "react"], function(e, i, o) {
    return {
        displayName: "WixMasterPage",
        propTypes: {
            style: i.Types.Component.style.isRequired
        },
        render: function() {
            return o.createElement("div", this.props, this.props.children)
        }
    }
}), define("components/components/imageButtonWithText/imageButtonWithText", ["core", "experiment"], function(e, i) {
    function o() {
        var e = {};
        return e["direction-" + this.props.compProp.direction] = !0, e["label-empty"] = !this.props.compData.label, e["extraInfo-empty"] = !i.isOpen("sv_blogSocialCounters", this.props.siteData) || !this.props.compData.extraInfo, e["size-" + this.props.compProp.size] = !0, e["type-" + this.props.compData.type] = !0, e["border-radius-editable"] = !0, this.classSet(e)
    }
    return {
        displayName: "ImageButtonWithText",
        mixins: [e.compMixins.skinBasedComp],
        getSkinProperties: function() {
            return {
                button: {
                    className: o.call(this)
                },
                buttonIcon: {
                    src: this.props.compData.iconSource
                },
                buttonLabel: {
                    children: this.props.compData.label
                },
                buttonExtraInfo: {
                    children: this.props.compData.extraInfo
                }
            }
        }
    }
}), define("components/components/mobileMediaZoom/mobileMediaZoom", ["lodash", "core", "react", "santaProps"], function(e, i, o, t) {
    return {
        displayName: "MobileMediaZoom",
        mixins: [i.compMixins.skinBasedComp],
        propTypes: {
            compData: t.Types.Component.compData.isRequired,
            forceBackground: t.Types.forceBackground.isRequired,
            disableForcedBackground: t.Types.disableForcedBackground.isRequired,
            isMobileDevice: t.Types.Device.isMobileDevice.isRequired,
            isZoomAllowed: t.Types.RenderFlags.isZoomAllowed.isRequired,
            siteWidth: t.Types.siteWidth.isRequired,
            siteScrollingBlocker: t.Types.SiteAspects.siteScrollingBlocker.isRequired,
            navigateToPage: t.Types.navigateToPage.isRequired,
            enterFullScreenMode: t.Types.enterFullScreenMode.isRequired,
            exitFullScreenMode: t.Types.exitFullScreenMode.isRequired,
            isDataChangedFunc: o.PropTypes.func.isRequired,
            getPrevAndNextStateFunc: o.PropTypes.func.isRequired,
            getChildCompFunc: o.PropTypes.func.isRequired,
            enableInnerScrolling: o.PropTypes.bool.isRequired,
            actualNavigateToItemFunc: o.PropTypes.func.isRequired,
            closeFunction: o.PropTypes.func,
            rootNavigationInfo: o.PropTypes.object
        },
        statics: {
            useSantaTypes: !0
        },
        getInitialState: function() {
            var i = this.props.getPrevAndNextStateFunc();
            return e.assign(i, {
                $viewerType: this.props.isMobileDevice ? "mobile" : "tablet",
                $buttonState: ""
            }), this.props.enableInnerScrolling && (i.$scrollState = "scrollEnabled"), i
        },
        componentWillReceiveProps: function(e) {
            this.props.isZoomAllowed ? this.props.isDataChangedFunc(this.props, e) && this.setState(this.props.getPrevAndNextStateFunc()) : setTimeout(this.closeMediaZoom, 0)
        },
        createOverlay: function(e) {
            return i.componentUtils.fullScreenOverlay.createOverlay(e, {
                siteWidth: this.props.siteWidth,
                isMobileDevice: this.props.isMobileDevice,
                siteScrollingBlocker: this.props.siteScrollingBlocker,
                forceBackground: this.props.forceBackground,
                disableForcedBackground: this.props.disableForcedBackground
            })
        },
        getSkinProperties: function() {
            var e = this.props.getChildCompFunc({
                    key: this.props.compData.id,
                    hideMediaZoomButtons: this.hideButtons,
                    showMediaZoomButtons: this.showButtons
                }, {
                    width: 0,
                    height: 0
                }),
                i = !this.state.next,
                o = {
                    "": {
                        onSwipeLeft: this.clickOnNextButton,
                        onSwipeRight: this.clickOnPreviousButton
                    },
                    itemsContainer: {
                        children: e
                    },
                    xButton: {
                        onClick: this.closeMediaZoom,
                        style: {}
                    },
                    buttonPrev: {
                        onClick: this.clickOnPreviousButton,
                        style: {}
                    },
                    buttonNext: {
                        onClick: this.clickOnNextButton,
                        style: {}
                    }
                };
            return o = this.props.enableInnerScrolling ? o : this.createOverlay(o), (i || this.props.enableInnerScrolling) && (o.buttonNext.style.display = "none", o.buttonPrev.style.display = "none"), o
        },
        clickOnNextButton: function(e) {
            this.showButtons(), this.props.actualNavigateToItemFunc(this.state.next), e && (e.preventDefault && e.preventDefault(), e.stopPropagation && e.stopPropagation())
        },
        closeMediaZoom: function() {
            this.props.closeFunction ? this.props.closeFunction() : this.props.navigateToPage({
                pageId: this.props.rootNavigationInfo.pageId
            })
        },
        clickOnPreviousButton: function(e) {
            this.showButtons(), this.props.actualNavigateToItemFunc(this.state.prev), e && (e.preventDefault && e.preventDefault(), e.stopPropagation && e.stopPropagation())
        },
        hideButtons: function() {
            this.setState({
                $buttonState: "hideButtons"
            })
        },
        showButtons: function() {
            this.setState({
                $buttonState: ""
            })
        },
        componentDidMount: function() {
            this.props.enterFullScreenMode({
                scrollable: this.props.enableInnerScrolling
            })
        },
        componentWillUnmount: function() {
            this.props.exitFullScreenMode()
        }
    }
}), define("components/components/erasableTextInput/erasableTextInput", ["lodash", "textCommon"], function(e, i) {
    function o(e) {
        return {
            $erase: e.compData.value ? "showButton" : "hideButton"
        }
    }
    return {
        displayName: "ErasableTextInput",
        mixins: [i.baseTextInput],
        behaviors: i.baseTextInput.BASE_TEXT_BEHAVIORS,
        getInitialState: function() {
            return o(this.props)
        },
        componentWillReceiveProps: function(e) {
            this.setState(o(e))
        },
        getSkinProperties: function() {
            return e.merge(this.getBaseTextInputSkinProperties(), {
                erase: {
                    children: "x",
                    onClick: this.props.onErase
                }
            })
        }
    }
}), define("components/bi/events.json", [], function() {
    return {
        FORM_SUBMIT: {
            eventId: 100,
            adapter: "ugc-viewer",
            params: {
                c1: "componentId",
                c2: "componentType"
            }
        },
        FORM_SUBMIT_SUCCESS: {
            eventId: 367,
            adapter: "ugc-viewer",
            params: {
                component_id: "componentId",
                component_type: "componentType"
            }
        },
        MOBILE_APP_BANNER_SHOWN: {
            eventId: 404,
            adapter: "app-builder",
            src: 62,
            params: {
                metaSiteId: "metaSiteId",
                type: "type"
            }
        },
        MOBILE_APP_BANNER_GET_CLICKED: {
            eventId: 405,
            adapter: "app-builder",
            src: 62,
            params: {
                metaSiteId: "metaSiteId",
                link: "link"
            }
        },
        MOBILE_APP_BANNER_CLOSE_CLICKED: {
            eventId: 406,
            adapter: "app-builder",
            src: 62,
            params: {
                metaSiteId: "metaSiteId"
            }
        },
        ZOOM_IN_EXPAND_MODE: {
            eventId: 375,
            adapter: "ugc-viewer",
            params: {
                site_id: "site_id",
                zoomType: "zoomType"
            }
        },
        ENTER_EXPAND_MODE: {
            eventId: 376,
            adapter: "ugc-viewer",
            params: {
                site_id: "site_id"
            }
        }
    }
}), define("components/components/touchMediaZoom/touchMediaZoomSlideshow", ["zepto", "lodash", "siteUtils", "core", "react", "santaProps", "components/bi/events.json"], function(e, i, o, t, n, s, r) {
    var a = t.compMixins,
        l = o.linkRenderer,
        d = o.touchMediaZoomUtils;
    return {
        displayName: "TouchMediaZoomSlideshow",
        mixins: [a.skinBasedComp],
        propTypes: {
            browser: s.Types.Browser.browser.isRequired,
            id: s.Types.Component.id.isRequired,
            compData: s.Types.Component.compData.isRequired,
            compProp: s.Types.Component.compProp.isRequired,
            rootNavigationInfo: s.Types.Component.rootNavigationInfo.isRequired,
            styleId: s.Types.Component.styleId.isRequired,
            devicePixelRatio: s.Types.Device.devicePixelRatio.isRequired,
            isMobileDevice: s.Types.Device.isMobileDevice.isRequired,
            getScreenSize: s.Types.getScreenSize.isRequired,
            linkRenderInfo: s.Types.Link.linkRenderInfo.isRequired,
            isLandscape: s.Types.mobile.isLandscape.isRequired,
            isZoomed: s.Types.mobile.isZoomed.isRequired,
            isZoomedIn: s.Types.mobile.isZoomedIn.isRequired,
            navigateToPage: s.Types.navigateToPage.isRequired,
            isZoomAllowed: s.Types.RenderFlags.isZoomAllowed.isRequired,
            siteId: s.Types.RendererModel.siteId.isRequired,
            reportBI: s.Types.reportBI.isRequired,
            staticMediaUrl: s.Types.ServiceTopology.staticMediaUrl.isRequired,
            windowKeyboardEvent: s.Types.SiteAspects.windowKeyboardEvent.isRequired,
            updateUrlIfNeeded: s.Types.Navigation.updateUrlIfNeeded.isRequired,
            currentZoomItem: s.Types.NonPageItemZoom.currentItem,
            unzoom: s.Types.NonPageItemZoom.unzoom,
            windowResizeEvent: s.Types.SiteAspects.windowResizeEvent.isRequired,
            isExperimentOpen: s.Types.isExperimentOpen,
            pageItemAdditionalData: n.PropTypes.object
        },
        getSwipeOffset: function() {
            return this.nonReactState.swipeOffset
        },
        setSwipeOffset: function(e) {
            this.nonReactState.swipeOffset = e;
            var i = this.generateTransformString(e);
            this.refs.swipeStage.style.transform = i, this.refs.swipeStage.style.webkitTransform = i
        },
        generateTransformString: function(e) {
            return "translate3d(" + -1 * e * this.stagePercentFactor + "%, 0, 0)"
        },
        getCurrentSlideIndex: function() {
            return this.nonReactState.currentSlideIndex
        },
        setCurrentSlideIndex: function(e) {
            this.nonReactState.currentSlideIndex = e
        },
        getIsZoomed: function() {
            return this.nonReactState.isZoomed
        },
        setIsZoomed: function(e) {
            this.nonReactState.isZoomed = e
        },
        getStagePercentFactor: function() {
            return 100 / this.stageData.fullWidth
        },
        getItems: function() {
            return i.get(this.props.pageItemAdditionalData, "items", [this.props.compData])
        },
        enterZoomMode: function() {
            this.isZoomed = !0, this.refs.xButton.classList.add(this.classSet({
                "force-hide": !0
            })), this.props.isExperimentOpen("sv_expandModeBi") && this.fireZoomInExpandModeEvent("pinch")
        },
        exitZoomMode: function() {
            this.isZoomed = !1, this.refs.xButton.classList.remove(this.classSet({
                "force-hide": !0
            }))
        },
        onTouchMove: function(e) {
            1 !== e.touches.length || this.isZoomed ? 1 === e.touches.length || this.isZoomed || this.enterZoomMode() : e.preventDefault()
        },
        onTouchEnd: function() {
            this.isZoomed && (this._touchEndTimeoutHandle = window.setTimeout(function() {
                this.props.isZoomedIn() || this.exitZoomMode()
            }.bind(this), 300))
        },
        fireEnterExpandModeEvent: function() {
            this.props.reportBI(r.ENTER_EXPAND_MODE, {
                site_id: this.props.siteId
            })
        },
        fireZoomInExpandModeEvent: function(e) {
            this.props.reportBI(r.ZOOM_IN_EXPAND_MODE, {
                site_id: this.props.siteId,
                zoomType: e
            })
        },
        componentWillMount: function() {
            this.fireEnterExpandModeEvent(), this.props.windowKeyboardEvent.registerToArrowLeftKey(this), this.props.windowKeyboardEvent.registerToArrowRightKey(this), Object.defineProperty(this, "swipeOffset", {
                get: this.getSwipeOffset,
                set: this.setSwipeOffset
            }), Object.defineProperty(this, "currentSlideIndex", {
                get: this.getCurrentSlideIndex,
                set: this.setCurrentSlideIndex
            }), Object.defineProperty(this, "isZoomed", {
                get: this.getIsZoomed,
                set: this.setIsZoomed
            }), Object.defineProperty(this, "stagePercentFactor", {
                get: this.getStagePercentFactor
            }), this.stageData = d.createStageData(.2), this.resetNonReactState(), this.setState({
                showInfo: !0,
                isZoomed: !1
            })
        },
        componentDidMount: function() {
            if (this.nonReactState.firstRender = !1, this.clientScreenSize = this.props.getScreenSize(), this.props.windowResizeEvent.registerToOrientationChange(this), this.setSwipeOffset(this.swipeOffset), this.refs.swipeStage.addEventListener("transitionend", this.onSwipeEnd), this.pageScroll = window.scrollY, this.pageMarginTop = e("html").css("marginTop"), e("html").addClass("media-zoom-mode"), e("html").css({
                    marginTop: 0
                }), this.props.isMobileDevice) {
                var i = this;
                requirejs(["hammer"], function(e) {
                    i.setupTouchHandlers(e)
                }), this.refs[""].addEventListener("touchend", this.onTouchEnd), this.refs[""].addEventListener("touchcancel", this.onTouchEnd), this.refs[""].addEventListener("touchmove", this.onTouchMove)
            }
        },
        componentWillUnmount: function() {
            window.clearTimeout(this._touchEndTimeoutHandle), e("html").removeClass("media-zoom-mode"), e("html").css({
                marginTop: this.pageMarginTop
            }), this.props.windowResizeEvent.unregisterToOrientationChange(this), window.scrollTo(0, this.pageScroll)
        },
        onOrientationChange: function() {
            this.clientScreenSize = this.props.getScreenSize()
        },
        setupTouchHandlers: function(e) {
            this.hammertime = new e.Manager(this.refs[""], {
                cssProps: {
                    touchCallout: "default"
                }
            }), this.hammertime.add(new e.Pan({
                event: "pan",
                direction: e.DIRECTION_HORIZONTAL
            })), this.hammertime.add(new e.Pan({
                event: "panstart",
                direction: e.DIRECTION_HORIZONTAL
            })), this.hammertime.add(new e.Pan({
                event: "panend",
                direction: e.DIRECTION_HORIZONTAL
            })), this.hammertime.on("panstart pan panend", this.onSwipe), this.props.isExperimentOpen("sv_expandModeBi") && (this.hammertime.add(new e.Tap({
                event: "doubletap",
                taps: 2,
                threshold: 30,
                posThreshold: 30
            })), this.hammertime.on("doubletap", i.partial(this.fireZoomInExpandModeEvent, "doubleTap")))
        },
        componentWillUpdate: function() {
            this.props.isMobileDevice && this.setSwipeOffset(this.stageData.centerPart_begin)
        },
        componentWillReceiveProps: function() {
            this.props.isZoomAllowed || setTimeout(this.closeMediaZoom, 0)
        },
        resetNonReactState: function(e) {
            var o = e || this.props.compData,
                t = i.findIndex(this.getItems(), {
                    id: o.id
                }),
                n = this.props.isZoomed();
            this.nonReactState = {
                currentSlideIndex: t,
                swipeOffset: this.stageData.centerPart_begin,
                isZoomed: n,
                firstRender: !0
            }
        },
        onSwipe: function(e) {
            if (!(this.isZoomed || e.center.x - e.deltaX < 29)) switch (e.type) {
                case "panstart":
                    break;
                case "pan":
                    this.swipeOffset = i.clamp(this.stageData.centerPart_begin - e.deltaX / window.innerWidth, this.currentSlideIndex > 0 ? this.stageData.leftPart_leftMargin : this.stageData.centerPart_leftMargin, this.currentSlideIndex < this.getItems().length - 1 ? this.stageData.rightPart_rightMargin : this.stageData.centerPart_rightMargin);
                    break;
                case "panend":
                    this.startTransition();
                    break;
                default:
                    throw "unsupported event type: " + e.type
            }
        },
        calcTransitionTarget: function() {
            return this.swipeOffset < this.stageData.centerPart_leftMargin ? {
                offset: this.stageData.leftPart_begin,
                index: this.currentSlideIndex - 1
            } : this.swipeOffset > this.stageData.centerPart_rightMargin ? {
                offset: this.stageData.rightPart_begin,
                index: this.currentSlideIndex + 1
            } : {
                offset: this.stageData.centerPart_begin,
                index: this.currentSlideIndex
            }
        },
        startTransition: function(e) {
            var i = e || this.calcTransitionTarget();
            this.refs.swipeStage.classList.add(this.props.styleId + "_animate"), this.swipeOffset = i.offset, this.currentSlideIndex = i.index
        },
        onSwipeEnd: function() {
            this.refs.swipeStage.classList.remove(this.props.styleId + "_animate"), this.swipeOffset = this.stageData.centerPart_begin, this.navigateToSlide(this.currentSlideIndex), this.setState({})
        },
        navigateToSlide: function(e) {
            var o = this.getItems()[e].id,
                t = i.clone(this.props.rootNavigationInfo);
            t.pageItemId = o, this.props.updateUrlIfNeeded(t)
        },
        closeMediaZoom: function() {
            this.props.currentZoomItem ? this.props.unzoom() : this.props.navigateToPage({
                pageId: this.props.rootNavigationInfo.pageId
            })
        },
        onXButton: function(e) {
            this.closeMediaZoom(), e.preventDefault()
        },
        onArrowLeftKey: function() {
            this.currentSlideIndex > 0 && this.startTransition({
                offset: this.stageData.leftPart_begin,
                index: this.currentSlideIndex - 1
            })
        },
        onArrowRightKey: function() {
            this.currentSlideIndex < this.getItems().length - 1 && this.startTransition({
                offset: this.stageData.rightPart_begin,
                index: this.currentSlideIndex + 1
            })
        },
        toggleInfoPanel: function(e) {
            e.target !== this.refs.stage_CENTER.refs.link && this.setState({
                showInfo: !this.isManipulated() && !this.state.showInfo
            })
        },
        getGotoLink: function(e) {
            var o = e.link;
            if (o) {
                var t = l.renderLink(o, this.props.linkRenderInfo, this.props.rootNavigationInfo);
                return t.children = i.get(this.props.compProp, "goToLinkText", "Go to link"), t
            }
        },
        getStageParts: function() {
            return i.filter([{
                id: "LEFT",
                imageIndex: this.currentSlideIndex - 1,
                offset: this.stageData.leftPart_leftMargin
            }, {
                id: "CENTER",
                imageIndex: this.currentSlideIndex,
                offset: this.stageData.centerPart_leftMargin
            }, {
                id: "RIGHT",
                imageIndex: this.currentSlideIndex + 1,
                offset: this.stageData.rightPart_leftMargin
            }], function(e) {
                return e.imageIndex >= 0 && e.imageIndex < this.getItems().length
            }.bind(this))
        },
        isManipulated: function() {
            return this.props.isMobileDevice && this.props.isLandscape() || this.state.isZoomed
        },
        buildStageChildren: function() {
            var e = [];
            return i.forEach(this.getStageParts(), function(i) {
                var o = i.offset * this.stagePercentFactor,
                    t = "stage_" + i.id,
                    n = this.getItems()[i.imageIndex],
                    s = {
                        pixelAspectRatio: this.props.devicePixelRatio,
                        browser: this.props.browser,
                        staticMediaUrl: this.props.staticMediaUrl,
                        screenSize: this.clientScreenSize
                    },
                    r = this.createChildComponent(n, "wysiwyg.viewer.components.TouchMediaZoomItem", "image", {
                        key: this.props.id + "_item" + i.imageIndex,
                        id: t,
                        ref: t,
                        imageData: n,
                        clientData: s,
                        link: this.getGotoLink(n),
                        screenSize: this.clientScreenSize,
                        itemToScreenRatio: 1.4,
                        showInfo: this.state.showInfo && !this.isManipulated(),
                        itemLeft: o,
                        firstRender: this.nonReactState.firstRender
                    });
                e.push(r)
            }.bind(this)), e
        },
        getSkinProperties: function() {
            return {
                "": {
                    onClick: this.toggleInfoPanel
                },
                swipeStage: {
                    style: {
                        width: 100 * this.stageData.fullWidth + "%"
                    },
                    children: this.buildStageChildren()
                },
                xButton: {
                    onClick: this.onXButton,
                    className: this.classSet({
                        hidden: this.isManipulated()
                    })
                }
            }
        }
    }
}), define("components/components/touchMediaZoom/touchMediaZoomItem", ["lodash", "react", "core", "siteUtils"], function(e, i, o, t) {
    var n = t.touchMediaZoomUtils;
    return {
        displayName: "TouchMediaZoomItem",
        mixins: [o.compMixins.skinBasedComp],
        propTypes: {
            itemToScreenRatio: i.PropTypes.number.isRequired,
            itemLeft: i.PropTypes.number.isRequired,
            imageData: i.PropTypes.object.isRequired,
            clientData: i.PropTypes.object.isRequired,
            showInfo: i.PropTypes.bool.isRequired,
            firstRender: i.PropTypes.bool.isRequired,
            link: i.PropTypes.object,
            screenSize: i.PropTypes.object
        },
        getTitle: function() {
            var i = e.get(this.props.imageData, "title");
            return {
                className: this.classSet({
                    hidden: !i
                }),
                children: i
            }
        },
        getDescription: function() {
            var i = e.get(this.props.imageData, "description");
            return {
                className: this.classSet({
                    hidden: !i
                }),
                children: i
            }
        },
        getLink: function() {
            return e.assign({}, this.props.link, {
                className: this.classSet({
                    hidden: !this.props.link
                })
            })
        },
        hasInfo: function() {
            return this.props.imageData.title || this.props.imageData.description || this.props.link
        },
        isImageFullWidth: function() {
            return !e.has(this.props.screenSize, "width") || this.props.screenSize <= e.get(this.props.imageApiFastData, "css.img.width")
        },
        getImageProps: function(i, o) {
            if (this.props.firstRender) return {
                "data-imgdata": JSON.stringify(e.pick(i, ["width", "height", "uri", "quality"])),
                "data-imgscale": o || 1
            };
            var t = n.getImageApiData(i, this.props.clientData, o || 1);
            return {
                src: t.uri,
                style: t.css.img
            }
        },
        getSkinProperties: function() {
            var i = e.assign(this.getImageProps(this.props.imageData, .25), {
                    className: this.classSet({
                        fast: !0
                    })
                }),
                o = e.assign(this.getImageProps(this.props.imageData), {
                    className: this.classSet({
                        heavy: !0
                    })
                }),
                t = e.has(this.props.screenSize, "width") ? {
                    width: this.props.screenSize.width + "px"
                } : {},
                n = e.has(this.props.screenSize, "width") ? {
                    width: this.props.screenSize.width * this.props.itemToScreenRatio + "px"
                } : {};
            return {
                "": {
                    className: this.classSet({
                        parallax: this.isImageFullWidth()
                    }),
                    style: e.assign({}, n, {
                        left: this.props.itemLeft + "%"
                    }),
                    "data-firstrender": this.props.firstRender
                },
                imageContainer: {
                    style: t
                },
                hirRes: o,
                lowRes: i,
                info: {
                    className: this.classSet({
                        hidden: !this.props.showInfo || !this.hasInfo()
                    }),
                    style: t
                },
                description: this.getDescription(),
                title: this.getTitle(),
                link: this.getLink()
            }
        }
    }
}), define("components/components/inputWithValidation/inputWithValidation", ["core", "lodash", "react", "santaProps"], function(e, i, o, t) {
    function n() {
        var e = this.props.validators || [],
            o = this.state.value,
            t = "";
        return i.forEach(e, function(e) {
            if (t) return !1;
            t = e(o)
        }), this.setState({
            error: t
        }), this.hasError = !!t, t
    }

    function s(e, i) {
        return this.state.error ? {
            className: e,
            children: this.state.error
        } : this.props.asyncErrorMessage ? {
            className: e,
            children: this.props.asyncErrorMessage
        } : i
    }
    return {
        displayName: "InputWithValidation",
        mixins: [e.compMixins.skinBasedComp],
        propTypes: {
            isMobileView: t.Types.isMobileView.isRequired,
            validators: o.PropTypes.array,
            asyncErrorMessage: o.PropTypes.string,
            defaultValue: o.PropTypes.string,
            styleId: o.PropTypes.string,
            onChange: o.PropTypes.func,
            lazyValidation: o.PropTypes.bool,
            label: o.PropTypes.string,
            placeholder: o.PropTypes.string,
            noPlaceHolder: o.PropTypes.bool,
            type: o.PropTypes.string
        },
        statics: {
            useSantaTypes: !0
        },
        getInitialState: function() {
            return {
                value: this.props.defaultValue || "",
                error: !1
            }
        },
        onChange: function(e) {
            e.persist(), this.setState({
                value: e.target.value
            }), this.props.onChange && this.props.onChange(e), this.debouncedOnChange(e), this.props.lazyValidation && this.setState({
                error: !1
            })
        },
        debouncedOnChange: i.debounce(function() {
            this.props.lazyValidation || this.validate()
        }, 200),
        getValue: function() {
            return this.state.value
        },
        getSkinProperties: function() {
            var e = this.props.styleId + "_error",
                o = e,
                t = this.state.error || this.props.asyncErrorMessage ? e : "",
                n = this.props.styleId + "_new";
            o += " " + n, t += " " + n;
            var r = {
                    onFocus: this.onFocus,
                    onBlur: this.onBlur
                },
                a = {
                    className: n
                };
            return this.props.isMobileView && (t += " " + this.props.styleId + "_mobile", o += " " + this.props.styleId + "_mobile"), {
                label: this.props.label ? {
                    children: this.props.label
                } : {},
                input: i.merge({
                    className: t,
                    value: this.state.value,
                    placeholder: this.state.noPlaceHolder ? "" : this.props.placeholder,
                    onChange: this.onChange,
                    type: this.props.type || "text"
                }, r),
                errorMessage: s.bind(this)(o, a)
            }
        },
        isValid: function() {
            return !this.hasError
        },
        validate: function() {
            return !n.apply(this)
        },
        onFocus: function() {
            this.setState({
                noPlaceHolder: !0
            })
        },
        onBlur: function() {
            this.setState({
                noPlaceHolder: !1
            })
        }
    }
}), define("components/components/wixAppsImageButton/wixAppsImageButton", ["core", "react"], function(e, i) {
    var o = {
        Default: 0,
        Hover: 1,
        Click: 2
    };
    return {
        displayName: "ImageButton",
        mixins: [e.compMixins.skinBasedComp],
        getInitialState: function() {
            return {
                currentPositionX: this.props.compProp.startPositionX,
                currentPositionY: this.props.compProp.startPositionY
            }
        },
        setSpriteState: function(e) {
            var i = this.props.compProp,
                o = this.props.compData;
            switch (i.spriteDirection) {
                case "none":
                    break;
                case "horizontal":
                    this.setState({
                        currentPositionX: i.startPositionX - e * o.width
                    });
                    break;
                default:
                    this.setState({
                        currentPositionY: i.startPositionY - e * o.height
                    })
            }
        },
        onMouseOver: function() {
            this.setSpriteState(o.Hover), this.props.onMouseOver && this.props.onMouseOver()
        },
        onMouseDown: function() {
            this.setSpriteState(o.Click)
        },
        onMouseUp: function() {
            this.setSpriteState(o.Hover)
        },
        onMouseOut: function() {
            this.setSpriteState(o.Default), this.props.onMouseOut && this.props.onMouseOut()
        },
        getSpriteProperties: function(e) {
            var o = {
                backgroundImage: "url(" + e.url + ")",
                backgroundRepeat: "no-repeat",
                backgroundPosition: this.state.currentPositionX + "px " + this.state.currentPositionY + "px",
                width: e.width,
                height: e.height,
                display: "inline-block"
            };
            return {
                "": {
                    style: {
                        width: e.width,
                        height: e.height
                    },
                    children: i.DOM.span({
                        style: o
                    }),
                    onMouseOver: this.onMouseOver,
                    onMouseOut: this.onMouseOut,
                    onMouseDown: this.onMouseDown,
                    onMouseUp: this.onMouseUp
                }
            }
        },
        getImageProperties: function(e) {
            return {
                "": {
                    style: {
                        width: e.width,
                        height: e.height
                    },
                    children: i.DOM.img({
                        src: e.url,
                        width: e.width,
                        height: e.height,
                        title: e.title
                    }),
                    onMouseOver: this.props.onMouseOver,
                    onMouseOut: this.props.onMouseOut
                }
            }
        },
        getSkinProperties: function() {
            var e = this.props.compData;
            return this.props.compProp.isSprite ? this.getSpriteProperties(e) : this.getImageProperties(e)
        }
    }
}), define("components/components/colorOption/colorOption", ["core", "lodash"], function(e, i) {
    return {
        displayName: "ColorOption",
        mixins: [e.compMixins.optionInput],
        getSkinProperties: function() {
            var e = {
                "": {
                    style: {
                        backgroundColor: this.props.compData.text
                    }
                },
                tooltip: this.createInfoTipChildComponent()
            };
            return this.props.compData.disabled || (e[""] = i.merge(e[""], {
                onClick: this.props.onClick,
                onMouseEnter: this.onMouseEnter,
                onMouseLeave: this.onMouseLeave
            })), e
        }
    }
}), define("components/components/mobileColorOption/mobileColorOption", ["core"], function(e) {
    return {
        displayName: "MobileColorOption",
        mixins: [e.compMixins.optionInput],
        getSkinProperties: function() {
            var e = {
                "": {
                    style: {
                        backgroundColor: this.props.compData.text
                    }
                }
            };
            return this.props.compData.disabled || (e[""].onClick = this.props.onClick, e[""].style.cursor = "pointer"), e
        }
    }
}), define("components/components/ebayItemsBySeller/ebayItemsBySeller", ["react", "reactDOM", "core", "utils"], function(e, i, o, t) {
    var n = o.compMixins,
        s = t.urlUtils,
        r = {
            Australia: "15",
            Austria: "16",
            Belgium_Dutch: "123",
            Belgium_French: "23",
            Canada: "2",
            CanadaFrench: "210",
            China: "223",
            eBayMotors: "100",
            France: "71",
            Germany: "77",
            HongKong: "201",
            India: "203",
            Ireland: "205",
            Italy: "101",
            Malaysia: "207",
            Netherlands: "146",
            Philippines: "211",
            Poland: "212",
            Singapore: "216",
            Spain: "186",
            Sweden: "218",
            Switzerland: "193",
            Taiwan: "196",
            UK: "3",
            US: "0"
        },
        a = {
            EKServer: "",
            ai: "aj|kvpqvqlvxwkl",
            cid: "0",
            eksize: "1",
            encode: "UTF-8",
            endcolor: "FF0000",
            endtime: "y",
            fbgcolor: "FFFFFF",
            fs: "0",
            hdrsrch: "n",
            img: "y",
            logo: "6",
            numbid: "n",
            paypal: "n",
            popup: "y",
            prvd: "9",
            r0: "3",
            shipcost: "y",
            sort: "MetaEndSort",
            sortby: "endtime",
            sortdir: "asc",
            srchdesc: "n",
            title: "",
            tlecolor: "FFFFFF",
            tlefs: "0",
            tlfcolor: "000000",
            toolid: "10004",
            track: "5335838312"
        };
    return {
        displayName: "EbayItemsBySeller",
        mixins: [n.skinBasedComp, n.skinInfo],
        getScriptUrl: function() {
            var e = this._prepareOptions();
            return "http://lapi.ebay.com/ws/eBayISAPI.dll?" + s.toQueryString(a) + "&" + s.toQueryString(e)
        },
        getSkinProperties: function() {
            var i, o, t = this.props.structure.layout,
                n = this.props.siteData.getBrowser().ie;
            return n || (o = 'data:text/html,<html><body style="margin:0px;"><div><script src="' + this.getScriptUrl() + '"><\/script></div></body></html>'), this.props.compData.sellerId && (i = e.DOM.iframe({
                src: n ? "" : encodeURI(o),
                style: {
                    width: t.width,
                    height: t.height
                }
            })), {
                iFrameHolder: {
                    children: this.props.compData.sellerId ? [i] : []
                }
            }
        },
        getInitialState: function() {
            return {
                $contentState: this.props.compData.sellerId ? "hasContent" : "noContent"
            }
        },
        componentDidMount: function() {
            if (this.props.compData.sellerId) {
                var e = this.props.siteData.getBrowser();
                if (e.ie) {
                    var o = i.findDOMNode(this).querySelector("iframe");
                    10 === parseInt(e.version, 10) && (o.src = "javascript:(function () {document.open();document.domain='" + encodeURIComponent(window.document.domain) + "';document.close()})();"), o.contentWindow.document.write('<html><body style="margin:0px;"><div><script type="text/javascript" src="' + this.getScriptUrl() + '"><\/script></div></body></html>')
                }
            }
        },
        _prepareOptions: function() {
            var e = this.props.structure.layout,
                i = Math.floor((e.height - 100) / 70),
                o = this.props.compData.sellerId;
            return {
                width: e.width,
                hdrimage: this.props.compProp.headerImage,
                fntcolor: this.getParamFromDefaultSkin("fontColor").value.hexString().replace("#", ""),
                bdrcolor: this.getParamFromDefaultSkin("borderColor").value.hexString().replace("#", ""),
                hdrcolor: this.getParamFromDefaultSkin("headerColor").value.hexString().replace("#", ""),
                tbgcolor: this.getParamFromDefaultSkin("backgroundColor").value.hexString().replace("#", ""),
                lnkcolor: this.getParamFromDefaultSkin("linkColor").value.hexString().replace("#", ""),
                num: i,
                si: o,
                sid: o,
                siteid: r[this.props.compData.registrationSite] || 0
            }
        }
    }
}), define("components/components/icon/icon", ["lodash", "core", "react"], function(e, i, o) {
    return {
        displayName: "Icon",
        mixins: [i.compMixins.skinBasedComp],
        getInitialState: function() {
            return {
                isIconClicked: !1
            }
        },
        onClick: function() {
            this.setState({
                isIconClicked: !this.state.isIconClicked
            })
        },
        getSkinProperties: function() {
            var i = this.props.compData,
                t = {
                    img: {
                        parentConst: o.DOM.img,
                        src: i.url,
                        title: i.title,
                        width: i.width,
                        height: i.height,
                        onClick: this.onClick
                    }
                };
            return t[""] = {
                style: e.merge(this.props.style, {
                    width: i.width,
                    height: i.height
                })
            }, t
        }
    }
}), define("components/components/numericStepper/numericStepper", ["lodash", "core", "reactDOM"], function(e, i, o) {
    function t(e, i, t) {
        if (this.state.currentValue) {
            var n = parseInt(this.state.currentValue, 10) + e,
                r = o.findDOMNode(this.refs.inputNumberInput);
            i.target = r, s.call(this, i, t, this.state.currentValue, String(n))
        }
    }

    function n(e, i, o) {
        (o = o || e.target.value) ? s.call(this, e, i, this.state.currentValue, o): this.setState({
            currentValue: o,
            previousValue: this.state.currentValue
        })
    }

    function s(e, i, o, t) {
        var n = Number(t),
            s = Number(o),
            r = n < this.state.minValue,
            a = n > this.state.maxValue;
        "" === t || isNaN(n) ? n = s : (r ? n = this.state.minValue : a && this.props.onInputChangedFailed && (e.type = "inputChangedFailed", e.payload = {
            oldValue: s,
            invalidValue: n,
            maxValue: this.state.maxValue,
            minValue: this.state.minValue
        }, this.props.onInputChangedFailed(e, i), n = this.state.maxValue), t = String(n), this.props.onInputChange && n !== s && (e.type = "inputChanged", e.payload = t, this.props.onInputChange(e, i)), this.setState({
            currentValue: t,
            previousValue: String(s)
        }))
    }

    function r(e) {
        return "space" !== e.key && (!e.shiftKey || e.keyCode >= 35 && e.keyCode <= 40) && (1 !== e.key.length || e.ctrlKey || e.metaKey || e.shiftKey || e.keyCode >= 48 && e.keyCode <= 57 || e.keyCode >= 96 && e.keyCode <= 105)
    }

    function a(e, i) {
        s.call(this, e, i, this.state.previousValue, this.state.currentValue)
    }
    return {
        displayName: "NumericStepper",
        mixins: [i.compMixins.skinBasedComp],
        getInitialState: function() {
            return this.getState(this.props)
        },
        getState: function(i) {
            return {
                $validation: i.compProp.message ? "invalid" : "valid",
                currentValue: this.props.compData.value,
                previousValue: this.props.compData.value,
                minValue: e.isUndefined(this.props.compProp.minValue) ? 0 : Number(this.props.compProp.minValue),
                maxValue: e.isUndefined(this.props.compProp.maxValue) ? 999 : Number(this.props.compProp.maxValue)
            }
        },
        componentWillReceiveProps: function(e) {
            this.setState(this.getState(e))
        },
        getSkinProperties: function() {
            return {
                inputNumberInput: {
                    value: this.state.currentValue,
                    onChange: n.bind(this),
                    onKeyDown: r.bind(this),
                    onBlur: a.bind(this)
                },
                plus: {
                    onClick: t.bind(this, 1)
                },
                minus: {
                    onClick: t.bind(this, -1)
                }
            }
        }
    }
}), define("components/components/optionsListInput/optionsListInput", ["lodash", "core", "react", "utils"], function(e, i, o, t) {
    function n(e, i, o) {
        this.props.onSelectionChange && (i.type = "selectionChanged", i.payload = e, this.props.onSelectionChange(i, o))
    }
    return {
        displayName: "OptionsListInput",
        mixins: [i.compMixins.skinBasedComp],
        propType: {
            itemClassName: o.PropTypes.string.isRequired,
            itemSkin: o.PropTypes.string.isRequired,
            selectedItem: o.PropTypes.object,
            valid: o.PropTypes.boolean,
            onSelectionChange: o.PropTypes.function
        },
        getInitialState: function() {
            return this.getCssState(this.props)
        },
        getCssState: function(e) {
            return {
                $validity: !1 === e.valid ? "invalid" : "valid"
            }
        },
        componentWillReceiveProps: function(e) {
            e.valid !== this.props.valid && this.setState(this.getCssState(e))
        },
        getSkinProperties: function() {
            return {
                "": {
                    children: e.map(this.props.compData.options, function(e, i) {
                        var o = {
                            selected: this.props.selectedItem === e,
                            onClick: n.bind(this, e),
                            id: this.props.id + i,
                            ref: i
                        };
                        return this.createChildComponent(e, this.props.itemClassName, {
                            skin: this.props.itemSkin,
                            styleId: t.santaTypes.shortenStyleId(this.props.itemSkin)
                        }, o)
                    }.bind(this))
                }
            }
        }
    }
}), define("components/components/selectOptionsList/selectOptionsList", ["lodash", "core", "react", "utils"], function(e, i, o, t) {
    function n(e, i, o) {
        this.props.onSelectionChange && (i.type = "selectionChanged", i.payload = e, this.props.onSelectionChange(i, o))
    }
    var s = i.compMixins;
    return {
        displayName: "SelectOptionsList",
        mixins: [s.skinBasedComp, s.timeoutsMixin],
        propType: {
            itemClassName: o.PropTypes.string.isRequired,
            itemSkin: o.PropTypes.string.isRequired,
            selectedItem: o.PropTypes.object,
            valid: o.PropTypes.boolean,
            onSelectionChange: o.PropTypes.function
        },
        getInitialState: function() {
            return {
                $validity: !1 === this.props.valid ? "invalid" : "valid",
                $tooltip: this.props.selectedItem && this.props.selectedItem.description ? "displayed" : "hidden"
            }
        },
        componentWillMount: function() {
            if ("displayed" === this.state.$tooltip) {
                var e = this;
                this.setTimeout(function() {
                    e.setState({
                        $tooltip: "hidden"
                    })
                }, 1500)
            }
        },
        componentWillReceiveProps: function(e) {
            var i = this.props,
                o = {
                    $validity: !1 === e.valid ? "invalid" : "valid"
                };
            if ((!i.selectedItem || i.selectedItem && e.selectedItem && i.selectedItem.description !== e.selectedItem.description) && (o.$tooltip = e.selectedItem && e.selectedItem.description ? "displayed" : "hidden"), this.setState(o), this.props.selectedItem !== e.selectedItem && "displayed" === o.$tooltip) {
                var t = this;
                this.setTimeout(function() {
                    t.setState({
                        $tooltip: "hidden"
                    })
                }, 1500)
            }
        },
        getSkinProperties: function() {
            var i = {
                itemsContainer: {
                    children: e.map(this.props.compData.options, function(e, i) {
                        var o = {
                            selected: this.props.selectedItem === e,
                            onClick: n.bind(this, e),
                            ref: i
                        };
                        return this.createChildComponent(e, this.props.itemClassName, {
                            skin: this.props.itemSkin,
                            styleId: t.santaTypes.shortenStyleId(this.props.itemSkin)
                        }, o)
                    }.bind(this))
                }
            };
            return this.props.selectedItem && (i.tooltip = {
                children: [this.props.selectedItem.description]
            }), i
        }
    }
}), define("components/components/dialogs/translations/dialogMixinTranslations", [], {
    de: {
        SMResetPass_Reset_Succ: "Sie haben Ihr Passwort erfolgreich zurückgesetzt.",
        SMForm_Password: "Passwort",
        SMLogin_Remember_Me: "Angemeldet bleiben",
        PasswordLogin_Password: "Passwort",
        SMForm_Error_Password_Blank: "Passwort kann nicht leer sein.",
        SMRegister_Login: "Anmelden",
        SMForm_Error_19999: "Unbekannter Nutzer",
        SMForm_Error_19958: "Ihre Anfrage auf Mitgliedschaft wartet auf Bestätigung vom Betreiber der Website.",
        SMResetPass_Retype_Password: "Erneut eingeben:",
        SMForm_Error_Password_Length: "Passwortlänge muss zwischen {0} und {1} sein.",
        SMContainer_OK: "OK",
        SMResetPassMail_Back_Login: "Zurück zur Anmeldung",
        dialogMixinTranslations_forgot_password_mobile: "Passwort vergessen?",
        dialogMixinTranslations_RESET_PASSWORD_SUCESS_TITLE: "Ihr Passwort wurde geändert.",
        dialogMixinTranslations_login_google: "Mit Google+ anmelden",
        SMForm_Error_19995: "Diese E-Mail-Adresse existiert bereits.",
        SMResetPassMail_confirmation_title: "Bitte prüfen Sie Ihren Posteingang.",
        dialogMixinTranslations_RESET_PASSWORD_NEWFIELD_RETYPE: "Passwort erneut eingeben",
        dialogMixinTranslations_RESET_PASSWORD_NEWFIELD: "Neues Passwort eingeben",
        dialogMixinTranslations_RESET_PASSWORD_TEXT: "Bitte geben Sie das Passwort unten ein",
        SMLogin_OR: "Oder",
        dialogMixinTranslations_RESET_PASSWORD_CHECKEMAIL_TITLE: "Bitte überprüfen Sie Ihren Posteingang",
        SMRegister_sign_up: "Registrieren",
        dialogMixinTranslations_signup_facebook: "Mit Facebook registrieren",
        SMForm_Error_Email_Blank: "E-Mail-Adresse kann nicht leer sein.",
        PasswordLogin_Header: "Geben Sie ein Passwort ein, um diese Seite zu sehen.",
        dialogMixinTranslations_GUEST_LOGIN_SUBTITLE: "Bitte geben Sie das Passwort unten ein.",
        SMForm_Error_Non_Ascii_Chars: "Passwort darf nur ASCII-Zeichen beinhalten.",
        SMForm_Email: "E-Mail-Adresse",
        dialogMixinTranslations_Log_In: "Anmelden",
        PasswordLogin_Wrong_Password: "Bitte geben Sie das richtige Passwort ein.",
        dialogMixinTranslations_login_facebook: "Mit Facebook anmelden",
        SMLogin_Forgot_Password: "Passwort vergessen?",
        dialogMixinTranslations_signup_switch_email: "Mit E-Mail-Adresse registrieren",
        dialogMixinTranslations_forgot_password_mobile_new: "Vergessen?",
        PasswordLogin_Error_General: "Serverfehler – Anmeldung nicht möglich",
        dialogMixinTranslations_Password_Reset_TooShort: "Das Passwort muss 4-15 Zeichen beinhalten.",
        SMContainer_Show_Confirm: "Diese Seite ist mit der Mitgliederanmeldung geschützt. Ihre Besucher können diese Seite erst sehen, wenn diese angemeldet sind.",
        dialogMixinTranslations_Log_In_Title: "Anmelden",
        SMContainer_Show_Confirm2: "Gehen Sie zum Bereich „Kontakte“ in Ihrem Konto und klicken Sie auf „Website Mitglieder“, um Mitglieder zu verwalten.",
        dialogMixinTranslations_switch_to_signup: "Sie haben kein Konto?",
        SMContain_Cancel: "Abbrechen",
        SMLogin_Login: "Anmelden",
        SMApply_Success1: "Vielen Dank! Ihre Anfrage zur Mitgliederanmeldung wurde versandt und wartet auf Bestätigung.",
        SMForm_Error_19976: "Falsche E-Mail-Adresse oder Passwort.",
        dialogMixinTranslations_signup_google: "Mit Google+ anmelden",
        SMApply_Success2: "Der Administrator der Website wird Sie per E-Mail informieren ( {0} ), sobald Ihre Anfrage bestätigt wurde. ",
        SMForm_Error_18880: "Email address must be provided",
        dialogMixinTranslations_login_switch_email: "Mit E-Mail-Adresse anmelden",
        SMForm_Error_Email_Invalid: "Ungültige E-Mail-Adresse",
        SMProfile_Update_Details: "Angaben aktualisieren",
        SMResetPass_Continue: "Fortfahren",
        dialogMixinTranslations_forgot_password: "Passwort vergessen?",
        dialogMixinTranslations_RESET_PASSWORD_CHECKEMAIL_TEXT: "Wir haben Ihnen einen Link per E-Mail geschickt, mit dem Sie Ihr Passwort zurücksetzen können.",
        SMForm_Error_Password_Retype: "Passwörter stimmen nicht überein.",
        SMForm_Error_19972: "Ungültiges Token",
        dialogMixinTranslations_RESET_PASSWORD_TITLE: "Passwort zurücksetzen",
        SMResetPass_Reset_Fail: "Passwort konnte nicht geändert werden. Probieren Sie es später nochmal.",
        SMRegister_Already_Have_User: "Ich bin bereits Mitglied",
        SMResetPassMail_confirmation_msg: "Wir haben Ihnen eine E-Mail mit einem Link geschickt, mit dem Sie Ihr Passwort zurücksetzen können.",
        SMRegister_GO: "OK",
        SMResetPass_New_Password: "Neues Passwort eingeben",
        SMResetPassMail_title: "Passwort zurücksetzen",
        SMContainer_Need_Log_In: "Sie müssen angemeldet sein, um diese Seite zu sehen.",
        SMResetPass_Message: "Bitte füllen Sie beide Felder unten aus, um ein neues Passwort festzulegen. ",
        SMForm_Error_19988: "Validierungsfehler",
        SMForm_Error_General_Err: "Serverfehler. Versuchen Sie es später nochmal.",
        SMForm_Retype_Password: "Passwort erneut eingeben",
        dialogMixinTranslations_RESET_PASSWORD_BUTTON: "Passwort zurücksetzen",
        PasswordLogin_AdministratorLogin: "Administrator-Anmeldung",
        SMProfile_Update: "Aktualisieren",
        SMResetPassMail_Enter_Email: "Bitte geben Sie Ihre E-Mail-Adresse ein.",
        SMForm_Error_19980: "Vom Betreiber der Website geblockt",
        dialogMixinTranslations_GUEST_LOGIN_TITLE: "Gästebereich",
        PasswordLogin_Cancel: "Abbrechen",
        PasswordLogin_Submit: "OK",
        SMForm_Error_19984: "Ungültige Sitzung"
    },
    en: {
        PasswordLogin_AdministratorLogin: "Administrator Login",
        SMContainer_Show_Confirm: "This page is protected with a member login. Your users will be able to see this page once they are logged in.",
        SMRegister_sign_up: "Sign up",
        SMLogin_OR: "Or",
        SMForm_Error_19972: "It appears that this link has expired",
        SMLogin_Login: "Login",
        SMForm_Error_19976: "Wrong email or password",
        PasswordLogin_Submit: "OK",
        SMLogin_Remember_Me: "Remember Me",
        SMResetPassMail_Enter_Email: "Please enter your email address",
        SMForm_Password: "Password",
        SMContainer_OK: "OK",
        SMResetPass_Reset_Fail: "Password could not have been changed. Try again later.",
        PasswordLogin_Cancel: "Cancel",
        SMResetPass_Message: "To set your new password, please enter it in both fields below. ",
        SMResetPass_New_Password: "Enter a new password",
        SMResetPass_Retype_Password: "Type again:",
        SMForm_Error_19980: "Blocked by site owner",
        SMResetPassMail_confirmation_title: "Please check your email",
        SMForm_Error_19984: "Invalid Session",
        PasswordLogin_Wrong_Password: "Please enter the correct password",
        SMResetPass_Reset_Succ: "You’ve successfully reset your password.",
        SMForm_Error_19988: "Validation Error",
        SMForm_Error_Non_Ascii_Chars: "Password must contain only ASCII characters",
        PasswordLogin_Header: "Enter password to view this page",
        SMRegister_GO: "GO",
        PasswordLogin_Password: "Password",
        SMResetPassMail_confirmation_msg: "We’ve sent you an email with a link that will allow you to reset your password",
        PasswordLogin_Error_General: "Server error - Unable to log in",
        SMResetPass_Continue: "Continue",
        SMLogin_Forgot_Password: "Forgot your password?",
        SMForm_Error_Password_Blank: "Password cannot be blank",
        SMForm_Error_Email_Invalid: "Email is invalid",
        SMForm_Error_19958: "Your member request is waiting approval from the site owner",
        SMForm_Error_19995: "Email is already taken",
        SMProfile_Update: "Update",
        SMProfile_Update_Details: "Update your details",
        SMForm_Email: "Email",
        SMForm_Error_Password_Length: "Password length must be between {0} and {1}",
        SMContain_Cancel: "Cancel",
        SMContainer_Show_Confirm2: "To manage your site's members, go to your Contacts from the Dashboard and click Site Members",
        SMContainer_Need_Log_In: "To view this page, you need to be logged in.",
        SMForm_Error_19999: "Unknown user",
        SMRegister_Already_Have_User: "I'm already a user",
        SMForm_Error_Email_Blank: "Email cannot be blank",
        SMForm_Error_General_Err: "Server error. Try again later.",
        SMForm_Error_Password_Retype: "Passwords are not the same",
        SMApply_Success2: "The site administrator will notify you via email ({0}) once your request has been approved",
        SMApply_Success1: "Success! Your member login request has been sent and is awaiting approval.",
        SMForm_Retype_Password: "Retype password",
        SMResetPassMail_title: "Reset Password",
        SMRegister_Login: "Login",
        SMResetPassMail_Back_Login: "Back to Login",
        dialogMixinTranslations_GUEST_LOGIN_TITLE: "Guest Area",
        dialogMixinTranslations_GUEST_LOGIN_SUBTITLE: "Please enter the password below.",
        dialogMixinTranslations_RESET_PASSWORD_CHECKEMAIL_TITLE: "Please Check Your Email",
        dialogMixinTranslations_RESET_PASSWORD_CHECKEMAIL_TEXT: "We’ve emailed you a link to reset your password.",
        dialogMixinTranslations_RESET_PASSWORD_TITLE: "Reset Password",
        dialogMixinTranslations_RESET_PASSWORD_TEXT: "Enter your new password below",
        dialogMixinTranslations_RESET_PASSWORD_NEWFIELD: "Enter a new password",
        dialogMixinTranslations_RESET_PASSWORD_NEWFIELD_RETYPE: "Re-type password",
        dialogMixinTranslations_RESET_PASSWORD_BUTTON: "Reset Password",
        dialogMixinTranslations_RESET_PASSWORD_SUCESS_TITLE: "Your password has been changed.",
        dialogMixinTranslations_Log_In: "log in",
        dialogMixinTranslations_Log_In_Title: "Log in",
        dialogMixinTranslations_Password_Reset_TooShort: "Password must be 4-15 characters",
        dialogMixinTranslations_forgot_password: "Forgot password?",
        dialogMixinTranslations_switch_to_signup: "Don't have an account?",
        dialogMixinTranslations_forgot_password_mobile: "Forgot password?",
        dialogMixinTranslations_forgot_password_mobile_new: "forgot?",
        dialogMixinTranslations_login_google: "Log in with Google+",
        dialogMixinTranslations_login_facebook: "Log in with Facebook",
        dialogMixinTranslations_signup_google: "Sign up with Google+",
        dialogMixinTranslations_signup_facebook: "Sign up with Facebook",
        dialogMixinTranslations_login_switch_email: "Log in with Email",
        dialogMixinTranslations_signup_switch_email: "Sign up with Email",
        SMForm_Error_18880: "Email address must be provided"
    },
    es: {
        SMResetPass_Reset_Succ: "¡Has restablecido tu contraseña exitosamente!",
        SMForm_Password: "Clave",
        SMLogin_Remember_Me: "Recuérdame",
        PasswordLogin_Password: "Clave",
        SMForm_Error_Password_Blank: "El campo de la clave no puede estar en blanco",
        SMRegister_Login: "Inicia Sesión",
        SMForm_Error_19999: "Usuario desconocido",
        SMForm_Error_19958: "La solicitud de miembro está a la espera de la aprobación por parte del dueño del sitio.",
        SMResetPass_Retype_Password: "Escríbela de nuevo:",
        SMForm_Error_Password_Length: "La longitud de la clave debe ser entre {0} y {1}",
        SMContainer_OK: "OK",
        SMResetPassMail_Back_Login: "Volver a Iniciar Sesión",
        dialogMixinTranslations_forgot_password_mobile: "¿Has olvidado la contraseña?",
        dialogMixinTranslations_RESET_PASSWORD_SUCESS_TITLE: "Tu contraseña ha cambiado.",
        dialogMixinTranslations_login_google: "Iniciar sesión con Google+",
        SMForm_Error_19995: "Este email ya está siendo usado",
        SMResetPassMail_confirmation_title: "Por favor revisa tu correo",
        dialogMixinTranslations_RESET_PASSWORD_NEWFIELD_RETYPE: "Vuelve a escribir tu contraseña",
        dialogMixinTranslations_RESET_PASSWORD_NEWFIELD: "Escribe una nueva clave",
        dialogMixinTranslations_RESET_PASSWORD_TEXT: "Escribe tu nueva contraseña a continuación.",
        SMLogin_OR: "O",
        dialogMixinTranslations_RESET_PASSWORD_CHECKEMAIL_TITLE: "Por favor revisa tu correo",
        SMRegister_sign_up: "Regístrate",
        dialogMixinTranslations_signup_facebook: "Registrar con Facebook",
        SMForm_Error_Email_Blank: "El campo del email no puede estar en blanco",
        PasswordLogin_Header: "Escribe la clave para ver esta página",
        dialogMixinTranslations_GUEST_LOGIN_SUBTITLE: "Por favor ingresa la contraseña a continuación.",
        SMForm_Error_Non_Ascii_Chars: "La clave debe contener sólo caracteres ASCII",
        SMForm_Email: "Email",
        dialogMixinTranslations_Log_In: "Inicia sesión",
        PasswordLogin_Wrong_Password: "Por favor introduce la clave correcta",
        dialogMixinTranslations_login_facebook: "Iniciar sesión con Facebook",
        SMLogin_Forgot_Password: "¿Has olvidado tu clave?",
        dialogMixinTranslations_signup_switch_email: "Registrar con un email",
        dialogMixinTranslations_forgot_password_mobile_new: "¿olvidaste?",
        PasswordLogin_Error_General: "Error del servidor - No es posible iniciar sesión",
        dialogMixinTranslations_Password_Reset_TooShort: "Tu contraseña debe tener entre 4 y 15 caracteres",
        SMContainer_Show_Confirm: "Esta página está protegida con un login de miembro. Tus usuarios podrán ver esta página una vez hayan iniciado sesión.",
        dialogMixinTranslations_Log_In_Title: "Inicia sesión",
        SMContainer_Show_Confirm2: "Para administrar los miembros de tu página web, dirígete a tus Contactos desde el panel de Control y haz clic en Miembros del sitio.",
        dialogMixinTranslations_switch_to_signup: "¿No tienes todavía una cuenta?",
        SMContain_Cancel: "Cancelar",
        SMLogin_Login: "Inicia sesión",
        SMApply_Success1: "¡Enhorabuena! Tu solicitud de login de miembros fue enviada y su aprobación está pendiente.",
        SMForm_Error_19976: "Email o clave incorrecto/a",
        dialogMixinTranslations_signup_google: "Registrar con Google+",
        SMApply_Success2: "El administrador de la página web te notificará a través de un email ({0}) una vez que tu solicitud sea aprobada. ",
        SMForm_Error_18880: "Email address must be provided",
        dialogMixinTranslations_login_switch_email: "Iniciar sesión con tu email",
        SMForm_Error_Email_Invalid: "Email inválido",
        SMProfile_Update_Details: "Update your details",
        SMResetPass_Continue: "Continuar",
        dialogMixinTranslations_forgot_password: "¿Has olvidado la contraseña?",
        dialogMixinTranslations_RESET_PASSWORD_CHECKEMAIL_TEXT: "Te hemos enviado un email con un enlace para restablecer tu contraseña.",
        SMForm_Error_Password_Retype: "Las claves no son las mismas",
        SMForm_Error_19972: "Token inválido",
        dialogMixinTranslations_RESET_PASSWORD_TITLE: "Restablecer Clave",
        SMResetPass_Reset_Fail: "La clave no se pudo cambiar. Inténtalo de nuevo más tarde.",
        SMRegister_Already_Have_User: "Ya tengo un usuario",
        SMResetPassMail_confirmation_msg: "Te hemos enviado un email con un enlace que te permitirá restablecer tu contraseña.",
        SMRegister_GO: "ENTRAR",
        SMResetPass_New_Password: "Escribe una nueva clave",
        SMResetPassMail_title: "Restablecer Clave",
        SMContainer_Need_Log_In: "Para ver esta página, tienes que iniciar sesión.",
        SMResetPass_Message: "Para configurar tu nueva clave, por favor rellena ambos campos a continuación. ",
        SMForm_Error_19988: "Error de Validación",
        SMForm_Error_General_Err: "Error del servidor. inténtalo de nuevo más tarde.",
        SMForm_Retype_Password: "Escribe de nuevo la clave",
        dialogMixinTranslations_RESET_PASSWORD_BUTTON: "Restablecer Clave",
        PasswordLogin_AdministratorLogin: "Administrator Login",
        SMProfile_Update: "Update",
        SMResetPassMail_Enter_Email: "Por favor escribe tu dirección de correo",
        SMForm_Error_19980: "Bloqueado por el dueño del sitio",
        dialogMixinTranslations_GUEST_LOGIN_TITLE: "Solo para invitados",
        PasswordLogin_Cancel: "Cancel",
        PasswordLogin_Submit: "OK",
        SMForm_Error_19984: "Sesión Inválida"
    },
    fr: {
        SMResetPass_Reset_Succ: "Vous avez réinitialisé votre mot de passe avec succès",
        SMForm_Password: "Mot de passe",
        SMLogin_Remember_Me: "Se Souvenir de Moi",
        PasswordLogin_Password: "Mot de passe",
        SMForm_Error_Password_Blank: "Veuillez saisir le mot de passe",
        SMRegister_Login: "Connexion",
        SMForm_Error_19999: "Utilisateur inconnu",
        SMForm_Error_19958: "Votre demande est en attente d'approbation du propriétaire du site",
        SMResetPass_Retype_Password: "Confirmez le mot de passe :",
        SMForm_Error_Password_Length: "La longueur du mot de passe doit être entre {0} et {1}",
        SMContainer_OK: "OK",
        SMResetPassMail_Back_Login: "Retour à Connexion",
        dialogMixinTranslations_forgot_password_mobile: "Mot de passe oublié ?",
        dialogMixinTranslations_RESET_PASSWORD_SUCESS_TITLE: "Votre mot de passe a été modifié.",
        dialogMixinTranslations_login_google: "Se connecter avec Google+",
        SMForm_Error_19995: "Cet email est déjà utilisé",
        SMResetPassMail_confirmation_title: "Veuillez consulter votre boîte e-mail",
        dialogMixinTranslations_RESET_PASSWORD_NEWFIELD_RETYPE: "Ressaisissez votre mot de passe ",
        dialogMixinTranslations_RESET_PASSWORD_NEWFIELD: "Saisissez un nouveau mot de passe",
        dialogMixinTranslations_RESET_PASSWORD_TEXT: "Saisissez votre nouveau mot de passe ci-dessous",
        SMLogin_OR: "Ou",
        dialogMixinTranslations_RESET_PASSWORD_CHECKEMAIL_TITLE: "Veuillez vérifier dans votre boîte e-mail",
        SMRegister_sign_up: "Inscription",
        dialogMixinTranslations_signup_facebook: "Se connecter avec Facebook",
        SMForm_Error_Email_Blank: "Veuillez saisir l'e-mail",
        PasswordLogin_Header: "Veuillez saisir un mot de passe afin d'accéder à cette page",
        dialogMixinTranslations_GUEST_LOGIN_SUBTITLE: "Veuillez saisir le mot de passe ci-dessous.",
        SMForm_Error_Non_Ascii_Chars: "Le mot de passe doit contenir uniquement des caractères ASCII",
        SMForm_Email: "Email",
        dialogMixinTranslations_Log_In: "Connexion",
        PasswordLogin_Wrong_Password: "Veuillez saisir le mot de passe correct",
        dialogMixinTranslations_login_facebook: "Se connecter avec Facebook",
        SMLogin_Forgot_Password: "Mot de passe oublié ?",
        dialogMixinTranslations_signup_switch_email: "Se connecter avec votre e-mail",
        dialogMixinTranslations_forgot_password_mobile_new: "oublié ?",
        PasswordLogin_Error_General: "Erreur serveur - Impossible de se connecter",
        dialogMixinTranslations_Password_Reset_TooShort: "Le mot de passe doit comprendre entre 4 et 15 caractères",
        SMContainer_Show_Confirm: "Cette page est protégée par une connexion membre. Vos utilisateurs verront cette page une fois qu'ils seront connectés.",
        dialogMixinTranslations_Log_In_Title: "Connexion",
        SMContainer_Show_Confirm2: "Pour gérer vos membres de site, allez à vos Contacts depuis le tableau de bord et cliquez sur Membres du site",
        dialogMixinTranslations_switch_to_signup: "Vous n'avez pas de compte ?",
        SMContain_Cancel: "Annulation",
        SMLogin_Login: "Connexion",
        SMApply_Success1: "Bravo ! Votre demande de connexion membre a été envoyée et est actuellement en attente d'approbation.",
        SMForm_Error_19976: "L' email ou le mot de passe est incorrect",
        dialogMixinTranslations_signup_google: "Se connecter avec Google+",
        SMApply_Success2: "L'administrateur du site vous informera par email ({0}) lorsque votre demande aura été approuvée. ",
        SMForm_Error_18880: "Email address must be provided",
        dialogMixinTranslations_login_switch_email: "Se connecter avec votre e-mail",
        SMForm_Error_Email_Invalid: "Email invalide",
        SMProfile_Update_Details: "Update your details",
        SMResetPass_Continue: "Continuer",
        dialogMixinTranslations_forgot_password: "Mot de passe oublié ?",
        dialogMixinTranslations_RESET_PASSWORD_CHECKEMAIL_TEXT: "Nous vous avons envoyé un lien pour réinitialiser votre mot de passe.",
        SMForm_Error_Password_Retype: "Les mots de passe ne sont pas identiques",
        SMForm_Error_19972: "Token invalide",
        dialogMixinTranslations_RESET_PASSWORD_TITLE: "Réinitialiser Mot de Passe",
        SMResetPass_Reset_Fail: "Votre mot de passe n'a pas pu être modifié. Veuillez réessayer ultérieurement.",
        SMRegister_Already_Have_User: "J'ai déjà un nom d'utilisateur",
        SMResetPassMail_confirmation_msg: "Un email avec un lien pour réinitialiser votre mot de passe vous a été envoyé",
        SMRegister_GO: "OK",
        SMResetPass_New_Password: "Saisissez un nouveau mot de passe",
        SMResetPassMail_title: "Réinitialiser Mot de Passe",
        SMContainer_Need_Log_In: "Pour voir cette page, vous devez être connecté",
        SMResetPass_Message: "Pour définir votre nouveau mot de passe, veuillez le saisir dans les champs ci-dessous. ",
        SMForm_Error_19988: "Erreur Validation",
        SMForm_Error_General_Err: "Erreur de serveur. Veuillez réessayer plus tard.",
        SMForm_Retype_Password: "Confirmez mot de passe",
        dialogMixinTranslations_RESET_PASSWORD_BUTTON: "Réinitialiser Mot de Passe",
        PasswordLogin_AdministratorLogin: "Administrator Login",
        SMProfile_Update: "Update",
        SMResetPassMail_Enter_Email: "Veuillez saisir votre adresse email",
        SMForm_Error_19980: "Bloqué par le propriètaire du site",
        dialogMixinTranslations_GUEST_LOGIN_TITLE: "Espace visiteur",
        PasswordLogin_Cancel: "Cancel",
        PasswordLogin_Submit: "OK",
        SMForm_Error_19984: "Session Invalide"
    },
    it: {
        SMResetPass_Reset_Succ: "Hai ripristinato con successo la tua password.",
        SMForm_Password: "Password",
        SMLogin_Remember_Me: "Ricordami",
        PasswordLogin_Password: "Password",
        SMForm_Error_Password_Blank: "Il campo Password non può essere lasciato in bianco",
        SMRegister_Login: "Login",
        SMForm_Error_19999: "Utente sconosciuto",
        SMForm_Error_19958: "La tua richiesta membro è in attesa di approvazione da parte per proprietario del sito",
        SMResetPass_Retype_Password: "Digita nuovamente:",
        SMForm_Error_Password_Length: "La lunghezza della password dev'essere compresa tra {0} e {1}",
        SMContainer_OK: "OK",
        SMResetPassMail_Back_Login: "Torna al Login",
        dialogMixinTranslations_forgot_password_mobile: "Hai dimenticato la password?",
        dialogMixinTranslations_RESET_PASSWORD_SUCESS_TITLE: "La tua password è cambiata.",
        dialogMixinTranslations_login_google: "Accedi con Google+",
        SMForm_Error_19995: "L'Email è già in utilizzo",
        SMResetPassMail_confirmation_title: "Ti preghiamo di controllare la tua email",
        dialogMixinTranslations_RESET_PASSWORD_NEWFIELD_RETYPE: "Inserisci di nuovo la tua password",
        dialogMixinTranslations_RESET_PASSWORD_NEWFIELD: "Inserisci una nuova password",
        dialogMixinTranslations_RESET_PASSWORD_TEXT: "Inserisci la tua password qui sotto",
        SMLogin_OR: "Oppure",
        dialogMixinTranslations_RESET_PASSWORD_CHECKEMAIL_TITLE: "Controlla la tua Mail",
        SMRegister_sign_up: "Iscriviti",
        dialogMixinTranslations_signup_facebook: "Iscriviti con Facebook",
        SMForm_Error_Email_Blank: "Il campo Email non può essere lasciato in bianco",
        PasswordLogin_Header: "Inserisci la password per visualizzare questa pagina",
        dialogMixinTranslations_GUEST_LOGIN_SUBTITLE: "Inserisci la password qui sotto.",
        SMForm_Error_Non_Ascii_Chars: "La password deve contenere solo caratteri ASCII",
        SMForm_Email: "Email",
        dialogMixinTranslations_Log_In: "Accedi",
        PasswordLogin_Wrong_Password: "Ti preghiamo di inserire la password corretta",
        dialogMixinTranslations_login_facebook: "Accedi con Facebook",
        SMLogin_Forgot_Password: "Hai dimenticato la tua password?",
        dialogMixinTranslations_signup_switch_email: "Iscriviti con la tua email",
        dialogMixinTranslations_forgot_password_mobile_new: "dimenticata?",
        PasswordLogin_Error_General: "Errore del server - Non è possibile effettuare l'accesso",
        dialogMixinTranslations_Password_Reset_TooShort: "La password deve contenere dai 4 ai 15 caratteri",
        SMContainer_Show_Confirm: "Questa pagina è protetta da un login membri. I tuoi utenti saranno in grado di vedere questa pagina una volta che avranno effettuato l'accesso.",
        dialogMixinTranslations_Log_In_Title: "Accedi",
        SMContainer_Show_Confirm2: "Per gestire i membri del tuo sito, vai su Contatti dal Pannello di Controllo e clicca Membri del Sito",
        dialogMixinTranslations_switch_to_signup: "Non possiedi un account?",
        SMContain_Cancel: "Cancella",
        SMLogin_Login: "Login",
        SMApply_Success1: "Successo! La tua richiesta di login membro è stata inviata ed è in attesa di approvazione.",
        SMForm_Error_19976: "Email o password non corretta",
        dialogMixinTranslations_signup_google: "Iscriviti con Google+",
        SMApply_Success2: "L'amministratore del sito ti notificherà via email( {0} ) una volta che la tua richiesta è stata accettata ",
        SMForm_Error_18880: "Email address must be provided",
        dialogMixinTranslations_login_switch_email: "Accedi con la tua email",
        SMForm_Error_Email_Invalid: "L'Email non è valida",
        SMProfile_Update_Details: "Update your details",
        SMResetPass_Continue: "Continua",
        dialogMixinTranslations_forgot_password: "Hai dimenticato la password?",
        dialogMixinTranslations_RESET_PASSWORD_CHECKEMAIL_TEXT: "Ti abbiamo inviato una mail con il link per reimpostare la tua password.",
        SMForm_Error_Password_Retype: "Le password non sono uguali",
        SMForm_Error_19972: "Token non valido",
        dialogMixinTranslations_RESET_PASSWORD_TITLE: "Ripristina Password",
        SMResetPass_Reset_Fail: "Non è stato possibile modificare la password. Prova nuovamente più tardi.",
        SMRegister_Already_Have_User: "Sono un utente esistente",
        SMResetPassMail_confirmation_msg: "Ti abbiamo inviato un'email con un link che ti permetterà di ripristinare la tua password",
        SMRegister_GO: "VAI",
        SMResetPass_New_Password: "Inserisci una nuova password",
        SMResetPassMail_title: "Ripristina Password",
        SMContainer_Need_Log_In: "Per visualizzare questa pagina, devi aver fatto il login.",
        SMResetPass_Message: "Per impostare la tua nuova password, inseriscila per cortesia in entrambi i campi qui sotto. ",
        SMForm_Error_19988: "Errore di Convalida",
        SMForm_Error_General_Err: "Errore del server. Prova nuovamente più tardi.",
        SMForm_Retype_Password: "Digita nuovamente la password",
        dialogMixinTranslations_RESET_PASSWORD_BUTTON: "Ripristina Password",
        PasswordLogin_AdministratorLogin: "Administrator Login",
        SMProfile_Update: "Update",
        SMResetPassMail_Enter_Email: "Ti preghiamo di inserire il tuo indirizzo email",
        SMForm_Error_19980: "Bloccato dal proprietario del sito",
        dialogMixinTranslations_GUEST_LOGIN_TITLE: "Area Ospiti",
        PasswordLogin_Cancel: "Cancel",
        PasswordLogin_Submit: "OK",
        SMForm_Error_19984: "Sessione non valida"
    },
    ja: {
        SMResetPass_Reset_Succ: "パスワードがリセットされました！",
        SMForm_Password: "パスワード",
        SMLogin_Remember_Me: "ログインを保存する",
        PasswordLogin_Password: "パスワード",
        SMForm_Error_Password_Blank: "パスワードは必須項目です",
        SMRegister_Login: "ログイン",
        SMForm_Error_19999: "不明なユーザー",
        SMForm_Error_19958: "会員登録はサイト管理者の承認待ちです",
        SMResetPass_Retype_Password: "もう一度入力してください",
        SMForm_Error_Password_Length: "{0}〜{1}文字以内のパスワードを入力してください",
        SMContainer_OK: "OK",
        SMResetPassMail_Back_Login: "ログインに戻る",
        dialogMixinTranslations_forgot_password_mobile: "パスワードがわからない？",
        dialogMixinTranslations_RESET_PASSWORD_SUCESS_TITLE: "パスワードが更新されました",
        dialogMixinTranslations_login_google: "Google+ でログイン",
        SMForm_Error_19995: "このメールアドレスはすでに登録されています",
        SMResetPassMail_confirmation_title: "新着メールをご確認ください",
        dialogMixinTranslations_RESET_PASSWORD_NEWFIELD_RETYPE: "パスワードを再入力",
        dialogMixinTranslations_RESET_PASSWORD_NEWFIELD: "新しいパスワードを入力してください",
        dialogMixinTranslations_RESET_PASSWORD_TEXT: "新しいパスワードを入力",
        SMLogin_OR: "／",
        dialogMixinTranslations_RESET_PASSWORD_CHECKEMAIL_TITLE: "メールをご確認ください",
        SMRegister_sign_up: "新規登録",
        dialogMixinTranslations_signup_facebook: "Facebook で登録",
        SMForm_Error_Email_Blank: "メールアドレスは必須項目です",
        PasswordLogin_Header: "このページを開くためには、パスワードを入力する必要があります。",
        dialogMixinTranslations_GUEST_LOGIN_SUBTITLE: "パスワードを入力してください。",
        SMForm_Error_Non_Ascii_Chars: "パスワードにはASCII（アスキー）文字のみ使用してください",
        SMForm_Email: "メールアドレス",
        dialogMixinTranslations_Log_In: "ログイン",
        PasswordLogin_Wrong_Password: "正しいパスワードを入力してください",
        dialogMixinTranslations_login_facebook: "Facebook でログイン",
        SMLogin_Forgot_Password: "パスワードがわからない？",
        dialogMixinTranslations_signup_switch_email: "メールで登録",
        dialogMixinTranslations_forgot_password_mobile_new: "お忘れですか？",
        PasswordLogin_Error_General: "サーバーエラー：ログインできませんでした",
        dialogMixinTranslations_Password_Reset_TooShort: "4-15文字のパスワードを入力してください",
        SMContainer_Show_Confirm: "このページは会員専用ページです。アクセスには会員ログインが必要です。",
        dialogMixinTranslations_Log_In_Title: "ログイン",
        SMContainer_Show_Confirm2: "サイト会員を管理するには、マイサイトから「コンタクト」をクリックし「サイト会員」を選択してください。",
        dialogMixinTranslations_switch_to_signup: "アカウントを持っていない？",
        SMContain_Cancel: "キャンセル",
        SMLogin_Login: "ログイン",
        SMApply_Success1: "会員登録の申請を送信しました。",
        SMForm_Error_19976: "メールアドレスまたはパスワードが有効ではありません",
        dialogMixinTranslations_signup_google: "Google+ で登録",
        SMApply_Success2: "会員登録の承認後、サイト管理者から「{0}」に通知メールが送信されます。 ",
        SMForm_Error_18880: "Email address must be provided",
        dialogMixinTranslations_login_switch_email: "メールでログイン",
        SMForm_Error_Email_Invalid: "メールアドレスが有効ではありません",
        SMProfile_Update_Details: "詳細を更新してください",
        SMResetPass_Continue: "続行",
        dialogMixinTranslations_forgot_password: "パスワードがわからない？",
        dialogMixinTranslations_RESET_PASSWORD_CHECKEMAIL_TEXT: "パスワード再設定用のリンクをお送りしました。",
        SMForm_Error_Password_Retype: "パスワードが一致しません",
        SMForm_Error_19972: "トークンが有効ではありません",
        dialogMixinTranslations_RESET_PASSWORD_TITLE: "パスワードをリセット",
        SMResetPass_Reset_Fail: "パスワードを変更できませんでした。もう一度お試しください。",
        SMRegister_Already_Have_User: "登録済みの方は",
        SMResetPassMail_confirmation_msg: "メールのリンクをクリックしてパスワードをリセットしてください。",
        SMRegister_GO: "登録",
        SMResetPass_New_Password: "新しいパスワードを入力してください",
        SMResetPassMail_title: "パスワードをリセット",
        SMContainer_Need_Log_In: "ページにアクセスするには、ログインする必要があります",
        SMResetPass_Message: "こちらに新しいパスワードを入力してください。 ",
        SMForm_Error_19988: "認証エラー",
        SMForm_Error_General_Err: "サーバーエラーが発生しました。もう一度お試しください",
        SMForm_Retype_Password: "パスワードをもう一度入力してください",
        dialogMixinTranslations_RESET_PASSWORD_BUTTON: "パスワードをリセット",
        PasswordLogin_AdministratorLogin: "管理者ログイン",
        SMProfile_Update: "更新",
        SMResetPassMail_Enter_Email: "メールアドレスを入力してください",
        SMForm_Error_19980: "サイト管理者からブロックされています",
        dialogMixinTranslations_GUEST_LOGIN_TITLE: "ゲストエリア",
        PasswordLogin_Cancel: "キャンセル",
        PasswordLogin_Submit: "OK",
        SMForm_Error_19984: "無効なセッションです"
    },
    ko: {
        SMResetPass_Reset_Succ: "비밀번호가 성공적으로 변경되었습니다.",
        SMForm_Password: "비밀번호",
        SMLogin_Remember_Me: "내 계정 기억하기",
        PasswordLogin_Password: "비밀번호",
        SMForm_Error_Password_Blank: "비밀번호는 필수 입력사항입니다.",
        SMRegister_Login: "로그인",
        SMForm_Error_19999: "알 수 없는 사용자입니다.",
        SMForm_Error_19958: "사이트 소유자의 회원요청 승인을 기다리고 있습니다.",
        SMResetPass_Retype_Password: "비밀번호 확인",
        SMForm_Error_Password_Length: "비밀번호는 {0}자 이상 {1}자 이하로 작성하세요.",
        SMContainer_OK: "확인",
        SMResetPassMail_Back_Login: "로그인으로 돌아가기",
        dialogMixinTranslations_forgot_password_mobile: "비밀번호 찾기",
        dialogMixinTranslations_RESET_PASSWORD_SUCESS_TITLE: "비밀번호 재설정 완료!",
        dialogMixinTranslations_login_google: "Google+ 로그인",
        SMForm_Error_19995: "이미 존재하는 이메일입니다.",
        SMResetPassMail_confirmation_title: "이메일을 확인해 주세요.",
        dialogMixinTranslations_RESET_PASSWORD_NEWFIELD_RETYPE: "비밀번호 확인",
        dialogMixinTranslations_RESET_PASSWORD_NEWFIELD: "새로운 비밀번호",
        dialogMixinTranslations_RESET_PASSWORD_TEXT: "비밀번호를 아래에 입력하세요.",
        SMLogin_OR: "또는",
        dialogMixinTranslations_RESET_PASSWORD_CHECKEMAIL_TITLE: "이메일을 확인하세요!",
        SMRegister_sign_up: "가입하기",
        dialogMixinTranslations_signup_facebook: "Facebook으로 가입",
        SMForm_Error_Email_Blank: "이메일은 필수 입력사항입니다.",
        PasswordLogin_Header: "비밀번호를 입력하세요.",
        dialogMixinTranslations_GUEST_LOGIN_SUBTITLE: "비밀번호를 입력하세요.",
        SMForm_Error_Non_Ascii_Chars: "비밀번호는 반드시 ASCII 문자를 포함해야합니다.",
        SMForm_Email: "이메일",
        dialogMixinTranslations_Log_In: "로그인하세요.",
        PasswordLogin_Wrong_Password: "올바른 비밀번호를 입력하세요.",
        dialogMixinTranslations_login_facebook: "Facebook 로그인",
        SMLogin_Forgot_Password: "비밀번호 찾기",
        dialogMixinTranslations_signup_switch_email: "이메일로 가입",
        dialogMixinTranslations_forgot_password_mobile_new: "비밀번호 찾기",
        PasswordLogin_Error_General: "로그인 실패 - 서버 오류",
        dialogMixinTranslations_Password_Reset_TooShort: "비밀번호는 4-15자로 작성하세요.",
        SMContainer_Show_Confirm: "회원 로그인 기능으로 보호되어 있는 페이지입니다. 방문자들은 로그인 후에 이 페이지에 접속할 수 있습니다.",
        dialogMixinTranslations_Log_In_Title: "로그인",
        SMContainer_Show_Confirm2: '사이트 회원을 관리하려면 대시보드에서 "연락처 관리"페이지로 이동해 "사이트 회원" 탭을 클릭하세요.',
        dialogMixinTranslations_switch_to_signup: " ",
        SMContain_Cancel: "취소",
        SMLogin_Login: "로그인",
        SMApply_Success1: "성공적으로 회원가입 요청이 이루어졌습니다! 현재 회원가입 승인을 기다리고  있습니다.",
        SMForm_Error_19976: "잘못된 이메일 또는 비밀번호입니다.",
        dialogMixinTranslations_signup_google: "Google+로 가입",
        SMApply_Success2: "회원가입이 승인되면 이메일로 알려드립니다.",
        SMForm_Error_18880: "이메일 주소를 입력하세요!",
        dialogMixinTranslations_login_switch_email: "이메일로 로그인",
        SMForm_Error_Email_Invalid: "유효하지 않은 이메일 주소입니다.",
        SMProfile_Update_Details: "내 세부정보를 업데이트하세요.",
        SMResetPass_Continue: "계속",
        dialogMixinTranslations_forgot_password: "비밀번호 찾기",
        dialogMixinTranslations_RESET_PASSWORD_CHECKEMAIL_TEXT: "비밀번호 재설정 링크를 이메일로 발송했습니다.",
        SMForm_Error_Password_Retype: "비밀번호를 다시 입력해 주세요.",
        SMForm_Error_19972: "유효하지 않은 토큰입니다.",
        dialogMixinTranslations_RESET_PASSWORD_TITLE: "비밀번호 재설정",
        SMResetPass_Reset_Fail: "비밀번호를 변경할 수 없습니다. 잠시후에 다시 시도하세요.",
        SMRegister_Already_Have_User: "회원인 경우",
        SMResetPassMail_confirmation_msg: "비밀번호 재설정 링크가 이메일로 발송되었습니다.",
        SMRegister_GO: "확인",
        SMResetPass_New_Password: "새로운 비밀번호",
        SMResetPassMail_title: "비밀번호 재설정",
        SMContainer_Need_Log_In: "이 페이지를 보려면 로그인하세요.",
        SMResetPass_Message: "새 비밀번호를 설정하려면 다음을 입력해 주세요. ",
        SMForm_Error_19988: "유효성 검사 오류",
        SMForm_Error_General_Err: "서버 오류입니다. 잠시 후 다시 시도하세요.",
        SMForm_Retype_Password: "비밀번호 확인",
        dialogMixinTranslations_RESET_PASSWORD_BUTTON: "비밀번호 재설정",
        PasswordLogin_AdministratorLogin: "관리자 로그인",
        SMProfile_Update: "업데이트",
        SMResetPassMail_Enter_Email: "이메일 주소를 입력하세요.",
        SMForm_Error_19980: "사이트 소유자에 의해 차단되었습니다.",
        dialogMixinTranslations_GUEST_LOGIN_TITLE: "비공개 페이지",
        PasswordLogin_Cancel: "취소",
        PasswordLogin_Submit: "확인",
        SMForm_Error_19984: "유효하지 않은 세션입니다."
    },
    pl: {
        SMResetPass_Reset_Succ: "Zresetowanie hasła powiodło się.",
        SMForm_Password: "Hasło",
        SMLogin_Remember_Me: "Zapamietaj mnie",
        PasswordLogin_Password: "Hasło",
        SMForm_Error_Password_Blank: 'Pole "Hasło" nie możne być puste.',
        SMRegister_Login: "Zaloguj się",
        SMForm_Error_19999: "Nierozpoznany użytkownik",
        SMForm_Error_19958: "Twoja prośba o login do witryny czeka na zatwierdzenie przez właściciela witryny.",
        SMResetPass_Retype_Password: "Wpisz ponownie:",
        SMForm_Error_Password_Length: "Długość hasła musi wynosić pomiędzy {0} a {1}",
        SMContainer_OK: "OK",
        SMResetPassMail_Back_Login: "Powrót do Loginu",
        dialogMixinTranslations_forgot_password_mobile: "Zapomniałeś hasła?",
        dialogMixinTranslations_RESET_PASSWORD_SUCESS_TITLE: "Hasło zostało zmienione.",
        dialogMixinTranslations_login_google: "Zaloguj się z Google+",
        SMForm_Error_19995: "Email już istnieje",
        SMResetPassMail_confirmation_title: "Sprawdź swój email",
        dialogMixinTranslations_RESET_PASSWORD_NEWFIELD_RETYPE: "Powtórz hasło",
        dialogMixinTranslations_RESET_PASSWORD_NEWFIELD: "Wpisz nowe hasło",
        dialogMixinTranslations_RESET_PASSWORD_TEXT: "Wpisz nowe hasło poniżej",
        SMLogin_OR: "Lub",
        dialogMixinTranslations_RESET_PASSWORD_CHECKEMAIL_TITLE: "Sprawdź Swój Email",
        SMRegister_sign_up: "Rejestracja",
        dialogMixinTranslations_signup_facebook: "Zarejestruj się z Facebook",
        SMForm_Error_Email_Blank: 'Pole "Email" nie możne być puste.',
        PasswordLogin_Header: "Wpisz hasło, aby zobaczyć tę stronę.",
        dialogMixinTranslations_GUEST_LOGIN_SUBTITLE: "Wpisz hasło poniżej.",
        SMForm_Error_Non_Ascii_Chars: "Hasło możne zawierać tylko znaki ASCII",
        SMForm_Email: "Email",
        dialogMixinTranslations_Log_In: "Zaloguj się",
        PasswordLogin_Wrong_Password: "Wpisz poprawne hasło",
        dialogMixinTranslations_login_facebook: "Zaloguj się z Facebook",
        SMLogin_Forgot_Password: "Zapomniałeś hasła?",
        dialogMixinTranslations_signup_switch_email: "Zarejestruj się przez Email",
        dialogMixinTranslations_forgot_password_mobile_new: "Zapomniałeś?",
        PasswordLogin_Error_General: "Błąd serwera - nie można się zalogować",
        dialogMixinTranslations_Password_Reset_TooShort: "Hasło musi mieć 4-15 znaków",
        SMContainer_Show_Confirm: "Ta strona jest zabezpieczona loginem witryny. Twoi użytkownicy zobaczą treść tej strony po zalogowaniu.",
        dialogMixinTranslations_Log_In_Title: "Zaloguj się",
        SMContainer_Show_Confirm2: "Aby zarządzać członkami witryny, idź do Kontaktów w Panelu i kliknij Członkowie Witryny",
        dialogMixinTranslations_switch_to_signup: "Nie masz konta?",
        SMContain_Cancel: "Anuluj",
        SMLogin_Login: "Login",
        SMApply_Success1: "Gratulujemy! Twoja prośba o członkostwo została wysłana i czeka na zatwierdzenie.",
        SMForm_Error_19976: "Niepoprawny email lub hasło",
        dialogMixinTranslations_signup_google: "Zarejestruj się z Google+",
        SMApply_Success2: "Administrator powiadomi Cię w emailu,( {0} ) gdy twoja prośba zostanie zatwierdzona. ",
        SMForm_Error_18880: "Email address must be provided",
        dialogMixinTranslations_login_switch_email: "Zaloguj się przez Email",
        SMForm_Error_Email_Invalid: "Nieprawidłowy Email",
        SMProfile_Update_Details: "Zaktualizuj swoje dane",
        SMResetPass_Continue: "Kontynuuj",
        dialogMixinTranslations_forgot_password: "Zapomniałeś hasła?",
        dialogMixinTranslations_RESET_PASSWORD_CHECKEMAIL_TEXT: "Wysłaliśmy email z linkiem, który umożliwi ci zresetowanie hasła.",
        SMForm_Error_Password_Retype: "Hasła nie są takie same",
        SMForm_Error_19972: "Błędny token",
        dialogMixinTranslations_RESET_PASSWORD_TITLE: "Zresetuj Hasło",
        SMResetPass_Reset_Fail: "Hasło nie mogło zostać zmienione. Spróbuj ponownie później.",
        SMRegister_Already_Have_User: "Jestem już użytkownikiem",
        SMResetPassMail_confirmation_msg: "Wysłaliśmy email z linkiem, który umożliwi Ci zresetowanie hasła.",
        SMRegister_GO: "START",
        SMResetPass_New_Password: "Wpisz nowe hasło",
        SMResetPassMail_title: "Zresetuj Hasło",
        SMContainer_Need_Log_In: "Musisz być zalogowany, aby zobaczyć tę stronę.",
        SMResetPass_Message: "Aby skonfigurować nowe hasło, wpisz je w obydwu polach poniżej. ",
        SMForm_Error_19988: "Błąd walidacji",
        SMForm_Error_General_Err: "Błąd serwera. Spróbuj ponownie później.",
        SMForm_Retype_Password: "Powtórz hasło",
        dialogMixinTranslations_RESET_PASSWORD_BUTTON: "Zresetuj Hasło",
        PasswordLogin_AdministratorLogin: "Login Administratora",
        SMProfile_Update: "Aktualizuj",
        SMResetPassMail_Enter_Email: "Wpisz swój adres email",
        SMForm_Error_19980: "Zablokowane przez właściciela witryny",
        dialogMixinTranslations_GUEST_LOGIN_TITLE: "Strefa Gości",
        PasswordLogin_Cancel: "Anuluj",
        PasswordLogin_Submit: "OK",
        SMForm_Error_19984: "Błędna Sesja"
    },
    ru: {
        SMResetPass_Reset_Succ: "Вы успешно сменили пароль.",
        SMForm_Password: "Пароль",
        SMLogin_Remember_Me: "Запомнить меня",
        PasswordLogin_Password: "Пароль",
        SMForm_Error_Password_Blank: "Недопустимый пароль",
        SMRegister_Login: "Войти",
        SMForm_Error_19999: "Неизвестный пользователь",
        SMForm_Error_19958: "Ваша регистрация ждет подтверждения владельца сайта",
        SMResetPass_Retype_Password: "Повторите пароль:",
        SMForm_Error_Password_Length: "Длина пароля должна быть от {0} до {1} знаков",
        SMContainer_OK: "OK",
        SMResetPassMail_Back_Login: "Назад",
        dialogMixinTranslations_forgot_password_mobile: "Не помню пароль",
        dialogMixinTranslations_RESET_PASSWORD_SUCESS_TITLE: "Пароль успешно изменен.",
        dialogMixinTranslations_login_google: "Войти через Google+",
        SMForm_Error_19995: "Email уже зарегистрирован",
        SMResetPassMail_confirmation_title: "Пожалуйста, проверьте ваш email",
        dialogMixinTranslations_RESET_PASSWORD_NEWFIELD_RETYPE: "Повторите пароль",
        dialogMixinTranslations_RESET_PASSWORD_NEWFIELD: "Новый пароль",
        dialogMixinTranslations_RESET_PASSWORD_TEXT: "Укажите новый пароль:",
        SMLogin_OR: "или",
        dialogMixinTranslations_RESET_PASSWORD_CHECKEMAIL_TITLE: "Пожалуйста, проверьте ваш email",
        SMRegister_sign_up: "Регистрация",
        dialogMixinTranslations_signup_facebook: "Войти через Facebook",
        SMForm_Error_Email_Blank: "Недопустимый еmail",
        PasswordLogin_Header: "Для доступа к странице введите пароль",
        dialogMixinTranslations_GUEST_LOGIN_SUBTITLE: "Пожалуйста, укажите пароль:",
        SMForm_Error_Non_Ascii_Chars: "Пароль может содержать только символы ASCII",
        SMForm_Email: "Email",
        dialogMixinTranslations_Log_In: "Войти",
        PasswordLogin_Wrong_Password: "Пожалуйста, введите правильный пароль",
        dialogMixinTranslations_login_facebook: "Войти через Facebook",
        SMLogin_Forgot_Password: "Забыли пароль?",
        dialogMixinTranslations_signup_switch_email: "Войти через почту",
        dialogMixinTranslations_forgot_password_mobile_new: "Не помню",
        PasswordLogin_Error_General: "Ошибка сервера: вход не удался",
        dialogMixinTranslations_Password_Reset_TooShort: "Пароль должен состоять из 4–15 знаков",
        SMContainer_Show_Confirm: "Эта страница доступна только зарегистрированным пользователям. Посетители увидят ее, только указав email и пароль.",
        dialogMixinTranslations_Log_In_Title: "Вход",
        SMContainer_Show_Confirm2: "Чтобы управлять контактами пользователей сайта: Wix Home > Контакты > Пользователи",
        dialogMixinTranslations_switch_to_signup: "У вас нет аккаунта?",
        SMContain_Cancel: "Отменить",
        SMLogin_Login: "Войти",
        SMApply_Success1: "Отлично! Ваш запрос регистрации отправлен на подтверждение.",
        SMForm_Error_19976: "Неверный email или пароль",
        dialogMixinTranslations_signup_google: "Войти через Google+",
        SMApply_Success2: "Как только ваш запрос будет подтвержден, администратор сайта отправит вам письмо на {0} ",
        SMForm_Error_18880: "Email address must be provided",
        dialogMixinTranslations_login_switch_email: "Войти через почту",
        SMForm_Error_Email_Invalid: "Недопустимый еmail",
        SMProfile_Update_Details: "Обновите ваши данные",
        SMResetPass_Continue: "Продолжить",
        dialogMixinTranslations_forgot_password: "Не помню пароль",
        dialogMixinTranslations_RESET_PASSWORD_CHECKEMAIL_TEXT: "Отправили вам ссылку для смены пароля.",
        SMForm_Error_Password_Retype: "Пароли не совпадают",
        SMForm_Error_19972: "Неверный токен",
        dialogMixinTranslations_RESET_PASSWORD_TITLE: "Смена пароля",
        SMResetPass_Reset_Fail: "Не получилось сменить пароль. Попробуйте позже.",
        SMRegister_Already_Have_User: "У меня уже есть аккаунт.",
        SMResetPassMail_confirmation_msg: "Мы отправили вам ссылку для смены пароля.",
        SMRegister_GO: "ОК",
        SMResetPass_New_Password: "Новый пароль",
        SMResetPassMail_title: "Смена пароля",
        SMContainer_Need_Log_In: "Для доступа к странице введите пароль.",
        SMResetPass_Message: "Введите ваш новый пароль ниже. ",
        SMForm_Error_19988: "Ошибка валидации",
        SMForm_Error_General_Err: "Ошибка сервера. Пожалуйста, попробуйте позже.",
        SMForm_Retype_Password: "Повторите пароль",
        dialogMixinTranslations_RESET_PASSWORD_BUTTON: "Сменить пароль",
        PasswordLogin_AdministratorLogin: "Логин администратора",
        SMProfile_Update: "Обновить",
        SMResetPassMail_Enter_Email: "Пожалуйста, введите ваш email",
        SMForm_Error_19980: "Заблокирован владельцем сайта",
        dialogMixinTranslations_GUEST_LOGIN_TITLE: "Зона для гостей",
        PasswordLogin_Cancel: "Отменить",
        PasswordLogin_Submit: "OK",
        SMForm_Error_19984: "Неверная сессия"
    },
    nl: {
        SMResetPass_Reset_Succ: "U hebt uw wachtwoord opnieuw ingesteld.",
        SMForm_Password: "Wachtwoord",
        SMLogin_Remember_Me: "Onthouden",
        PasswordLogin_Password: "Wachtwoord",
        SMForm_Error_Password_Blank: "Wachtwoord mag niet leeg worden gelaten",
        SMRegister_Login: "Inloggen",
        SMForm_Error_19999: "Onbekende gebruiker",
        SMForm_Error_19958: "Uw verzoek om ledentoegang wacht op goedkeuring door de eigenaar van de website",
        SMResetPass_Retype_Password: "Typ het opnieuw:",
        SMForm_Error_Password_Length: "Het wachtwoord moet tussen de {0} en {1} tekens lang zijn",
        SMContainer_OK: "OK",
        SMResetPassMail_Back_Login: "Terug naar inloggen",
        dialogMixinTranslations_forgot_password_mobile: "Wachtwoord vergeten?",
        dialogMixinTranslations_RESET_PASSWORD_SUCESS_TITLE: "Uw wachtwoord is gewijzigd.",
        dialogMixinTranslations_login_google: "Inloggen met Google+",
        SMForm_Error_19995: "E-mailadres is al in gebruik",
        SMResetPassMail_confirmation_title: "Controleer uw e-mailberichten",
        dialogMixinTranslations_RESET_PASSWORD_NEWFIELD_RETYPE: "Vul het wachtwoord opnieuw in",
        dialogMixinTranslations_RESET_PASSWORD_NEWFIELD: "Vul een nieuw wachtwoord in",
        dialogMixinTranslations_RESET_PASSWORD_TEXT: "Vul hieronder het nieuwe wachtwoord in",
        SMLogin_OR: "Of",
        dialogMixinTranslations_RESET_PASSWORD_CHECKEMAIL_TITLE: "Controleer uw e-mailberichten",
        SMRegister_sign_up: "Aanmelden",
        dialogMixinTranslations_signup_facebook: "Aanmelden met Facebook",
        SMForm_Error_Email_Blank: "E-mailadres mag niet leeg worden gelaten",
        PasswordLogin_Header: "Vul uw wachtwoord in om deze pagina weer te geven",
        dialogMixinTranslations_GUEST_LOGIN_SUBTITLE: "Vul hieronder uw wachtwoord in.",
        SMForm_Error_Non_Ascii_Chars: "Het wachtwoord mag alleen uit ASCII-tekens bestaan",
        SMForm_Email: "E-mailadres",
        dialogMixinTranslations_Log_In: "Inloggen",
        PasswordLogin_Wrong_Password: "Vul het juiste wachtwoord in",
        dialogMixinTranslations_login_facebook: "Inloggen met Facebook",
        SMLogin_Forgot_Password: "Wachtwoord vergeten?",
        dialogMixinTranslations_signup_switch_email: "Aanmelden met e-mail",
        dialogMixinTranslations_forgot_password_mobile_new: "vergeten?",
        PasswordLogin_Error_General: "Serverfout - inloggen mislukt",
        dialogMixinTranslations_Password_Reset_TooShort: "Het wachtwoord moet tussen 4 en 15 tekens lang zijn",
        SMContainer_Show_Confirm: "Voor deze pagina is inloggen vereist. Uw gebruikers kunnen deze pagina zien als ze zijn ingelogd.",
        dialogMixinTranslations_Log_In_Title: "Inloggen",
        SMContainer_Show_Confirm2: "Om uw siteleden te beheren gaat u op uw dashboard naar uw contacten en klikt u op Siteleden",
        dialogMixinTranslations_switch_to_signup: "Hebt u geen account?",
        SMContain_Cancel: "Annuleren",
        SMLogin_Login: "Inloggen",
        SMApply_Success1: "Uw verzoek om toegang is verzonden en wacht op goedkeuring.",
        SMForm_Error_19976: "Verkeerd e-mailadres of wachtwoord",
        dialogMixinTranslations_signup_google: "Aanmelden met Google+",
        SMApply_Success2: "De administrator van de website zal u een e-mailbericht ( {0} ) sturen zodra uw verzoek is goedgekeurd ",
        SMForm_Error_18880: "Email address must be provided",
        dialogMixinTranslations_login_switch_email: "Inloggen met e-mail",
        SMForm_Error_Email_Invalid: "Ongeldig e-mailadres",
        SMProfile_Update_Details: "Werk uw gegevens bij",
        SMResetPass_Continue: "Doorgaan",
        dialogMixinTranslations_forgot_password: "Wachtwoord vergeten?",
        dialogMixinTranslations_RESET_PASSWORD_CHECKEMAIL_TEXT: "We hebben u een e-mailbericht gestuurd met een link waarmee u uw wachtwoord opnieuw kunt instellen.",
        SMForm_Error_Password_Retype: "De wachtwoorden komen niet overeen",
        SMForm_Error_19972: "Ongeldige token",
        dialogMixinTranslations_RESET_PASSWORD_TITLE: "Stel het wachtwoord opnieuw in",
        SMResetPass_Reset_Fail: "Het wachtwoord kon niet worden gewijzigd. Probeer het later opnieuw.",
        SMRegister_Already_Have_User: "Ik ben al een gebruiker",
        SMResetPassMail_confirmation_msg: "We hebben u een e-mailbericht gestuurd met een link waarmee u uw wachtwoord opnieuw kunt instellen",
        SMRegister_GO: "VERDER",
        SMResetPass_New_Password: "Vul een nieuw wachtwoord in",
        SMResetPassMail_title: "Stel het wachtwoord opnieuw in",
        SMContainer_Need_Log_In: "U moet ingelogd zijn om deze pagina te kunnen zien.",
        SMResetPass_Message: "Om een nieuw wachtwoord in te stellen moet u het in beide velden hieronder invullen. ",
        SMForm_Error_19988: "Validatiefout",
        SMForm_Error_General_Err: "Serverfout. Probeer het later opnieuw.",
        SMForm_Retype_Password: "Typ het wachtwoord opnieuw",
        dialogMixinTranslations_RESET_PASSWORD_BUTTON: "Stel het wachtwoord opnieuw in",
        PasswordLogin_AdministratorLogin: "Inloggen als administrator",
        SMProfile_Update: "Bijwerken",
        SMResetPassMail_Enter_Email: "Vul uw e-mailadres in",
        SMForm_Error_19980: "Geblokkeerd door de eigenaar van de website",
        dialogMixinTranslations_GUEST_LOGIN_TITLE: "Ledentoegang",
        PasswordLogin_Cancel: "Annuleren",
        PasswordLogin_Submit: "OK",
        SMForm_Error_19984: "Ongeldige sessie"
    },
    tr: {
        SMResetPass_Reset_Succ: "Şifrenizi yeniden ayarlama başarılı.",
        SMForm_Password: "Şifre",
        SMLogin_Remember_Me: "Beni hatırla",
        PasswordLogin_Password: "Şifre",
        SMForm_Error_Password_Blank: "Şifre bos olamaz",
        SMRegister_Login: "Giriş",
        SMForm_Error_19999: "Bilinmeyen kullanıcı",
        SMForm_Error_19958: "Üyelik talebiniz site sahibinden onay bekliyor",
        SMResetPass_Retype_Password: "Yeniden girin:",
        SMForm_Error_Password_Length: "Şifre uzunlugu {0} ile {1} arasında olmalıdır",
        SMContainer_OK: "TAMAM",
        SMResetPassMail_Back_Login: "Giriş'e Dön",
        dialogMixinTranslations_forgot_password_mobile: "Sifrenizi unuttunuz mu?",
        dialogMixinTranslations_RESET_PASSWORD_SUCESS_TITLE: "Şifreniz değiştirildi.",
        dialogMixinTranslations_login_google: "Google+ ile giriş yapın",
        SMForm_Error_19995: "Bu e-posta kullanımda bile",
        SMResetPassMail_confirmation_title: "Lütfen e-postanızı kontrol edin",
        dialogMixinTranslations_RESET_PASSWORD_NEWFIELD_RETYPE: "Şifrenizi tekrar girin",
        dialogMixinTranslations_RESET_PASSWORD_NEWFIELD: "Yeni bir şifre girin",
        dialogMixinTranslations_RESET_PASSWORD_TEXT: "Yeni şifrenizi aşağıya girin",
        SMLogin_OR: "Veya",
        dialogMixinTranslations_RESET_PASSWORD_CHECKEMAIL_TITLE: "Lütfen E-Postanızı Kontrol Edin",
        SMRegister_sign_up: "Kaydol",
        dialogMixinTranslations_signup_facebook: "Facebook ile hesabınızı oluşturun",
        SMForm_Error_Email_Blank: "E-posta boş olamaz",
        PasswordLogin_Header: "Bu sayfayi görüntülemek için şifreyi girin",
        dialogMixinTranslations_GUEST_LOGIN_SUBTITLE: "Lütfen aşağıya şifrenizi girin.",
        SMForm_Error_Non_Ascii_Chars: "Sifre sadece ASCII karakterleri içermelidir",
        SMForm_Email: "E-posta",
        dialogMixinTranslations_Log_In: "Giriş",
        PasswordLogin_Wrong_Password: "Lütfen doğru şifreyi girin",
        dialogMixinTranslations_login_facebook: "Facebook ile giriş yapın",
        SMLogin_Forgot_Password: "Sifrenizi unuttunuz mu?",
        dialogMixinTranslations_signup_switch_email: "E-Postanızla hesabınızı oluşturun",
        dialogMixinTranslations_forgot_password_mobile_new: "Unuttunuz mu?",
        PasswordLogin_Error_General: "Sunucu hatası - -Oturum açılamıyor",
        dialogMixinTranslations_Password_Reset_TooShort: "Şifreniz 4-15 karakter uzunluğunda olmalıdır",
        SMContainer_Show_Confirm: "Bu sayfa üye girişiyle korunmaktadır. Kullanıcılarınız giriş yaptıktan sonra bu sayfayı görebilecekler.",
        dialogMixinTranslations_Log_In_Title: "Giriş",
        SMContainer_Show_Confirm2: "Sitenizin üyelerini yönetmek için lütfen yönetim panonuzda Kişiler'e gidin ve Site Üyeleri'ne tıklayın.",
        dialogMixinTranslations_switch_to_signup: "Bir hesabınız yok mu? ",
        SMContain_Cancel: "İptal",
        SMLogin_Login: "Giriş",
        SMApply_Success1: "Başarılı! Üye girişi talebiniz gönderildi ve onay bekliyor.",
        SMForm_Error_19976: "Yanlış e-posta veya şifre",
        dialogMixinTranslations_signup_google: "Google+ ile hesabınızı oluşturun",
        SMApply_Success2: "Talebiniz onaylandığında site yöneticisi size e-posta( {0} ) yoluyla bildirecektir ",
        SMForm_Error_18880: "Email address must be provided",
        dialogMixinTranslations_login_switch_email: "E-Postanızla giriş yapın",
        SMForm_Error_Email_Invalid: "E-posta geçersiz",
        SMProfile_Update_Details: "Bilgilerinizi güncelleyin",
        SMResetPass_Continue: "Devam",
        dialogMixinTranslations_forgot_password: "Sifrenizi unuttunuz mu?",
        dialogMixinTranslations_RESET_PASSWORD_CHECKEMAIL_TEXT: "Sifrenizi yenilemeniz için size bir e-posta gönderdik.",
        SMForm_Error_Password_Retype: "Şifreler aynı degil",
        SMForm_Error_19972: "Geçersiz jeton",
        dialogMixinTranslations_RESET_PASSWORD_TITLE: "Şifreyi Sıfırla",
        SMResetPass_Reset_Fail: "Şifre değiştirilemedi. Daha sonra tekrar deneyin.",
        SMRegister_Already_Have_User: "Zaten bir kullanıcıyım",
        SMResetPassMail_confirmation_msg: "Size şifrenizi sıfırlamanızı sağlayacak bir bağlantı içeren bir e-posta gönderdik.",
        SMRegister_GO: "GIT",
        SMResetPass_New_Password: "Yeni bir şifre girin",
        SMResetPassMail_title: "Şifreyi Sıfırla",
        SMContainer_Need_Log_In: "Bu sayfayı görüntülemek için giriş yapmanız gerekir.",
        SMResetPass_Message: "Yeni şifrenizi belirlemek için lütfen aşağıdaki iki alana da girin. ",
        SMForm_Error_19988: "Doğrulama Hatası",
        SMForm_Error_General_Err: "Sunucu hatası. Daha sonra yeniden deneyin.",
        SMForm_Retype_Password: "Şifreyi yeniden yazın",
        dialogMixinTranslations_RESET_PASSWORD_BUTTON: "Şifreyi Sıfırla",
        PasswordLogin_AdministratorLogin: "Yönetici Girişi",
        SMProfile_Update: "Güncelle",
        SMResetPassMail_Enter_Email: "Lütfen e-posta adresinizi girin",
        SMForm_Error_19980: "Site sahibi tarafindan bloke edildi",
        dialogMixinTranslations_GUEST_LOGIN_TITLE: "Misafir Alanı",
        PasswordLogin_Cancel: "İptal",
        PasswordLogin_Submit: "Tamam",
        SMForm_Error_19984: "Geçersiz Oturum"
    },
    sv: {
        SMResetPass_Reset_Succ: "Du har återställt ditt lösenord.",
        SMForm_Password: "Lösenord",
        SMLogin_Remember_Me: "Kom ihåg mig",
        PasswordLogin_Password: "Lösenord",
        SMForm_Error_Password_Blank: "Lösenord kan inte vara tomt",
        SMRegister_Login: "Logga in",
        SMForm_Error_19999: "Okänd användare",
        SMForm_Error_19958: "Din medlemsbegäran väntar på godkännande från sidans ägare",
        SMResetPass_Retype_Password: "Skriv in igen:",
        SMForm_Error_Password_Length: "Lösenordets längd måste vara mellan {0} och {1}",
        SMContainer_OK: "OK",
        SMResetPassMail_Back_Login: "Tillbaka till inloggning",
        dialogMixinTranslations_forgot_password_mobile: "Glömt ditt lösenord?",
        dialogMixinTranslations_RESET_PASSWORD_SUCESS_TITLE: "Ditt lösenord har ändrats.",
        dialogMixinTranslations_login_google: "Logga in med Google+",
        SMForm_Error_19995: "E-posten är upptagen",
        SMResetPassMail_confirmation_title: "Kontrollera din e-post",
        dialogMixinTranslations_RESET_PASSWORD_NEWFIELD_RETYPE: "Skriv in lösenord igen",
        dialogMixinTranslations_RESET_PASSWORD_NEWFIELD: "Ange ett nytt lösenord",
        dialogMixinTranslations_RESET_PASSWORD_TEXT: "Skriv in ditt nya lösenord nedan",
        SMLogin_OR: "Eller",
        dialogMixinTranslations_RESET_PASSWORD_CHECKEMAIL_TITLE: "Vänligen kontrollera din e-post",
        SMRegister_sign_up: "Anmäl dig",
        dialogMixinTranslations_signup_facebook: "Registrera dig med Facebook",
        SMForm_Error_Email_Blank: "E-post kan inte vara tom",
        PasswordLogin_Header: "Skriv in lösenord för att visa sidan",
        dialogMixinTranslations_GUEST_LOGIN_SUBTITLE: "Vänligen skriv in lösenord nedan.",
        SMForm_Error_Non_Ascii_Chars: "Lösenord får endast innehålla ASCII-tecken",
        SMForm_Email: "E-post",
        dialogMixinTranslations_Log_In: "logga in",
        PasswordLogin_Wrong_Password: "Ange rätt lösenord",
        dialogMixinTranslations_login_facebook: "Logga in med Facebook",
        SMLogin_Forgot_Password: "Glömt ditt lösenord?",
        dialogMixinTranslations_signup_switch_email: "Registrera dig med e-post",
        dialogMixinTranslations_forgot_password_mobile_new: "glömt?",
        PasswordLogin_Error_General: "Serverfel – kunde inte logga in",
        dialogMixinTranslations_Password_Reset_TooShort: "Lösenord måste vara 4-15 tecken",
        SMContainer_Show_Confirm: "Denna sida skyddas med en medlemsinloggning. Dina besökare kan se den här sidan när de har loggat in.",
        dialogMixinTranslations_Log_In_Title: "Logga in",
        SMContainer_Show_Confirm2: "För att hantera dina sidas medlemmar, gå till dina Kontakter från din Översikt och klicka på Sidmedlemmar",
        dialogMixinTranslations_switch_to_signup: "Har du inget konto?",
        SMContain_Cancel: "Avbryt",
        SMLogin_Login: "Logga in",
        SMApply_Success1: "Klart! Din begäran om medlemsinloggning har skickats och väntar på godkännande.",
        SMForm_Error_19976: "Fel e-post eller lösenord",
        dialogMixinTranslations_signup_google: "Registrera dig med Google+",
        SMApply_Success2: "Sidans administratör meddelar dig via e-post ({0}) så fort din begäran har godkänts  ",
        SMForm_Error_18880: "Email address must be provided",
        dialogMixinTranslations_login_switch_email: "Logga in med e-post",
        SMForm_Error_Email_Invalid: "Ogiltig e-post",
        SMProfile_Update_Details: "Uppdatera dina uppgifter",
        SMResetPass_Continue: "Fortsätt",
        dialogMixinTranslations_forgot_password: "Glömt ditt lösenord?",
        dialogMixinTranslations_RESET_PASSWORD_CHECKEMAIL_TEXT: "Vi har skickat ett mejl med en länk som gör att du kan återställa ditt lösenord.",
        SMForm_Error_Password_Retype: "Lösenordet matchar inte varandra",
        SMForm_Error_19972: "Ogiltig token",
        dialogMixinTranslations_RESET_PASSWORD_TITLE: "Återställ lösenord",
        SMResetPass_Reset_Fail: "Lösenordet kunde inte ändras. Försök igen senare.",
        SMRegister_Already_Have_User: "Jag är redan en användare",
        SMResetPassMail_confirmation_msg: "Vi har skickat ett mejl med en länk som gör att du kan återställa ditt lösenord",
        SMRegister_GO: "KÖR",
        SMResetPass_New_Password: "Ange ett nytt lösenord",
        SMResetPassMail_title: "Återställ lösenord",
        SMContainer_Need_Log_In: "Du måste vara inloggad för att visa den här sidan.",
        SMResetPass_Message: "Ange ett nytt lösenord genom att skriva in det i båda fälten nedan. ",
        SMForm_Error_19988: "Valideringsfel",
        SMForm_Error_General_Err: "Serverfel. försök igen senare.",
        SMForm_Retype_Password: "Skriv in lösenord igen",
        dialogMixinTranslations_RESET_PASSWORD_BUTTON: "Återställ lösenord",
        PasswordLogin_AdministratorLogin: "Adminstratörsinloggning",
        SMProfile_Update: "Uppdatera",
        SMResetPassMail_Enter_Email: "Skriv in din e-postadress",
        SMForm_Error_19980: "Blockerad av sidans ägare",
        dialogMixinTranslations_GUEST_LOGIN_TITLE: "Gästområde",
        PasswordLogin_Cancel: "Avbryt",
        PasswordLogin_Submit: "OK",
        SMForm_Error_19984: "Ogiltig session"
    },
    pt: {
        SMResetPass_Reset_Succ: "Você redefiniu sua senha com sucesso.",
        SMForm_Password: "Senha",
        SMLogin_Remember_Me: "Lembre-se de mim",
        PasswordLogin_Password: "Senha",
        SMForm_Error_Password_Blank: "O campo da senha não pode estar vazio",
        SMRegister_Login: "Login",
        SMForm_Error_19999: "Usuário desconhecido",
        SMForm_Error_19958: "Seu pedido de login está aguardando a aprovação do proprietário do site",
        SMResetPass_Retype_Password: "Digite novamente:",
        SMForm_Error_Password_Length: "Senha deve ter entre {0} e {1} caracteres",
        SMContainer_OK: "OK",
        SMResetPassMail_Back_Login: "Voltar para Login",
        dialogMixinTranslations_forgot_password_mobile: "Esqueceu sua senha?",
        dialogMixinTranslations_RESET_PASSWORD_SUCESS_TITLE: "Sua senha foi alterada.",
        dialogMixinTranslations_login_google: "Login com Google+",
        SMForm_Error_19995: "E-mail já está sendo usado",
        SMResetPassMail_confirmation_title: "Por favor, verifique seu email",
        dialogMixinTranslations_RESET_PASSWORD_NEWFIELD_RETYPE: "Digite sua senha novamente",
        dialogMixinTranslations_RESET_PASSWORD_NEWFIELD: "Insira uma nova senha",
        dialogMixinTranslations_RESET_PASSWORD_TEXT: "Insira sua nova senha abaixo",
        SMLogin_OR: "Ou",
        dialogMixinTranslations_RESET_PASSWORD_CHECKEMAIL_TITLE: "Por favor, verifique seu email.",
        SMRegister_sign_up: "Registre-se",
        dialogMixinTranslations_signup_facebook: "Registre-se com Facebook",
        SMForm_Error_Email_Blank: "Campo E-mail não pode estar vazio",
        PasswordLogin_Header: "Insira a senha para ver esta página",
        dialogMixinTranslations_GUEST_LOGIN_SUBTITLE: "Por favor, insira a senha abaixo.",
        SMForm_Error_Non_Ascii_Chars: "A senha deve conter apenas caracteres ASCII",
        SMForm_Email: "E-mail",
        dialogMixinTranslations_Log_In: "Login",
        PasswordLogin_Wrong_Password: "Por favor, insira a senha correta",
        dialogMixinTranslations_login_facebook: "Login com Facebook",
        SMLogin_Forgot_Password: "Esqueceu sua senha?",
        dialogMixinTranslations_signup_switch_email: "Registre-se com email",
        dialogMixinTranslations_forgot_password_mobile_new: "esqueceu?",
        PasswordLogin_Error_General: "Erro de servidor - Não foi possível fazer login",
        dialogMixinTranslations_Password_Reset_TooShort: "A senha deve ter entre 4 e 15 caracteres",
        SMContainer_Show_Confirm: "Esta página está protegida com login de membros. Seus usuários poderão ver esta página depois de fazerem login.",
        dialogMixinTranslations_Log_In_Title: "Login",
        SMContainer_Show_Confirm2: "Para gerenciar os membros do seu site, vá em seus Contatos a partir do Painel de Controle e clique em 'Membros do site'",
        dialogMixinTranslations_switch_to_signup: "Ainda não tem uma conta?",
        SMContain_Cancel: "Cancelar",
        SMLogin_Login: "Login",
        SMApply_Success1: "Seu pedido de login foi enviado com sucesso e aguarda aprovação.",
        SMForm_Error_19976: "E-mail ou senha incorreta",
        dialogMixinTranslations_signup_google: "Registre-se com Google+",
        SMApply_Success2: "O administrador do site irá enviar-lhe uma notificação via email( {0} ) assim que o pedido for aprovado ",
        SMForm_Error_18880: "Email address must be provided",
        dialogMixinTranslations_login_switch_email: "Login com email",
        SMForm_Error_Email_Invalid: "Email inválido",
        SMProfile_Update_Details: "Update your details",
        SMResetPass_Continue: "Continuar",
        dialogMixinTranslations_forgot_password: "Esqueceu sua senha?",
        dialogMixinTranslations_RESET_PASSWORD_CHECKEMAIL_TEXT: "Enviamos um email com o link para redefinir sua senha. ",
        SMForm_Error_Password_Retype: "Senhas não correspondem",
        SMForm_Error_19972: "Token Inválido",
        dialogMixinTranslations_RESET_PASSWORD_TITLE: "Redefinir Senha",
        SMResetPass_Reset_Fail: "Não foi possível alterar a senha. Tente novamente mais tarde.",
        SMRegister_Already_Have_User: "Já sou usuário",
        SMResetPassMail_confirmation_msg: "Enviamos um e-mail com um link que lhe permitirá redefinir sua senha",
        SMRegister_GO: "OK",
        SMResetPass_New_Password: "Insira uma nova senha",
        SMResetPassMail_title: "Redefinir Senha",
        SMContainer_Need_Log_In: "Para ver esta página, você precisa fazer login.",
        SMResetPass_Message: "Para definir sua nova senha, por favor, digite-a nos dois campos abaixo: ",
        SMForm_Error_19988: "Erro de Validação",
        SMForm_Error_General_Err: "Erro de servidor. tente novamente mais tarde.",
        SMForm_Retype_Password: "Digite sua senha novamente",
        dialogMixinTranslations_RESET_PASSWORD_BUTTON: "Redefinir Senha",
        PasswordLogin_AdministratorLogin: "Login de administrador",
        SMProfile_Update: "Update",
        SMResetPassMail_Enter_Email: "Por favor, insira seu endereço de e-mail",
        SMForm_Error_19980: "Bloqueado pelo proprietário do site",
        dialogMixinTranslations_GUEST_LOGIN_TITLE: "Área de convidados",
        PasswordLogin_Cancel: "Cancelar",
        PasswordLogin_Submit: "OK",
        SMForm_Error_19984: "Sessão Inválida"
    },
    no: {
        SMResetPass_Reset_Succ: "Du har nå tilbakestillt passordet.",
        SMForm_Password: "Passord",
        SMLogin_Remember_Me: "Husk meg",
        PasswordLogin_Password: "Passord",
        SMForm_Error_Password_Blank: "Passordet kan ikke stå tomt",
        SMRegister_Login: "Logg inn",
        SMForm_Error_19999: "Ukjent bruker",
        SMForm_Error_19958: "Din medlemsforespørsel venter godkjenning fra nettstedets eier",
        SMResetPass_Retype_Password: "Skriv på nytt:",
        SMForm_Error_Password_Length: "Passordets lengde må være mellom {0} og {1}",
        SMContainer_OK: "OK",
        SMResetPassMail_Back_Login: "Tilbake til innlogging",
        dialogMixinTranslations_forgot_password_mobile: "Glemt passordet?",
        dialogMixinTranslations_RESET_PASSWORD_SUCESS_TITLE: "Passordet ditt har blitt endret.",
        dialogMixinTranslations_login_google: "Logg inn med Google+",
        SMForm_Error_19995: "E-post er allerede tatt",
        SMResetPassMail_confirmation_title: "Vennligst sjekk e-posten din",
        dialogMixinTranslations_RESET_PASSWORD_NEWFIELD_RETYPE: "Skriv inn passord på nytt",
        dialogMixinTranslations_RESET_PASSWORD_NEWFIELD: "Skriv inn et nytt passord",
        dialogMixinTranslations_RESET_PASSWORD_TEXT: "Skriv inn ditt nye passord nedenfor",
        SMLogin_OR: "Eller",
        dialogMixinTranslations_RESET_PASSWORD_CHECKEMAIL_TITLE: "Vennligst sjekk e-posten din",
        SMRegister_sign_up: "Meld deg på",
        dialogMixinTranslations_signup_facebook: "Registrer deg med Facebook",
        SMForm_Error_Email_Blank: "E-post kan ikke stå tomt",
        PasswordLogin_Header: "Skriv inn passord for å se denne siden",
        dialogMixinTranslations_GUEST_LOGIN_SUBTITLE: "Vennligst oppgi passord nedenfor.",
        SMForm_Error_Non_Ascii_Chars: "Passordet må kun inneholde ASCII-tegn",
        SMForm_Email: "E-post",
        dialogMixinTranslations_Log_In: "Logg inn",
        PasswordLogin_Wrong_Password: "Vennligst oppgi riktig passord",
        dialogMixinTranslations_login_facebook: "Logg inn med Facebook",
        SMLogin_Forgot_Password: "Glemt passordet?",
        dialogMixinTranslations_signup_switch_email: "Registrer deg med e-post",
        dialogMixinTranslations_forgot_password_mobile_new: "glemt?",
        PasswordLogin_Error_General: "Serverfeil - kan ikke logge på",
        dialogMixinTranslations_Password_Reset_TooShort: "Passordet bestå av 4-15 tegn",
        SMContainer_Show_Confirm: "Denne siden er beskyttet med et medlems pålogging. Brukerne vil kunne se denne siden når de er innlogget.",
        dialogMixinTranslations_Log_In_Title: "Logg inn",
        SMContainer_Show_Confirm2: "For å administrere nettstedets medlemmer, gå til dine kontakter fra dashbordet og klikk nettstedmedlemmer",
        dialogMixinTranslations_switch_to_signup: "Har du ikke en konto?",
        SMContain_Cancel: "Avbryt",
        SMLogin_Login: "Logg inn",
        SMApply_Success1: "Supert! Din forespørsel om medlemsinnlogging er sendt og venter på godkjenning.",
        SMForm_Error_19976: "Feil e-post eller passord",
        dialogMixinTranslations_signup_google: "Registrer deg med Google+",
        SMApply_Success2: "Nettstedets administrator vil varsle deg via e-post( {0} ) med en gang forespørselen din har blitt godkjent ",
        SMForm_Error_18880: "Email address must be provided",
        dialogMixinTranslations_login_switch_email: "Logg inn med e-post",
        SMForm_Error_Email_Invalid: "E-post er ugyldig",
        SMProfile_Update_Details: "Oppdater informasjon",
        SMResetPass_Continue: "Fortsett",
        dialogMixinTranslations_forgot_password: "Glemt passordet?",
        dialogMixinTranslations_RESET_PASSWORD_CHECKEMAIL_TEXT: "Vi har sendt deg en link for å tilbakestille passordet ditt.",
        SMForm_Error_Password_Retype: "Passordene er ikke de samme",
        SMForm_Error_19972: "Ugyldig symbol",
        dialogMixinTranslations_RESET_PASSWORD_TITLE: "Nullstill passord",
        SMResetPass_Reset_Fail: "Passord kunne ikke endres. Prøv igjen senere.",
        SMRegister_Already_Have_User: "Jeg er allerede en bruker",
        SMResetPassMail_confirmation_msg: "Vi har sendt deg en e-post med en link som vil tillate deg å nullstille passordet ditt",
        SMRegister_GO: "OK",
        SMResetPass_New_Password: "Skriv inn et nytt passord",
        SMResetPassMail_title: "Nullstill passord",
        SMContainer_Need_Log_In: "For å se denne siden, må du være logget inn.",
        SMResetPass_Message: "Hvis du vil angi det nye passordet, vennligst skriv det i begge felt. ",
        SMForm_Error_19988: "Valideringsfeil",
        SMForm_Error_General_Err: "Serverfeil. Prøv igjen senere.",
        SMForm_Retype_Password: "Skriv inn passord på nytt",
        dialogMixinTranslations_RESET_PASSWORD_BUTTON: "Nullstill passord",
        PasswordLogin_AdministratorLogin: "Administrator Logg inn",
        SMProfile_Update: "Oppdater",
        SMResetPassMail_Enter_Email: "Fyll inn din e-postadresse",
        SMForm_Error_19980: "Blokkert av nettstedets eier",
        dialogMixinTranslations_GUEST_LOGIN_TITLE: "Gjesteområde",
        PasswordLogin_Cancel: "Avbryt",
        PasswordLogin_Submit: "OK",
        SMForm_Error_19984: "Ugyldig økt"
    },
    da: {
        SMResetPass_Reset_Succ: "Du har med succes nulstillet din adgangskode.",
        SMForm_Password: "Adgangskode",
        SMLogin_Remember_Me: "Husk mig",
        PasswordLogin_Password: "Adgangskode",
        SMForm_Error_Password_Blank: "Adgangskode må ikke være tomt",
        SMRegister_Login: "Log ind",
        SMForm_Error_19999: "Ukendt bruger",
        SMForm_Error_19958: "Din medlems anmodning afventer godkendelse fra hjemmesidens ejer.",
        SMResetPass_Retype_Password: "Indtast igen:",
        SMForm_Error_Password_Length: "Adgangskoden skal være mellem {0} og {1}",
        SMContainer_OK: "OK",
        SMResetPassMail_Back_Login: "Tilbage til log ind",
        dialogMixinTranslations_forgot_password_mobile: "Har du glemt din adgangskode?",
        dialogMixinTranslations_RESET_PASSWORD_SUCESS_TITLE: "Din adgangskode er blevet ændret.",
        dialogMixinTranslations_login_google: "Log ind med Google+",
        SMForm_Error_19995: "E-mail er allerede taget",
        SMResetPassMail_confirmation_title: "Tjek venligst dine e-mails",
        dialogMixinTranslations_RESET_PASSWORD_NEWFIELD_RETYPE: "Indtast adgangskode igen",
        dialogMixinTranslations_RESET_PASSWORD_NEWFIELD: "Indtast en ny adgangskode",
        dialogMixinTranslations_RESET_PASSWORD_TEXT: "Indtast din nye adgangskode hernede",
        SMLogin_OR: "eller",
        dialogMixinTranslations_RESET_PASSWORD_CHECKEMAIL_TITLE: "Kontroller venligst din e-mail",
        SMRegister_sign_up: "Tilmeld dig",
        dialogMixinTranslations_signup_facebook: "Tilmeld dig med Facebook",
        SMForm_Error_Email_Blank: "E-mail feltet må ikke være tomt",
        PasswordLogin_Header: "Indtast adgangskode for at se denne side",
        dialogMixinTranslations_GUEST_LOGIN_SUBTITLE: "Indtast venligst adgangskoden hernede.",
        SMForm_Error_Non_Ascii_Chars: "Adgangskode må kun indeholde ASCII-tegn",
        SMForm_Email: "E-mail",
        dialogMixinTranslations_Log_In: "log ind",
        PasswordLogin_Wrong_Password: "Venligst indtast den korrekte adgangskode",
        dialogMixinTranslations_login_facebook: "Log ind med Facebook",
        SMLogin_Forgot_Password: "Har du glemt din adgangskode?",
        dialogMixinTranslations_signup_switch_email: "Tilmeld dig med e-mail",
        dialogMixinTranslations_forgot_password_mobile_new: "glemt?",
        PasswordLogin_Error_General: "Serverfejl - kan ikke logge ind",
        dialogMixinTranslations_Password_Reset_TooShort: "Adgangskoden skal være mellem 4 - 15 tegn",
        SMContainer_Show_Confirm: "Denne side er beskyttet med et login til medlemmer.  Dine brugere vil kunne se denne side, når de er logget ind.",
        dialogMixinTranslations_Log_In_Title: "Log ind",
        SMContainer_Show_Confirm2: "Gå til dine kontakter fra din hjemmesides oversigt, og klik på Hjemmesidemedlemmer for at administrere dem.",
        dialogMixinTranslations_switch_to_signup: "Har du ingen konto?",
        SMContain_Cancel: "Annuller",
        SMLogin_Login: "Log ind",
        SMApply_Success1: "Succes! Din anmodning om medlemslogin er sendt og afventer godkendelse.",
        SMForm_Error_19976: "Forkert e-mail eller adgangskode",
        dialogMixinTranslations_signup_google: "Tilmeld dig med Google+",
        SMApply_Success2: "Hjemmesideadministratoren vil give dig besked via e-mail( {0} ) når din anmodning er blevet godkendt.",
        SMForm_Error_18880: "Email address must be provided",
        dialogMixinTranslations_login_switch_email: "Log ind med e-mail",
        SMForm_Error_Email_Invalid: "E-mail er ugyldig",
        SMProfile_Update_Details: "Opdater venligst dine detaljer",
        SMResetPass_Continue: "Næste",
        dialogMixinTranslations_forgot_password: "Har du glemt din adgangskode?",
        dialogMixinTranslations_RESET_PASSWORD_CHECKEMAIL_TEXT: "Vi har sendt en link til dig via e-mail for at nulstille adgangskoden.",
        SMForm_Error_Password_Retype: "Adgangskoderne er ikke ens",
        SMForm_Error_19972: "ugyldig kode",
        dialogMixinTranslations_RESET_PASSWORD_TITLE: "Nulstil adgangskode",
        SMResetPass_Reset_Fail: "Adgangskoden kunne ikke ændres. Prøv igen senere.",
        SMRegister_Already_Have_User: "Jeg er allerede bruger",
        SMResetPassMail_confirmation_msg: "Vi har sendt dig en e-mail med et link, som giver dig mulighed for at nulstille din adgangskode",
        SMRegister_GO: "START",
        SMResetPass_New_Password: "Indtast en ny adgangskode",
        SMResetPassMail_title: "Nulstil adgangskode",
        SMContainer_Need_Log_In: "For at se denne side skal du logge ind.",
        SMResetPass_Message: "For at angive din nye adgangskode, venligst indtast det i begge felter herunder. ",
        SMForm_Error_19988: "Valideringsfejl",
        SMForm_Error_General_Err: "Serverfejl. Prøv igen senere.",
        SMForm_Retype_Password: "Gentag adgangskode",
        dialogMixinTranslations_RESET_PASSWORD_BUTTON: "Nulstil adgangskode",
        PasswordLogin_AdministratorLogin: "Administratorlogin",
        SMProfile_Update: "Opdater",
        SMResetPassMail_Enter_Email: "Venligst indtast din e-mailadresse",
        SMForm_Error_19980: "Blokeret af hjemmesideejer",
        dialogMixinTranslations_GUEST_LOGIN_TITLE: "Gæsteområde",
        PasswordLogin_Cancel: "Annuller",
        PasswordLogin_Submit: "OK",
        SMForm_Error_19984: "Ugyldig session"
    },
    hi: {
        SMResetPass_Reset_Succ: "You’ve successfully reset your password.",
        SMForm_Password: "Password",
        SMLogin_Remember_Me: "Remember Me",
        PasswordLogin_Password: "Password",
        SMForm_Error_Password_Blank: "Password cannot be blank",
        SMRegister_Login: "Login",
        SMForm_Error_19999: "Unknown user",
        SMForm_Error_19958: "Your member request is waiting approval from the site owner",
        SMResetPass_Retype_Password: "पुनः टाइप करें:",
        SMForm_Error_Password_Length: "Password length must be between {0} and {1}",
        SMContainer_OK: "OK",
        SMResetPassMail_Back_Login: "Back to Login",
        dialogMixinTranslations_forgot_password_mobile: "पासवर्ड भूल गए?",
        dialogMixinTranslations_RESET_PASSWORD_SUCESS_TITLE: "Your password has been changed.",
        dialogMixinTranslations_login_google: "Log in with Google+",
        SMForm_Error_19995: "Email is already taken",
        SMResetPassMail_confirmation_title: "कृपया अपनी ई-मेल देखें",
        dialogMixinTranslations_RESET_PASSWORD_NEWFIELD_RETYPE: "Re-type password",
        dialogMixinTranslations_RESET_PASSWORD_NEWFIELD: "Enter a new password",
        dialogMixinTranslations_RESET_PASSWORD_TEXT: "Enter your new password below",
        SMLogin_OR: "Or",
        dialogMixinTranslations_RESET_PASSWORD_CHECKEMAIL_TITLE: "Please Check Your Email",
        SMRegister_sign_up: "Sign up",
        dialogMixinTranslations_signup_facebook: "Sign up with Facebook",
        SMForm_Error_Email_Blank: "Email cannot be blank",
        PasswordLogin_Header: "Enter password to view this page",
        dialogMixinTranslations_GUEST_LOGIN_SUBTITLE: "This area is for members only.\nPlease enter the password below.",
        SMForm_Error_Non_Ascii_Chars: "Password must contain only ASCII characters",
        SMForm_Email: "Email",
        dialogMixinTranslations_Log_In: "लॉग इन करें",
        PasswordLogin_Wrong_Password: "Please enter the correct password",
        dialogMixinTranslations_login_facebook: "Log in with Facebook",
        SMLogin_Forgot_Password: "Forgot your password?",
        dialogMixinTranslations_signup_switch_email: "Sign up with Email",
        dialogMixinTranslations_forgot_password_mobile_new: "भूल गए?",
        PasswordLogin_Error_General: "Server error - Unable to log in",
        dialogMixinTranslations_Password_Reset_TooShort: "Password must be 4-15 characters",
        SMContainer_Show_Confirm: "This page is protected with a member login. Your users will be able to see this page once they are logged in.",
        dialogMixinTranslations_Log_In_Title: "लॉग इन करें",
        SMContainer_Show_Confirm2: "To manage your site's members, go to your Contacts from the Dashboard and click Site Members",
        dialogMixinTranslations_switch_to_signup: "एक अकाउंट नहीं है?",
        SMContain_Cancel: "Cancel",
        SMLogin_Login: "Login",
        SMApply_Success1: "Success! Your member login request has been sent and is awaiting approval.",
        SMForm_Error_19976: "Wrong email or password",
        dialogMixinTranslations_signup_google: "Sign up with Google+",
        SMApply_Success2: "The site administrator will notify you via email( {0} ) once your request has been approved ",
        SMForm_Error_18880: "Email address must be provided",
        dialogMixinTranslations_login_switch_email: "Log in with Email",
        SMForm_Error_Email_Invalid: "Email is invalid",
        SMProfile_Update_Details: "Update your details",
        SMResetPass_Continue: "Continue",
        dialogMixinTranslations_forgot_password: "पासवर्ड भूल गए?",
        dialogMixinTranslations_RESET_PASSWORD_CHECKEMAIL_TEXT: "We’ve emailed you a link to reset your password.",
        SMForm_Error_Password_Retype: "Passwords are not the same",
        SMForm_Error_19972: "Invalid token",
        dialogMixinTranslations_RESET_PASSWORD_TITLE: "Reset Password",
        SMResetPass_Reset_Fail: "Password could not have been changed. Try again later.",
        SMRegister_Already_Have_User: "I'm already a user",
        SMResetPassMail_confirmation_msg: "हमने आपको ई-मेल से एक लिंक भेजी है जिसके द्वारा आप अपना पासवर्ड दुबारा सेट कर सकेंगे",
        SMRegister_GO: "GO",
        SMResetPass_New_Password: "नया पासवर्ड प्रविष्ट करें",
        SMResetPassMail_title: "पासवर्ड दुबारा सेट करें",
        SMContainer_Need_Log_In: "To view this page, you need to be logged in.",
        SMResetPass_Message: "अपना नया पासवर्ड सेट करने के लिए, कृपया उसे नीचे दिए गए दोनों स्थानों में प्रविष्ट करें।  ",
        SMForm_Error_19988: "Validation Error",
        SMForm_Error_General_Err: "Server error. try again later.",
        SMForm_Retype_Password: "Retype password",
        dialogMixinTranslations_RESET_PASSWORD_BUTTON: "Reset Password",
        PasswordLogin_AdministratorLogin: "Administrator Login",
        SMProfile_Update: "Update",
        SMResetPassMail_Enter_Email: "Please enter your email address",
        SMForm_Error_19980: "Blocked by site owner",
        dialogMixinTranslations_GUEST_LOGIN_TITLE: "Your Password, Please.",
        PasswordLogin_Cancel: "Cancel",
        PasswordLogin_Submit: "OK",
        SMForm_Error_19984: "Invalid Session"
    },
    zh: {
        SMResetPass_Reset_Succ: "You’ve successfully reset your password.",
        SMForm_Password: "Password",
        SMLogin_Remember_Me: "Remember Me",
        PasswordLogin_Password: "Password",
        SMForm_Error_Password_Blank: "Password cannot be blank",
        SMRegister_Login: "Login",
        SMForm_Error_19999: "Unknown user",
        SMForm_Error_19958: "Your member request is waiting approval from the site owner",
        SMResetPass_Retype_Password: "再次键入：",
        SMForm_Error_Password_Length: "Password length must be between {0} and {1}",
        SMContainer_OK: "OK",
        SMResetPassMail_Back_Login: "Back to Login",
        dialogMixinTranslations_forgot_password_mobile: "Forgot your password?",
        dialogMixinTranslations_RESET_PASSWORD_SUCESS_TITLE: "Your password has been changed.",
        dialogMixinTranslations_login_google: "Log in with Google+",
        SMForm_Error_19995: "Email is already taken",
        SMResetPassMail_confirmation_title: "请查看您的电子邮件",
        dialogMixinTranslations_RESET_PASSWORD_NEWFIELD_RETYPE: "Re-type password",
        dialogMixinTranslations_RESET_PASSWORD_NEWFIELD: "Enter a new password",
        dialogMixinTranslations_RESET_PASSWORD_TEXT: "Enter your new password below",
        SMLogin_OR: "Or",
        dialogMixinTranslations_RESET_PASSWORD_CHECKEMAIL_TITLE: "Please Check Your Email",
        SMRegister_sign_up: "Sign up",
        dialogMixinTranslations_signup_facebook: "Sign up with Facebook",
        SMForm_Error_Email_Blank: "Email cannot be blank",
        PasswordLogin_Header: "Enter password to view this page",
        dialogMixinTranslations_GUEST_LOGIN_SUBTITLE: "This area is for members only.\nPlease enter the password below.",
        SMForm_Error_Non_Ascii_Chars: "Password must contain only ASCII characters",
        SMForm_Email: "Email",
        dialogMixinTranslations_Log_In: "log in",
        PasswordLogin_Wrong_Password: "Please enter the correct password",
        dialogMixinTranslations_login_facebook: "Log in with Facebook",
        SMLogin_Forgot_Password: "Forgot your password?",
        dialogMixinTranslations_signup_switch_email: "Sign up with Email",
        dialogMixinTranslations_forgot_password_mobile_new: "forgot?",
        PasswordLogin_Error_General: "Server error - Unable to log in",
        dialogMixinTranslations_Password_Reset_TooShort: "Password must be 4-15 characters",
        SMContainer_Show_Confirm: "This page is protected with a member login. Your users will be able to see this page once they are logged in.",
        dialogMixinTranslations_Log_In_Title: "Log in",
        SMContainer_Show_Confirm2: "To manage your site's members, go to your Contacts from the Dashboard and click Site Members",
        dialogMixinTranslations_switch_to_signup: "Don&#39;t have an account?",
        SMContain_Cancel: "Cancel",
        SMLogin_Login: "Login",
        SMApply_Success1: "Success! Your member login request has been sent and is awaiting approval.",
        SMForm_Error_19976: "Wrong email or password",
        dialogMixinTranslations_signup_google: "Sign up with Google+",
        SMApply_Success2: "The site administrator will notify you via email( {0} ) once your request has been approved ",
        SMForm_Error_18880: "Email address must be provided",
        dialogMixinTranslations_login_switch_email: "Log in with Email",
        SMForm_Error_Email_Invalid: "Email is invalid",
        SMProfile_Update_Details: "Update your details",
        SMResetPass_Continue: "Continue",
        dialogMixinTranslations_forgot_password: "Forgot password?",
        dialogMixinTranslations_RESET_PASSWORD_CHECKEMAIL_TEXT: "We’ve emailed you a link to reset your password.",
        SMForm_Error_Password_Retype: "Passwords are not the same",
        SMForm_Error_19972: "Invalid token",
        dialogMixinTranslations_RESET_PASSWORD_TITLE: "Reset Password",
        SMResetPass_Reset_Fail: "Password could not have been changed. Try again later.",
        SMRegister_Already_Have_User: "I'm already a user",
        SMResetPassMail_confirmation_msg: "我们已向您发送一封包含链接的电子邮件，供您重置密码。",
        SMRegister_GO: "GO",
        SMResetPass_New_Password: "输入新密码",
        SMResetPassMail_title: "重置密码",
        SMContainer_Need_Log_In: "To view this page, you need to be logged in.",
        SMResetPass_Message: "要设置您的新密码，请在下方两个字段内输入新密码。 ",
        SMForm_Error_19988: "Validation Error",
        SMForm_Error_General_Err: "Server error. try again later.",
        SMForm_Retype_Password: "Retype password",
        dialogMixinTranslations_RESET_PASSWORD_BUTTON: "Reset Password",
        PasswordLogin_AdministratorLogin: "Administrator Login",
        SMProfile_Update: "Update",
        SMResetPassMail_Enter_Email: "Please enter your email address",
        SMForm_Error_19980: "Blocked by site owner",
        dialogMixinTranslations_GUEST_LOGIN_TITLE: "Your Password, Please.",
        PasswordLogin_Cancel: "Cancel",
        PasswordLogin_Submit: "OK",
        SMForm_Error_19984: "Invalid Session"
    },
    cs: {
        SMResetPass_Reset_Succ: "Úspěšně jste obnovili své heslo.",
        SMForm_Password: "Heslo",
        SMLogin_Remember_Me: "Zapamatovat si mě",
        PasswordLogin_Password: "Heslo",
        SMForm_Error_Password_Blank: "Heslo nemůže být prázdné",
        SMRegister_Login: "Přihlásit se",
        SMForm_Error_19999: "Neznámý uživatel ",
        SMForm_Error_19958: "Váš požadavek čeká na schválení vlastníkem webu",
        SMResetPass_Retype_Password: "Zadejte heslo znovu:",
        SMForm_Error_Password_Length: "Délka hesla musí být mezí {0} a {1}",
        SMContainer_OK: "OK",
        SMResetPassMail_Back_Login: "Zpátky k přihlášení ",
        dialogMixinTranslations_forgot_password_mobile: "Zapomněli jste heslo?",
        dialogMixinTranslations_RESET_PASSWORD_SUCESS_TITLE: "Vaše heslo bylo změněno.",
        dialogMixinTranslations_login_google: "Přihlásit se přes Google+",
        SMForm_Error_19995: "E-mail je již obsazen",
        SMResetPassMail_confirmation_title: "Zkontrolujte si prosím e-mail",
        dialogMixinTranslations_RESET_PASSWORD_NEWFIELD_RETYPE: "Potvrďte heslo",
        dialogMixinTranslations_RESET_PASSWORD_NEWFIELD: "Zadejte nové heslo",
        dialogMixinTranslations_RESET_PASSWORD_TEXT: "Zadejte nové heslo níže",
        SMLogin_OR: "Nebo",
        dialogMixinTranslations_RESET_PASSWORD_CHECKEMAIL_TITLE: "Zkontrolujte si prosím e-mail",
        SMRegister_sign_up: "Přihlásit se",
        dialogMixinTranslations_signup_facebook: "Registrovat se přes Facebook",
        SMForm_Error_Email_Blank: "E-mail nemůže být prázdný",
        PasswordLogin_Header: "Zadejte heslo k zobrazení této stránky",
        dialogMixinTranslations_GUEST_LOGIN_SUBTITLE: "Zadejte prosím heslo níže.",
        SMForm_Error_Non_Ascii_Chars: "Heslo musí obsahovat pouze ASCII znaky",
        SMForm_Email: "E-mail",
        dialogMixinTranslations_Log_In: "Přihlásit se",
        PasswordLogin_Wrong_Password: "Zadejte prosím správné heslo",
        dialogMixinTranslations_login_facebook: "Přihlásit se přes Facebook",
        SMLogin_Forgot_Password: "Zapomněli jste heslo?",
        dialogMixinTranslations_signup_switch_email: "Registrovat se pomocí e-mailu",
        dialogMixinTranslations_forgot_password_mobile_new: "zapomněli jste?",
        PasswordLogin_Error_General: "Chyba serveru - Nelze se přihlásit ",
        dialogMixinTranslations_Password_Reset_TooShort: "Heslo musí obsahovat 4–15 znaků",
        SMContainer_Show_Confirm: "Tato stránka je zabezpečená přihlášením uživatele. Vaši uživatelé budou mít možnost vidět tuto stránku, jakmile se přihlásí.",
        dialogMixinTranslations_Log_In_Title: "Přihlásit se",
        SMContainer_Show_Confirm2: "Chcete-li spravovat členy vašeho webu, přejděte z Ovládacího panelu do Seznamu kontaktů a klikněte na Členové webu",
        dialogMixinTranslations_switch_to_signup: "Nemáte účet?",
        SMContain_Cancel: "Zrušit",
        SMLogin_Login: "Přihlásit se",
        SMApply_Success1: "Povedlo se! Váš požadavek přihlásit se jako uživatel byl odeslán a čeká na schválení.",
        SMForm_Error_19976: "Nesprávný e-mail nebo heslo",
        dialogMixinTranslations_signup_google: "Registrovat se přes Google+",
        SMApply_Success2: "Správce webu vás bude informovat prostřednictvím e-mailu ({0}), jakmile bude vaše žádost schválena",
        SMForm_Error_18880: "Musíte poskytnout e-mailovou adresu",
        dialogMixinTranslations_login_switch_email: "Přihlásit se pomocí e-mailu",
        SMForm_Error_Email_Invalid: "E-mail je neplatný",
        SMProfile_Update_Details: "Aktualizujte své údaje",
        SMResetPass_Continue: "Pokračovat",
        dialogMixinTranslations_forgot_password: "Zapomněli jste heslo?",
        dialogMixinTranslations_RESET_PASSWORD_CHECKEMAIL_TEXT: "Na váš e-mail jsme zaslali odkaz pro obnovení hesla.",
        SMForm_Error_Password_Retype: "Hesla nejsou stejná",
        SMForm_Error_19972: "Neplatný poukaz",
        dialogMixinTranslations_RESET_PASSWORD_TITLE: "Obnovit heslo",
        SMResetPass_Reset_Fail: "Heslo nemohlo být změněno. Zkuste to znovu později.",
        SMRegister_Already_Have_User: "Již mám účet",
        SMResetPassMail_confirmation_msg: "Zaslali jsme vám e-mail s odkazem, který Vám umožní obnovit heslo.",
        SMRegister_GO: "POKRAČOVAT",
        SMResetPass_New_Password: "Zadejte nové heslo",
        SMResetPassMail_title: "Obnovit heslo",
        SMContainer_Need_Log_In: "Pro zobrazení této stránky musíte být přihlášeni.",
        SMResetPass_Message: "Chcete-li nastavit nové heslo, zadejte ho prosím níže do obou polí. ",
        SMForm_Error_19988: "Chyba ověření",
        SMForm_Error_General_Err: "Chyba serveru. Zkuste to znovu později.",
        SMForm_Retype_Password: "Heslo znovu",
        dialogMixinTranslations_RESET_PASSWORD_BUTTON: "Obnovit heslo",
        PasswordLogin_AdministratorLogin: "Přihlášení správce",
        SMProfile_Update: "Aktualizovat",
        SMResetPassMail_Enter_Email: "Zadejte prosím vaši e-mailovou adresu",
        SMForm_Error_19980: "Blokováno vlastníkem webu",
        dialogMixinTranslations_GUEST_LOGIN_TITLE: "Sekce pro hosty",
        PasswordLogin_Cancel: "Zrušit",
        PasswordLogin_Submit: "OK",
        SMForm_Error_19984: "Neplatná relace"
    }
}), define("components/components/dialogs/dialogMixin", ["react", "lodash", "santaProps", "utils", "core", "components/components/dialogs/translations/dialogMixinTranslations", "reactDOM", "components/components/inputWithValidation/inputWithValidation", "siteButton"], function(e, i, o, t, n, s, r, a, l) {
    function d(e) {
        return e ? "mobile" : "desktop"
    }
    return {
        PASS_MIN_LEN: 4,
        PASS_MAX_LEN: 15,
        propTypes: i.assign({
            smSettings: o.Types.SiteMembersSantaTypes.smSettings.isRequired,
            isMobileView: o.Types.isMobileView.isRequired,
            isPreviewMode: o.Types.isPreviewMode.isRequired,
            isSiteMembersDialogsOpenAllowed: o.Types.SiteMembersSantaTypes.isSiteMembersDialogsOpenAllowed,
            isPremiumUser: o.Types.isPremiumUser.isRequired,
            siteMembersUrl: o.Types.SiteMembersSantaTypes.siteMembersUrl.isRequired,
            metaSiteId: o.Types.RendererModel.metaSiteId.isRequired,
            biVisitorId: o.Types.biVisitorId,
            windowKeyboardEvent: o.Types.SiteAspects.windowKeyboardEvent,
            exitFullScreenMode: o.Types.exitFullScreenMode,
            enterFullScreenMode: o.Types.enterFullScreenMode,
            styleId: o.Types.Component.styleId,
            notClosable: e.PropTypes.bool,
            onCloseDialogCallback: e.PropTypes.func,
            onSubmitCallback: e.PropTypes.func,
            language: e.PropTypes.string
        }, o.santaTypesUtils.getSantaTypesByDefinition(a), o.santaTypesUtils.getSantaTypesByDefinition(l)),
        mixins: [n.compMixins.animationsMixin],
        getInitialState: function() {
            return this.canOpenSiteMembersDialogs = this.props.isSiteMembersDialogsOpenAllowed, {
                showComponent: !0,
                errMsg: "",
                oAuthErrMsg: "",
                $view: d(this.props.isMobileView),
                $previewMode: this.props.isPreviewMode ? "previewMode" : "",
                $canBeClosed: this.props.notClosable ? "" : "canBeClosed",
                $dialogLoader: "",
                socialLoginEnabled: this.isSocialLogin(),
                socialLoginIframeReady: !1
            }
        },
        componentWillMount: function() {
            !this.props.notClosable && this.props.windowKeyboardEvent && this.props.windowKeyboardEvent.registerToEscapeKey(this)
        },
        componentWillReceiveProps: function(e) {
            if (this.canOpenSiteMembersDialogs && this.canOpenSiteMembersDialogs !== e.isSiteMembersDialogsOpenAllowed) this.closeDialog();
            else {
                var i = d(e.isMobileView);
                this.state.$view !== i && this.setState({
                    $view: i
                })
            }
        },
        componentWillUnmount: function() {
            this.props.windowKeyboardEvent && this.props.windowKeyboardEvent.unRegisterKeys(this), this.props.exitFullScreenMode()
        },
        onEscapeKey: function() {
            this.closeDialog(!0)
        },
        componentDidMount: function() {
            this.animate("dialog", "FadeIn", .5, 0), this.props.enterFullScreenMode()
        },
        onClickCloseButton: function() {
            this.closeDialog(!0)
        },
        closeDialog: function(e) {
            this.props.onCloseDialogCallback ? this.props.onCloseDialogCallback(this, !1, e) : this.performCloseDialog()
        },
        performCloseDialog: function(e) {
            this.animate("dialog", "FadeOut", .5, 0, null, {
                onComplete: function() {
                    e && e()
                }
            })
        },
        submit: function() {
            if (this.shouldBlockSubmit && this.shouldBlockSubmit()) this.blockSubmit(r.findDOMNode(this.refs.submitButton));
            else {
                var e = !0;
                this.validateBeforeSubmit && (e = this.validateBeforeSubmit()), e && (this.props.onSubmitCallback ? this.props.onSubmitCallback(i.merge(this.getDataToSubmit(), {
                    lang: this.props.language || "en"
                }), this) : t.log.error("dialogMixin: this.props.onSubmitCallback is not defined"))
            }
        },
        submitOnEnterKeyPress: function(e) {
            "Enter" === e.key && this.submit()
        },
        getErrorMessage: function() {
            return this.state.errMsg
        },
        _toErrorKey: function(e) {
            var o = i.startsWith(e, "SMForm_Error_") ? e : "SMForm_Error_" + e;
            return i.includes(o, "-") && (o = o.replace("-", "")), o
        },
        setErrorMessageByCode: function(e) {
            e ? this.setErrorMessage(this._toErrorKey(e)) : this.setState({
                errMsg: ""
            })
        },
        setOuathErrorMessageByCode: function(e) {
            this.setState({
                oAuthErrMsg: e ? this.getText(this.props.language, this._toErrorKey(e)) : ""
            })
        },
        setErrorMessage: function(e) {
            var i = this.getText(this.props.language, e);
            this.setState({
                errMsg: i
            })
        },
        shouldDialogBeClosed: function() {
            return !this.state.showComponent
        },
        getCloseDialogSkinProperties: function() {
            return {
                "": {
                    style: {
                        display: "none"
                    }
                }
            }
        },
        getMobileSocialLoginClass: function() {
            return this.state.socialLoginEnabled ? "socialLoginMode" : "emailLoginMode"
        },
        _isAsciiOnlyInput: function(e) {
            for (var i = e.length, o = this.PASS_MAX_LEN, t = 0; t < i && t < o; t++)
                if (e.charCodeAt(t) > 127) return !1;
            return !0
        },
        _getEmailValidator: function(e) {
            return function(i) {
                return 0 === i.length ? this.getText(e, "SMForm_Error_Email_Blank") : !t.validationUtils.isValidEmail(i) && this.getText(e, "SMForm_Error_Email_Invalid")
            }.bind(this)
        },
        _getPasswordValidator: function(e) {
            return function(i) {
                return 0 === i.length ? this.getText(e, "SMForm_Error_Password_Blank") : i.length < this.PASS_MIN_LEN || i.length > this.PASS_MAX_LEN ? this.getText(e, "SMForm_Error_Password_Length").replace("{0}", this.PASS_MIN_LEN).replace("{1}", this.PASS_MAX_LEN) : !this._isAsciiOnlyInput(i) && this.getText(e, "SMForm_Error_Non_Ascii_Chars")
            }.bind(this)
        },
        _onInputChange: function() {
            this.setErrorMessageByCode("")
        },
        createEmailInput: function(e, i) {
            var o = e.language,
                t = this.getText(o, e.inputTitleKey),
                n = this._getEmailValidator(o),
                s = {
                    refId: e.refId,
                    inputTitleText: t,
                    validators: [n],
                    defaultValue: e.defaultValue || ""
                };
            return this.createInputWithValidation(s, i)
        },
        createPasswordInput: function(e, i) {
            var o = e.language,
                t = this.getText(o, e.inputTitleKey),
                n = e.overrideValidators || [this._getPasswordValidator(o)],
                s = {
                    refId: e.refId,
                    inputTitleText: t,
                    validators: n,
                    type: "password",
                    defaultValue: e.defaultValue
                };
            return this.createInputWithValidation(s, i)
        },
        createInputWithValidation: function(e, o) {
            e.validators = e.validators || [], o = o || {};
            var t = {
                lazyValidation: !0,
                validators: e.validators,
                label: e.inputTitleText,
                ref: e.refId,
                defaultValue: e.defaultValue,
                type: e.type,
                onChange: this._onInputChange
            };
            return i.merge(t, o), this.createChildComponent({
                id: e.refId
            }, "wysiwyg.components.viewer.inputs.InputWithValidation", "inputWithValidation", t)
        },
        getText: function(e, o, t) {
            e = s[e] ? e : "en", o = s[e][o] ? o : "SMForm_Error_General_Err";
            var n = s[e][o];
            return t && i.forEach(t, function(e, i) {
                n = n.replace("{" + i + "}", e)
            }), n
        },
        createXButton: function() {
            return {
                onClick: this.onClickCloseButton
            }
        },
        createContent: function() {
            return {
                className: this.getErrorMessage() ? this.props.styleId + "_validationError" : "",
                onKeyPress: this.submitOnEnterKeyPress
            }
        },
        createSubmitButton: function(e, i) {
            var o = {
                    label: i || "GO",
                    id: "ok"
                },
                t = {
                    align: "center"
                },
                n = e;
            return this.createChildComponent(o, "wysiwyg.viewer.components.SiteButton", n, {
                skinPart: n,
                styleId: "b1",
                compProp: t,
                style: {
                    position: "relative",
                    height: "100%",
                    width: "100%"
                },
                structure: {
                    layout: {
                        scale: .5
                    }
                }
            })
        },
        _onTokenReceived: function(e) {
            e.token && _typeof(i.isFunction(this.props.onTokenMessage)) && this.props.onTokenMessage(e.token, e.vendor, this.refs[this.socialLoginIframeRef].contentWindow, this)
        },
        _onSocialLoginIframeLoaded: function() {
            this.setState({
                socialLoginIframeReady: !0
            })
        },
        onSocialLoginIframeMessage: function(e) {
            switch (e.type) {
                case "page-ready":
                    this._onSocialLoginIframeLoaded();
                    break;
                case "auth-token":
                    this._onTokenReceived(e)
            }
        },
        getSocialLoginSkinParts: function(e, i, o) {
            var t = this.state.socialLoginIframeReady,
                n = [{
                    id: "google",
                    enabled: this.props.smSettings.socialLoginGoogleEnabled
                }, {
                    id: "facebook",
                    enabled: this.props.smSettings.socialLoginFacebookEnabled
                }];
            return {
                socialLoginIframe: {
                    src: this._buildIframeSrc({
                        mode: e,
                        lang: i,
                        vendors: n
                    }),
                    frameBorder: "0",
                    scrolling: "no",
                    allowTransparency: "true",
                    className: t ? this.props.styleId + "_ready" : ""
                },
                socialLoginLoader: t ? null : {
                    className: "circle-preloader"
                },
                switchToEmailLink: {
                    children: this.getText(i, o.switchEmail),
                    onClick: this.toggleSocialLoginDisplayState
                },
                switchToSocialLink: {
                    className: this.props.styleId + "_" + (this.isSocialLogin ? this.getMobileSocialLoginClass() : ""),
                    onClick: this.toggleSocialLoginDisplayState
                },
                socialLoginErrorMsg: {
                    className: this.props.styleId + (this.state.oAuthErrMsg ? "_enabled" : ""),
                    children: this.state.oAuthErrMsg
                }
            }
        },
        isSocialLogin: function() {
            return !(!this.props.smSettings.socialLoginGoogleEnabled && !this.props.smSettings.socialLoginFacebookEnabled)
        },
        toggleSocialLoginDisplayState: function() {
            this.setState({
                socialLoginEnabled: !this.state.socialLoginEnabled
            })
        },
        startLoader: function() {
            this.setState({
                $dialogLoader: "dialogLoader"
            })
        },
        endLoader: function() {
            this.setState({
                $dialogLoader: ""
            })
        },
        getDialogPreloaderSkinProperties: function() {
            return {
                className: "circle-preloader"
            }
        },
        _buildIframeSrc: function(e) {
            return i.template("${baseUrl}/view/social/frame/${msid}?mode=${mode}&lang=${lang}&vendors=${vendors}&visitorId=${visitorId}")({
                baseUrl: this.props.siteMembersUrl.replace(/^(https|http):/i, ""),
                msid: this.props.metaSiteId,
                mode: e.mode,
                lang: e.lang,
                vendors: e.vendors.reduce(function(e, i) {
                    return i.enabled ? e.push(i.id) && e : e
                }, []).join(","),
                visitorId: this.props.biVisitorId
            })
        }
    }
}), define("components/components/dialogs/notificationDialog/notificationDialog", ["lodash", "core", "components/components/dialogs/dialogMixin", "react", "santaProps"], function(e, i, o, t, n) {
    return {
        displayName: "NotificationDialog",
        mixins: [i.compMixins.skinBasedComp, o],
        propTypes: {
            title: t.PropTypes.string,
            description: t.PropTypes.string,
            buttonText: t.PropTypes.string,
            language: t.PropTypes.string,
            styleId: n.Types.Component.styleId,
            onButtonClick: t.PropTypes.func
        },
        statics: {
            useSantaTypes: !0
        },
        getSkinProperties: function() {
            if (this.shouldDialogBeClosed()) return this.getCloseDialogSkinProperties();
            var i = e.isUndefined(this.props.title) ? "=title missing=" : this.props.title,
                o = e.isUndefined(this.props.description) ? "=description missing=" : this.props.description,
                t = function(e) {
                    return this.props.buttonText || this.getText(this.props.language, e)
                }.bind(this);
            return {
                blockingLayer: {},
                dialogTitle: {
                    children: i
                },
                dialogDescription: {
                    children: o,
                    className: this.props.description ? "" : this.props.styleId + "_noDialogDescription"
                },
                okButton: {
                    children: this.createSubmitButton("okButton", t("SMRegister_GO")),
                    onClick: this.props.onButtonClick || this.closeDialog
                },
                xButton: this.createXButton()
            }
        }
    }
}), define("components/components/dialogs/creditsDialog/creditsDialog", ["lodash", "core", "components/components/dialogs/dialogMixin", "reactDOM", "santaProps"], function(e, i, o, t, n) {
    return {
        displayName: "CreditsDialog",
        mixins: [i.compMixins.skinBasedComp, o],
        componentDidMount: function() {
            t.findDOMNode(this.refs.iframe).contentWindow.focus()
        },
        propTypes: {
            santaBase: n.Types.santaBase.isRequired
        },
        statics: {
            useSantaTypes: !0
        },
        getSkinProperties: function() {
            return this.shouldDialogBeClosed() ? this.getCloseDialogSkinProperties() : {
                blockingLayer: {
                    onClick: this.closeDialog
                },
                iframe: {
                    src: this.props.santaBase + "/static/external/credits/snake/snake.html"
                }
            }
        }
    }
}), define("components/components/dialogs/enterPasswordDialog/enterPasswordDialog", ["react", "core", "components/components/dialogs/dialogMixin", "lodash"], function(e, i, o, t) {
    return {
        displayName: "EnterPasswordDialog",
        mixins: [i.compMixins.skinBasedComp, o],
        propTypes: {
            digestedPassword: e.PropTypes.string,
            language: e.PropTypes.string,
            notClosable: e.PropTypes.bool
        },
        statics: {
            useSantaTypes: !0
        },
        passwordInputRef: "passwordInput",
        validateBeforeSubmit: function() {
            return this.refs[this.passwordInputRef].validate()
        },
        getDataToSubmit: function() {
            return this.props.digestedPassword ? {} : {
                password: this.refs[this.passwordInputRef].getValue()
            }
        },
        getSkinProperties: function() {
            var e = this.getText(this.props.language, "SMRegister_GO"),
                i = {
                    blockingLayer: {},
                    errMsg: {
                        children: this.getErrorMessage()
                    },
                    content: this.createContent(),
                    subtitle: {
                        children: this.getText(this.props.language, "dialogMixinTranslations_GUEST_LOGIN_SUBTITLE")
                    },
                    title: {
                        children: this.getText(this.props.language, "dialogMixinTranslations_GUEST_LOGIN_TITLE")
                    },
                    okButton: {
                        children: this.createSubmitButton("okButton", e),
                        onClick: this.submit
                    },
                    password: {
                        children: this._createPasswordField({
                            placeholder: this.getText(this.props.language, "PasswordLogin_Password")
                        })
                    }
                };
            if (!this.props.notClosable) {
                var o = {
                    blockingLayer: {},
                    xButton: this.createXButton()
                };
                t.merge(i, o)
            }
            return i
        },
        _validatePassword: function(e) {
            return !e && this.getText(this.props.language, "SMForm_Error_Password_Blank")
        },
        _createPasswordField: function(e) {
            var i = {
                refId: this.passwordInputRef,
                inputTitleKey: "PasswordLogin_Password",
                language: this.props.language,
                overrideValidators: [this._validatePassword]
            };
            return this.createPasswordInput(i, e)
        }
    }
}), define("components/components/dialogs/siteMemberDialogs/signUpDialog/signUpDialog", ["lodash", "core", "components/components/dialogs/dialogMixin", "react", "santaProps"], function(e, i, o, t, n) {
    return {
        displayName: "SignUpDialog",
        mixins: [i.compMixins.skinBasedComp, i.compMixins.postMessageCompMixin, o],
        propTypes: {
            language: t.PropTypes.string,
            styleId: n.Types.Component.styleId,
            onSwitchDialogLinkClick: t.PropTypes.func
        },
        statics: {
            useSantaTypes: !0
        },
        passwordInputRef: "passwordInput",
        retypePasswordInputRef: "retypePasswordInput",
        emailInputRef: "emailInput",
        socialLoginIframeRef: "socialLoginIframe",
        validateBeforeSubmit: function() {
            return this.refs[this.emailInputRef].validate(), this.refs[this.passwordInputRef].validate(), this.refs[this.retypePasswordInputRef].validate(), !!(this.refs[this.emailInputRef].isValid() && this.refs[this.passwordInputRef].isValid() && this.refs[this.retypePasswordInputRef].isValid()) && (this.refs[this.passwordInputRef].getValue() === this.refs[this.retypePasswordInputRef].getValue() || (this.setErrorMessageByCode("SMForm_Error_Password_Retype"), !1))
        },
        getDataToSubmit: function() {
            return {
                email: this.refs[this.emailInputRef].getValue(),
                password: this.refs[this.passwordInputRef].getValue()
            }
        },
        getSkinProperties: function() {
            if (this.shouldDialogBeClosed()) return this.getCloseDialogSkinProperties();
            var i = this.isSocialLogin(),
                o = this.props.language,
                t = this.getText(o, "SMRegister_Already_Have_User") + ",",
                n = this.getText(o, "SMRegister_sign_up"),
                s = this.getText(o, "SMRegister_GO"),
                r = this.getText(o, "dialogMixinTranslations_Log_In"),
                a = this.getErrorMessage(),
                l = {
                    preloader: this.getDialogPreloaderSkinProperties(),
                    blockingLayer: {},
                    note: {
                        children: t
                    },
                    switchDialogLink: {
                        children: r,
                        onClick: this.props.onSwitchDialogLinkClick
                    },
                    title: {
                        children: n
                    },
                    errMsg: {
                        children: a
                    },
                    content: this.createContent(),
                    okButton: {
                        children: this.createSubmitButton("okButton", s),
                        onClick: this.submit
                    },
                    email: {
                        children: this._createEmailField({
                            placeholder: this.getText(o, "SMForm_Email")
                        })
                    },
                    password: {
                        children: this._createPasswordField({
                            placeholder: this.getText(o, "PasswordLogin_Password")
                        })
                    },
                    retypePassword: {
                        children: this._createRetypePasswordField({
                            placeholder: this.getText(o, "SMForm_Retype_Password")
                        })
                    },
                    contentWrapper: {
                        className: this.props.styleId + "_" + (i ? "horizontal" : "vertical") + " " + this.props.styleId + "_" + (i ? this.getMobileSocialLoginClass() : "")
                    }
                };
            if (e.assign(l, i ? this.getSocialLoginSkinParts("signup", o, {
                    google: "dialogMixinTranslations_signup_google",
                    facebook: "dialogMixinTranslations_signup_facebook",
                    switchEmail: "dialogMixinTranslations_signup_switch_email"
                }) : {}), !this.props.notClosable) {
                var d = {
                    blockingLayer: {},
                    xButton: this.createXButton()
                };
                e.merge(l, d)
            }
            return l
        },
        _createEmailField: function(e) {
            var i = {
                refId: this.emailInputRef,
                inputTitleKey: "SMForm_Email",
                language: this.props.language
            };
            return this.createEmailInput(i, e)
        },
        _createPasswordField: function(e) {
            var i = {
                refId: this.passwordInputRef,
                inputTitleKey: "SMForm_Password",
                language: this.props.language
            };
            return this.createPasswordInput(i, e)
        },
        _createRetypePasswordField: function(e) {
            var i = {
                refId: this.retypePasswordInputRef,
                inputTitleKey: "SMForm_Retype_Password",
                language: this.props.language
            };
            return this.createPasswordInput(i, e)
        },
        componentDidMount: function() {
            this.setPostMessageHandler("wix-social-login", this.onSocialLoginIframeMessage)
        }
    }
}), define("components/components/dialogs/siteMemberDialogs/memberLoginDialog/memberLoginDialog", ["lodash", "core", "components/components/dialogs/dialogMixin", "react", "reactDOM", "santaProps"], function(e, i, o, t, n, s) {
    return {
        displayName: "MemberLoginDialog",
        mixins: [i.compMixins.skinBasedComp, i.compMixins.postMessageCompMixin, o],
        propTypes: {
            isMobileView: s.Types.isMobileView.isRequired,
            notClosable: t.PropTypes.bool,
            language: t.PropTypes.string,
            styleId: s.Types.Component.styleId,
            onSwitchDialogLinkClick: t.PropTypes.func,
            onForgetYourPasswordClick: t.PropTypes.func,
            defaultEmail: t.PropTypes.string
        },
        statics: {
            useSantaTypes: !0
        },
        passwordInputRef: "passwordInput",
        emailInputRef: "emailInput",
        socialLoginIframeRef: "socialLoginIframe",
        validateBeforeSubmit: function() {
            return this.refs[this.emailInputRef].validate(), this.refs[this.passwordInputRef].validate(), this.refs[this.emailInputRef].isValid() && this.refs[this.passwordInputRef].isValid()
        },
        getDataToSubmit: function() {
            return {
                email: this.refs[this.emailInputRef].getValue(),
                password: this.refs[this.passwordInputRef].getValue(),
                rememberMe: n.findDOMNode(this.refs.rememberMeCheckbox).checked
            }
        },
        getSkinProperties: function() {
            if (this.shouldDialogBeClosed()) return this.getCloseDialogSkinProperties();
            var i = this.isSocialLogin(),
                o = this.props.language,
                t = this.getText(o, "dialogMixinTranslations_Log_In_Title"),
                n = this.getText(o, "SMRegister_GO"),
                s = this.getText(o, "SMRegister_sign_up"),
                r = this.getText(o, "SMLogin_Remember_Me"),
                a = this.getText(o, this.props.isMobileView ? "dialogMixinTranslations_forgot_password_mobile" : "dialogMixinTranslations_forgot_password"),
                l = this.getText(o, "dialogMixinTranslations_switch_to_signup") + " ",
                d = this.getErrorMessage(),
                p = {
                    preloader: this.getDialogPreloaderSkinProperties(),
                    blockingLayer: {},
                    switchDialogLink: {
                        children: s,
                        onClick: this.props.onSwitchDialogLinkClick
                    },
                    title: {
                        children: t
                    },
                    content: this.createContent(),
                    rememberMeCheckboxLabel: {
                        children: r
                    },
                    forgotYourPasswordLink: {
                        children: a,
                        onClick: this._onForgotYourPasswordClick
                    },
                    switchToSignUpText: {
                        children: l
                    },
                    password: {
                        children: this._createPasswordField({
                            placeholder: this.getText(o, "PasswordLogin_Password"),
                            asyncErrorMessage: d
                        })
                    },
                    email: {
                        children: this._createEmailField({
                            placeholder: this.getText(o, "SMForm_Email")
                        })
                    },
                    okButton: {
                        children: this.createSubmitButton("okButton", n),
                        onClick: this.submit
                    },
                    forgotYourPasswordLinkMobile: {
                        children: a,
                        onClick: this._onForgotYourPasswordClick
                    },
                    contentWrapper: {
                        className: this.props.styleId + "_" + (i ? "horizontal" : "vertical") + " " + this.props.styleId + "_" + (i ? this.getMobileSocialLoginClass() : "")
                    }
                };
            if (e.assign(p, i ? this.getSocialLoginSkinParts("login", o, {
                    google: "dialogMixinTranslations_login_google",
                    facebook: "dialogMixinTranslations_login_facebook",
                    switchEmail: "dialogMixinTranslations_login_switch_email"
                }) : {}), !this.props.notClosable) {
                var g = {
                    blockingLayer: {},
                    xButton: this.createXButton()
                };
                e.merge(p, g)
            }
            return p
        },
        _onForgotYourPasswordClick: function() {
            this.props.onForgetYourPasswordClick()
        },
        _createEmailField: function(e) {
            var i = {
                refId: this.emailInputRef,
                inputTitleKey: "SMForm_Email",
                language: this.props.language,
                defaultValue: this.props.defaultEmail
            };
            return this.createEmailInput(i, e)
        },
        _createPasswordField: function(e) {
            var i = {
                refId: this.passwordInputRef,
                inputTitleKey: "SMForm_Password",
                language: this.props.language
            };
            return this.createPasswordInput(i, e)
        },
        componentDidMount: function() {
            this.setPostMessageHandler("wix-social-login", this.onSocialLoginIframeMessage)
        }
    }
}), define("components/components/dialogs/siteMemberDialogs/requestPasswordResetDialog/requestPasswordResetDialog", ["lodash", "core", "components/components/dialogs/dialogMixin", "react"], function(e, i, o, t) {
    return {
        displayName: "RequestPasswordResetDialog",
        mixins: [i.compMixins.skinBasedComp, o],
        emailInputRef: "emailInput",
        propTypes: {
            notClosable: t.PropTypes.bool,
            language: t.PropTypes.string,
            defaultEmail: t.PropTypes.string
        },
        statics: {
            useSantaTypes: !0
        },
        validateBeforeSubmit: function() {
            return this.refs[this.emailInputRef].validate(), this.refs[this.emailInputRef].isValid()
        },
        getDataToSubmit: function() {
            return {
                email: this.refs[this.emailInputRef].getValue()
            }
        },
        getSkinProperties: function() {
            if (this.shouldDialogBeClosed()) return this.getCloseDialogSkinProperties();
            var i = this.props.language,
                o = this.getText(i, "SMResetPassMail_title"),
                t = this.getText(i, "SMRegister_GO"),
                n = this.getText(i, "SMResetPassMail_Enter_Email"),
                s = {
                    blockingLayer: {},
                    title: {
                        children: o
                    },
                    errMsg: {
                        children: this.getErrorMessage()
                    },
                    content: this.createContent(),
                    okButton: {
                        children: this.createSubmitButton("okButton", t),
                        onClick: this.submit
                    },
                    subtitle: {
                        children: n
                    },
                    email: {
                        children: this._createEmailInput({
                            placeholder: this.getText(i, "SMForm_Email")
                        })
                    }
                };
            if (!this.props.notClosable) {
                var r = {
                    blockingLayer: {},
                    xButton: this.createXButton()
                };
                e.merge(s, r)
            }
            return s
        },
        _createEmailInput: function(e) {
            var i = {
                refId: this.emailInputRef,
                inputTitleKey: "SMResetPassMail_Enter_Email",
                language: this.props.language,
                defaultValue: this.props.defaultEmail
            };
            return this.createEmailInput(i, e)
        }
    }
}), define("components/components/dialogs/siteMemberDialogs/resetPasswordDialog/resetPasswordDialog", ["lodash", "core", "components/components/dialogs/dialogMixin", "santaProps", "react"], function(e, i, o, t, n) {
    return {
        displayName: "ResetPasswordDialog",
        mixins: [i.compMixins.skinBasedComp, o],
        propTypes: {
            forgotPasswordToken: t.Types.SiteMembersSantaTypes.forgotPasswordToken,
            language: n.PropTypes.string
        },
        statics: {
            useSantaTypes: !0
        },
        passwordInputRef: "passwordInput",
        retypePasswordInputRef: "retypePasswordInput",
        validateBeforeSubmit: function() {
            return this.refs[this.passwordInputRef].validate(), this.refs[this.retypePasswordInputRef].validate(), !(!this.refs[this.passwordInputRef].isValid() || !this.refs[this.retypePasswordInputRef].isValid()) && (this.refs[this.passwordInputRef].getValue() === this.refs[this.retypePasswordInputRef].getValue() || (this.setErrorMessage("SMForm_Error_Password_Retype"), !1))
        },
        getDefaultProps: function() {
            return {
                shouldNotClose: !0
            }
        },
        getDataToSubmit: function() {
            return {
                forgotPasswordToken: this.props.forgotPasswordToken,
                newPassword: this.refs[this.passwordInputRef].getValue()
            }
        },
        getSkinProperties: function() {
            var e = this.props.language,
                i = this.getText(e, "SMResetPassMail_title"),
                o = this.getText(e, "dialogMixinTranslations_RESET_PASSWORD_TEXT"),
                t = this.getText(e, "SMRegister_GO"),
                n = this.getText(e, "SMResetPass_New_Password"),
                s = this.getText(e, "dialogMixinTranslations_RESET_PASSWORD_NEWFIELD_RETYPE");
            return {
                blockingLayer: {},
                title: {
                    children: i
                },
                errMsg: {
                    children: this.getErrorMessage()
                },
                content: this.createContent(),
                okButton: {
                    children: this.createSubmitButton("okButton", t),
                    onClick: this.submit
                },
                subtitle: {
                    children: o
                },
                password: {
                    children: this._createPasswordField({
                        placeholder: n
                    })
                },
                retypePassword: {
                    children: this._createRetypePasswordField({
                        placeholder: s
                    })
                }
            }
        },
        _createPasswordField: function(e) {
            var i = {
                refId: this.passwordInputRef,
                inputTitleKey: "SMResetPass_New_Password",
                language: this.props.language
            };
            return this.createPasswordInput(i, e)
        },
        _createRetypePasswordField: function(e) {
            var i = {
                refId: this.retypePasswordInputRef,
                inputTitleKey: "SMResetPass_Retype_Password",
                language: this.props.language
            };
            return this.createPasswordInput(i, e)
        }
    }
}), define("components/components/toggle/toggle", ["core"], function(e) {
    return {
        displayName: "Toggle",
        mixins: [e.compMixins.skinBasedComp],
        getInitialState: function() {
            return this.getCssState(this.props)
        },
        componentWillReceiveProps: function(e) {
            this.setState(this.getCssState(e))
        },
        getCssState: function(e) {
            return {
                $default: e.initialState || "off"
            }
        },
        getSkinProperties: function() {
            var e = this.props.children[0],
                i = this.props.children[1];
            return {
                on: {
                    children: "on" === this.props.initialState ? [e] : []
                },
                off: {
                    children: "off" === this.props.initialState ? [i] : []
                }
            }
        }
    }
}), define("components/components/textOption/textOption", ["core"], function(e) {
    return {
        displayName: "TextOption",
        mixins: [e.compMixins.optionInput],
        getSkinProperties: function() {
            var e = {
                size: {
                    children: this.props.compData.text
                },
                tooltip: this.createInfoTipChildComponent()
            };
            return this.props.compData.disabled || (e[""] = {
                onClick: this.props.onClick,
                onMouseEnter: this.onMouseEnter,
                onMouseLeave: this.onMouseLeave
            }), e
        }
    }
}), define("components/components/mobileTextOption/mobileTextOption", ["core"], function(e) {
    return {
        displayName: "MobileTextOption",
        mixins: [e.compMixins.optionInput],
        getSkinProperties: function() {
            var e = {
                size: {
                    children: this.props.compData.text
                },
                tooltip: {
                    children: [this.props.compData.description]
                }
            };
            return this.props.compData.disabled || (e[""] = {
                onClick: this.props.onClick,
                style: {
                    cursor: "pointer"
                }
            }), e
        }
    }
}), define("components/bi/errors.json", [], function() {
    return {
        FORM_SUBMIT_FAILURE: {
            errorCode: 101027,
            severity: "error",
            params: {
                p1: "componentId",
                p2: "componentType",
                p3: "errorDesc",
                p4: "response"
            }
        },
        FORM_SUBMIT_FINAL_FALLBACK: {
            errorCode: 101028,
            severity: "fatal",
            params: {
                p1: "componentId",
                p2: "componentType",
                p3: "errorDesc",
                p4: "response"
            }
        },
        FORM_SUBMIT_INVALID_EMAIL: {
            errorCode: 101029,
            severity: "error",
            params: {
                p1: "email"
            }
        },
        MEDIA_RICH_TEXT_WRONG_COMP_DATA: {
            errorCode: 32e3,
            severity: "fatal",
            params: {
                p1: "wixCompJson",
                p2: "errorDesc",
                p3: "errorStack"
            }
        },
        MEDIA_RICH_TEXT_UNSUPPORTED_COMPONENT: {
            errorCode: 32001,
            severity: "fatal",
            params: {
                p1: "wixCompJson"
            }
        },
        MEDIA_RICH_MISSING_COMPONENT_PLACEHOLDER: {
            errorCode: 32002,
            severity: "fatal",
            params: {
                p1: "dataQuery"
            }
        },
        IMAGE_FILTER_NOT_VALID: {
            errorName: "image_filter_not_valid",
            errorCode: 556,
            severity: "error",
            params: {
                p1: "filterName"
            }
        }
    }
}), define("components/bi/errors", ["components/bi/errors.json", "lodash", "utils"], function(e, i, o) {
    return i.forEach(e, function(e, i) {
        e.errorName = i
    }), o.logger.register("components", "error", e), e
}), define("components/components/mediaRichText/galleryHelpers/galleryHelpers", ["lodash", "utils"], function(e, i) {
    function o(i) {
        return e.includes(_, i)
    }

    function t(e) {
        return e === d
    }

    function n(e) {
        return e === g
    }

    function s(e, i) {
        var o = 0;
        if (t(i.componentType)) {
            var s = i.cols,
                r = i.rows,
                a = 2 * i.margin,
                l = Math.round((e - (s - 1) * a) / s),
                d = m * l;
            o = Math.round(d * r) + (r - 1) * a + 26
        } else n(i.componentType) && (o = Math.round(m * e));
        return o
    }

    function r(e, i) {
        var o = e.width;
        return {
            width: o,
            height: s(o, i),
            position: "relative"
        }
    }

    function a(e) {
        var o = {};
        return t(e.componentType) ? o = {
            skin: p,
            compProp: {
                type: "MatrixGalleryProperties",
                metaData: {
                    schemaVersion: "1.0"
                },
                expandEnabled: !0,
                imageMode: e.fixedSize ? "clipImage" : "flexibleWidthFixed",
                numCols: e.cols,
                maxRows: e.rows,
                incRows: 2,
                margin: 2 * e.margin,
                alignText: "left"
            }
        } : n(e.componentType) ? o = {
            skin: c,
            compProp: {
                autoplay: e.autoplay,
                autoplayInterval: e.autoplayInterval,
                bidirectional: !1,
                expandEnabled: !0,
                imageMode: "flexibleWidthFixed",
                metaData: {
                    schemaVersion: "1.0"
                },
                reverse: !1,
                showAutoplay: !0,
                showCounter: !0,
                showExpand: !1,
                showNavigation: !0,
                showSocial: !1,
                transDuration: 1,
                transition: "swipeHorizontal",
                type: "SlideShowGalleryProperties"
            }
        } : i.log.error("Unknown gallery type: " + e.componentType), o
    }

    function l(o, s, l) {
        var d = o.componentType,
            g = e.assign({
                dataQuery: o.dataQuery,
                propertyQuery: o.dataQuery,
                componentType: o.componentType,
                type: "Component",
                style: r(l, o),
                compData: {
                    type: "ImageList",
                    items: e.map(o.imageList, function(i) {
                        var o = e.get(s, i.dataQuery);
                        return e.assign({}, i, o, {
                            type: "Image",
                            id: i.id + i.uri,
                            isRef: !1,
                            metaData: {
                                isHidden: !1,
                                isPreset: !0,
                                schemaVersion: "1.0"
                            }
                        })
                    }),
                    metaData: {
                        isPreset: !0,
                        schemaVersion: "1.0",
                        isHidden: !1
                    }
                }
            }, a(o));
        return n(d) && (g.styleId = i.santaTypes.shortenStyleId(c)), t(d) && (g.styleId = i.santaTypes.shortenStyleId(p)), g
    }
    var d = "wysiwyg.viewer.components.MatrixGallery",
        p = "wysiwyg.viewer.skins.gallerymatrix.BlogMatrixGallery",
        g = "wysiwyg.viewer.components.SlideShowGallery",
        c = "skins.viewer.gallery.BlogSlideShow",
        _ = [d, g],
        m = .75;
    return {
        buildGalleryJsonFromCkData: l,
        isGalleryComponent: o
    }
}), define("components/components/mediaRichText/wixMusicEmbedMixin/wixMusicEmbedMixin", ["lodash"], function(e) {
    return {
        getInitialState: function() {
            return window.addEventListener("message", this.onPlayerMessage), {
                height: this.props.height
            }
        },
        onPlayerMessage: function(e) {
            "resizeOfWixMusicIframe" === e.data.event && e.data.playerId === this.props.playerId && this.setState({
                height: e.data.size.maxHeight
            })
        },
        componentWillUnmount: function() {
            window.removeEventListener("message", this.onPlayerMessage)
        },
        getIframeProps: function() {
            return e.assign({}, this.props, {
                height: this.state.height
            })
        }
    }
}), define("components/components/mediaRichText/mediaRichText", ["lodash", "utils", "coreUtils", "compUtils", "react", "santaProps", "textCommon", "components/bi/errors", "components/components/mediaRichText/galleryHelpers/galleryHelpers", "components/components/mediaRichText/wixMusicEmbedMixin/wixMusicEmbedMixin"], function(e, i, o, t, n, s, r, a, l, d) {
    function p(e) {
        return x[e] || e
    }

    function g() {
        var e = this.props.siteData.measureMap;
        return e && (this._lastMeasuredWidth = e.width[this.props.id]), this._lastMeasuredWidth
    }

    function c(e, i) {
        var o = JSON.parse(e.replace(/&quot;/g, '"'));
        return o.url = i, o
    }

    function _(e, i) {
        try {
            return c(e, i)
        } catch (i) {
            return void this.props.siteAPI.reportBI(a.MEDIA_RICH_TEXT_WRONG_COMP_DATA, {
                wixCompJson: e,
                errorDesc: i.message,
                errorStack: i.stack
            })
        }
    }

    function m(e) {
        return "innerComp_" + e.replace("#", "")
    }

    function u(e, i) {
        var o = e.style;
        o.marginTop = "10px", o.marginBottom = "10px", o.marginLeft = i.marginLeft, o.marginRight = i.marginRight, o.position = "static"
    }

    function S(e, i) {
        var o = i.style;
        e.floatValue ? (o.float = e.floatValue, o.display = "", o.clear = "") : (o.display = e.display, o.clear = "both", o.float = "")
    }

    function h(i, o) {
        e.has(i, "post-cover-photo") && (o.addItemProp = !0)
    }

    function M(e, i) {
        return e.compProp = {
            showControls: "temp_show",
            enablejsapi: 1
        }, h(i, e), e
    }

    function w(i, o, t) {
        o.compProp = {
            displayMode: "fitWidthStrict"
        };
        var n = e.get(o, "structure.linkDataQuery");
        if (n) {
            var s = n.slice(1);
            o.compData.link = e.find(i, {
                id: s
            })
        }
        return h(t, o), o
    }

    function T(i) {
        var o = e.cloneDeep(i.compData);
        i.compData.items = e.map(i.compData.items, function(i) {
            return e.assign({
                galleryData: o
            }, i)
        })
    }

    function E(e) {
        return e.childNodes && 1 === e.childNodes.length && e.childNodes[0].nodeType === L.Node.TEXT_NODE
    }

    function f(i) {
        return e.assign(i, {
            wixComp: !0
        })
    }

    function y(i) {
        return e.isFunction(i.type) && i.props.wixComp
    }

    function P(e) {
        return e.replace(/^#/, "")
    }

    function v(i, o) {
        return i && !e.has(x, o.tagName.toLowerCase())
    }

    function R(i, o) {
        var t = e.get(i, "structure.layout", {});
        return t.width && (t.width = Math.min(o, t.width)), e.assign({}, i.structure, {
            dataItem: i.compData,
            propertiesItem: i.compProp,
            layout: t,
            id: i.structure.id,
            type: i.structure.componentType,
            structure: i.structure
        })
    }

    function b(e) {
        var i = this.props.siteData,
            o = this.props.id,
            t = R(e, this._getMediaRichTextComponentWidth()),
            n = t.id;
        i.registerMediaRichTextInnerComponent(o, n, t)
    }

    function I(i) {
        var o = i.id || m(i.dataQuery);
        return e.assign(i, {
            id: o
        })
    }
    var C = n.createClass({
            displayName: "wixMusicEmbed",
            mixins: [d],
            render: function() {
                return n.createElement("iframe", f(this.getIframeProps()))
            }
        }),
        L = o.fragment,
        k = r.textComponentsUtils,
        x = {
            wline: "div"
        };
    return {
        displayName: "MediaRichText",
        mixins: [r.textCompMixin],
        allowIframes: !0,
        convertCompDataTextToHTML: function(o) {
            this.componentDataQueryList = e.map(o.compData.componentDataList || [], P), this._compData = o.compData, this._componentHtml = this._componentHtml.replace(/\n|\r|\t/g, ""), this._componentHtml = k.convertDataQueryLinksIntoHtmlAnchors(this._componentHtml, o.compData.linkList, e.partialRight(i.linkRenderer.renderLink, o.siteData, o.rootNavigationInfo)), this._componentHtml = k.mobileTextTransformIfNeeded(this._componentHtml, {
                brightness: e.get(o, "compProp.brightness"),
                isMobileView: o.siteData.isMobileView(),
                scale: e.get(o, "structure.layout.scale"),
                fontGetter: o.siteData.getFont.bind(o.siteData),
                colorGetter: o.siteData.getColor.bind(o.siteData)
            }), this.renderedDataQueries = {}, this._componentHtml = this._convertComponentsPlaceHoldersToRenderedComponents(this._componentHtml), e.size(this.renderedDataQueries) !== e.size(this.componentDataQueryList) && e(this.componentDataQueryList).without(e.keys(this.renderedDataQueries)).forEach(function(e) {
                this.props.siteAPI.reportBI(a.MEDIA_RICH_MISSING_COMPONENT_PLACEHOLDER, {
                    dataQuery: "#" + e
                })
            }.bind(this))
        },
        _addToCompDataListIfMissing: function(i) {
            var o = P(i);
            e.includes(this.componentDataQueryList, o) || this.componentDataQueryList.push(o)
        },
        _convertNodeFragmentToReactElements: function(i) {
            if (i.nodeType === L.Node.ELEMENT_NODE) {
                var o = e.reduce(i.attributes, function(i, o) {
                    return "style" === o.name ? i.style = e.reduce(o.value.split(";"), function(i, o) {
                        var t = o.split(":");
                        return 2 === t.length && (i[e.camelCase(t[0])] = t[1]), i
                    }, {}) : "class" === o.name ? i.className = o.value : "frameborder" === o.name ? i.frameBorder = o.value : e.startsWith(o.name, "data-") ? i[o.name] = o.value : i[e.camelCase(o.name)] = o.value, i
                }, {});
                if (v(o.wixComp, i)) {
                    var t = _.call(this, o.wixComp, o.src);
                    return t ? this._handleInnerComps(t, o) : ""
                }
                var s = E(i) ? i.textContent : e.flatMap(i.childNodes, this._convertNodeFragmentToReactElements);
                return e.isArray(s) && s.length && e.every(s, y) ? s : n.createElement(p(i.tagName.toLowerCase()), e.assign(o, {
                    children: s
                }))
            }
            return i.nodeType === L.Node.TEXT_NODE ? i.textContent : ""
        },
        _convertComponentsPlaceHoldersToRenderedComponents: function(i) {
            var o = L.document.createElement("div");
            return o.innerHTML = i, e.map(o.childNodes, this._convertNodeFragmentToReactElements)
        },
        _validateAndFixGalleryCompData: function(i, o) {
            var t = e.clone(i),
                n = l.buildGalleryJsonFromCkData(o, this._compData.innerCompsData, i.style);
            return e.assign(t, n), T(t), t
        },
        _createInnerComponentProperties: function(e) {
            var i = this._createInnerComponentBasicProperties(e);
            return "wysiwyg.viewer.components.WPhoto" === e.componentType ? w(this._compData.linkList, i, e) : "wysiwyg.viewer.components.Video" === e.componentType ? M(i, e) : l.isGalleryComponent(e.componentType) ? this._validateAndFixGalleryCompData(i, e) : (this.props.siteAPI.reportBI(a.MEDIA_RICH_TEXT_UNSUPPORTED_COMPONENT, {
                wixCompJson: e
            }), i)
        },
        _getMediaRichTextComponentWidth: function() {
            return g.call(this) || e.get(this.props, "style.width") || 630
        },
        _createInnerComponentBasicProperties: function(i) {
            var o = I(i),
                t = s.componentPropsBuilder.getCompProps(o, this.props.siteAPI, this.props.rootId);
            return t.compData = t.compData || e.get(this._compData.innerCompsData, o.dataQuery), delete t.ref, u(t, o), S(o, t), this._calcInnerCompWidthAndHeight(o, t), t
        },
        _calcInnerCompWidthAndHeight: function(i, o) {
            var t = this._getMediaRichTextComponentWidth(),
                n = t,
                s = o.compData && o.compData.width,
                r = i.width;
            e.isNumber(r) ? n = this._getWidthMultiplier(i) * t : e.isNumber(s) && (n = Math.min(s, t)), o.style.width = n, i.dimsRatio ? o.style.height = o.style.width * i.dimsRatio : "wysiwyg.viewer.components.Video" === i.componentType && (o.style.height = .5625 * o.style.width)
        },
        _getWidthMultiplier: function(e) {
            return this.props.siteData.isMobileView() ? .99 : e.width
        },
        _handleInnerComps: function(e, i) {
            return "htmlComp" === e.componentType ? this._handleHtmlComp(e, i) : "music" === e.componentType ? this._handleMusicComp(e, i) : this._handleInnerSantaComponent(e)
        },
        _handleInnerSantaComponent: function(e) {
            var i = this._createInnerComponentProperties(e),
                o = t.compFactory.getCompClass(e.componentType, !0);
            return this.renderedDataQueries[P(e.dataQuery)] = 1, this._addToCompDataListIfMissing(e.dataQuery), b.call(this, i), o(f(i))
        },
        _handleHtmlComp: function(e, i) {
            var o, t = this.props.siteData.serviceTopology.staticHTMLComponentUrl;
            if (o = "website" === e.type ? "//" + function(e) {
                    return e.replace(/^(https?:)?\/\//, "")
                }(e.websiteUrl) : ("temp" === e.urlStatus ? "//0.htmlcomponentservice.com/" : t) + e.relativeUrl, "center" === e.align ? i.style = {
                    display: "block",
                    clear: "both",
                    margin: "0 auto"
                } : i.style = {
                    float: e.align
                }, i.src = o, i.sandbox = "allow-scripts allow-same-origin allow-popups", this.props.siteData.isMobileView() && e.dimsRatio) {
                if (i.width = "99%", e.dimsRatio > 1) {
                    var s = .99 * (this._getMediaRichTextComponentWidth() ? parseInt(this._getMediaRichTextComponentWidth(), 10) : 1) * e.dimsRatio;
                    i.height = s
                }
            } else i.width = e.width;
            return n.createElement("iframe", f(i))
        },
        _handleMusicComp: function(i, o) {
            var t = e.get(this.props.siteData, ["serviceTopology", "scriptsLocationMap", "wix-music-embed"]),
                s = /^[\w\-]+$/i,
                r = s.test(i.paymentId) || "" === i.paymentId;
            if (s.test(i.albumId) && s.test(i.presetId) && r) return o.src = t + "/index.html?albumId=" + i.albumId + "&paymentsId=" + i.paymentId + "&presetId=" + i.presetId + "&playerId=" + i.playerId + "&hideDetailedTrackInfo=true", this.props.siteData.isMobileView() && (o.src += "&isMobile=true"), o.sandbox = "allow-scripts allow-same-origin allow-popups", o.playerId = i.playerId, delete o.wixComp, o.width = "100%", n.createElement(C, o)
        },
        componentWillUnmount: function() {
            this.props.siteData.clearMediaRichTextInnerComponents(this.props.id)
        }
    }
}), define("components/components/table/table", ["lodash", "core", "react"], function(e, i, o) {
    function t() {
        var i = e.times(this.props.compProp.numOfRows, function(i) {
                var t = e.times(this.props.compProp.numOfColumns, function(e) {
                    var t = this.props.getBodyCell(e, i),
                        n = "cell_" + i + "_" + e,
                        s = {
                            style: this.props.compData.columnsStyle[e],
                            ref: n,
                            key: t && t.props.key || n
                        };
                    return o.DOM.td(s, t)
                }.bind(this));
                return o.DOM.tr({
                    key: "row_" + i,
                    ref: "row_" + i
                }, t)
            }.bind(this)),
            t = o.DOM.tr({
                key: "row_spacer",
                ref: "row_spacer",
                className: this.classSet({
                    spacer: !0
                })
            }, o.DOM.td({
                colSpan: "100%"
            }));
        return i.push(t), i
    }

    function n(i) {
        var t = i ? "header" : "footer",
            n = i ? this.props.getHeaderCell : this.props.getFooterCell;
        return e.times(this.props.compProp.numOfColumns, function(e) {
            var i = n(e),
                s = t + "_cell_" + e,
                r = {
                    ref: s,
                    key: i && i.props.key || s
                };
            return o.DOM.td(r, i)
        })
    }
    return {
        displayName: "Table",
        mixins: [i.compMixins.skinBasedComp],
        propType: {
            getBodyCell: o.PropTypes.func.isRequired,
            getHeaderCell: o.PropTypes.func.isRequired,
            getFooterCell: o.PropTypes.func.isRequired
        },
        getSkinProperties: function() {
            var e = {
                tableBody: {
                    children: t.call(this)
                }
            };
            return this.props.compProp.minHeight && (e[""] = {
                style: {
                    minHeight: this.props.compProp.minHeight,
                    width: "100%"
                }
            }, e.table = {
                style: {
                    height: this.props.compProp.minHeight
                }
            }), this.props.compProp.header && (e.tableHeader = {
                children: o.DOM.tr({
                    key: "row_header"
                }, n.call(this, !0))
            }), this.props.compProp.footer && (e.tableFooter = {
                children: o.DOM.tr({
                    key: "row_footer"
                }, n.call(this, !1))
            }), e
        }
    }
}), define("components/components/controller/controller", ["core"], function(e) {
    return {
        displayName: "Controller",
        mixins: [e.compMixins.skinBasedComp],
        statics: {
            useSantaTypes: !0
        },
        getSkinProperties: function() {
            return {}
        }
    }
}), define("components/components/grid/core/enums", [], function() {
    return {
        FieldType: Object.freeze({
            STRING: "string",
            DATE: "date",
            NUMBER: "number",
            IMAGE: "image",
            BOOLEAN: "bool",
            RICH_TEXT: "richText"
        }),
        SortDirection: Object.freeze({
            ASC: "asc",
            DESC: "desc",
            NONE: "none"
        }),
        UserSelectionType: Object.freeze({
            NONE: "none",
            CELL: "cell",
            ROW: "row"
        }),
        DataSourceType: Object.freeze({
            DYNAMIC: "dynamic",
            STATIC: "static"
        }),
        PaginationType: Object.freeze({
            PAGES: "pagination",
            SCROLL: "virtual",
            NONE: "normal"
        }),
        HorizontalAlignment: Object.freeze({
            LEFT: "left",
            CENTER: "center",
            RIGHT: "right"
        }),
        OverlayDisplayType: Object.freeze({
            NO_ROWS: "showNoRowsOverlay",
            LOADING: "showLoadingOverlay",
            HIDE: "hideOverlay"
        }),
        filtering: {
            NumericOperator: Object.freeze({
                EQUALS: "EQUALS",
                NOT_EQUALS: "NOT_EQUALS",
                LESS_THAN: "LESS_THAN",
                LESS_OR_EQUALS: "LESS_OR_EQUALS",
                GREATER_THAN: "GREATER_THAN",
                GREATER_OR_EQUALS: "GREATER_OR_EQUALS"
            }),
            StringOperator: Object.freeze({
                EQUALS: "EQUALS",
                NOT_EQUALS: "NOT_EQUALS",
                CONTAINS: "CONTAINS",
                STARTS_WITH: "STARTS_WITH",
                ENDS_WITH: "ENDS_WITH"
            }),
            DateOperator: Object.freeze({
                LAST_X_DAYS: "LAST_X_DAYS",
                LAST_X_WEEKS: "LAST_X_WEEKS",
                LAST_X_MONTHS: "LAST_X_MONTHS"
            })
        },
        ColumnLayout: Object.freeze({
            EQUAL: "equal",
            FIT_CONTENT: "fitContent",
            MANUAL: "manual"
        })
    }
}), define("components/components/grid/helpers/filtering", ["lodash", "components/components/grid/core/enums"], function(e, i) {
    var o = i.FieldType,
        t = i.filtering.NumericOperator,
        n = i.filtering.StringOperator,
        s = i.filtering.DateOperator,
        r = {},
        a = function(e, i) {
            return i === e
        },
        l = function(e, i) {
            return i !== e
        };
    r.NumericOperatorFuncs = {}, r.NumericOperatorFuncs[t.EQUALS] = a, r.NumericOperatorFuncs[t.NOT_EQUALS] = l, r.NumericOperatorFuncs[t.LESS_THAN] = function(e, i) {
        return i < e
    }, r.NumericOperatorFuncs[t.LESS_OR_EQUALS] = function(e, i) {
        return i <= e
    }, r.NumericOperatorFuncs[t.GREATER_THAN] = function(e, i) {
        return i > e
    }, r.NumericOperatorFuncs[t.GREATER_OR_EQUALS] = function(e, i) {
        return i >= e
    }, r.StringOperatorFuncs = {}, r.StringOperatorFuncs[n.EQUALS] = a, r.StringOperatorFuncs[n.NOT_EQUALS] = l, r.StringOperatorFuncs[n.CONTAINS] = function(i, o) {
        return e.includes(o, i)
    }, r.StringOperatorFuncs[n.STARTS_WITH] = function(i, o) {
        return e.startsWith(o, i)
    }, r.StringOperatorFuncs[n.ENDS_WITH] = function(i, o) {
        return e.endsWith(o, i)
    };
    return r.DateOperatorFuncs = {}, r.DateOperatorFuncs[s.LAST_X_DAYS] = function(e, i) {
        return new Date(i).getTime() > Date.now() - 864e5 * e
    }, r.DateOperatorFuncs[s.LAST_X_WEEKS] = function(e, i) {
        return new Date(i).getTime() > Date.now() - 864e5 * e * 7
    }, r.DateOperatorFuncs[s.LAST_X_MONTHS] = function(e, i) {
        var o = new Date,
            t = new Date(i);
        return 12 * t.getYear() + t.getMonth() > o.getMonth() + 12 * o.getYear() - e
    }, r.OperatorFuncs = {}, r.OperatorFuncs[o.NUMBER] = r.NumericOperatorFuncs, r.OperatorFuncs[o.STRING] = r.StringOperatorFuncs, r.OperatorFuncs[o.DATE] = r.DateOperatorFuncs, r.buildFilter = function(i) {
        return function(o) {
            return e.every(i, function(e, i) {
                return r.OperatorFuncs[e.type][e.operator](e.value, o[i])
            })
        }
    }, r
}), define("components/components/grid/wrappers/dataSource", ["lodash", "components/components/grid/core/enums", "components/components/grid/helpers/filtering"], function(e, i, o) {
    function t(i, t) {
        return e.every(i.compProp.filter, function(n, s) {
            var r = e.find(i.compProp.columns, {
                id: s
            });
            if (e.isUndefined(r)) return !0;
            var a = e.get(t, r.dataPath);
            return o.OperatorFuncs[n.type][n.operator](n.value, a)
        })
    }

    function n(o, n, s, r) {
        var a;
        return a = r === i.DataSourceType.DYNAMIC ? e.partial(s.dynamic(o, n.dataFetchContext)) : e.partial(s.static(o, e.partial(t, o))), {
            rowCount: -1,
            getRows: a
        }
    }
    return n
}), define("components/components/grid/core/state", ["lodash", "components/components/grid/helpers/filtering"], function(e, i) {
    function o(i, o) {
        var t = i;
        return e.isUndefined(o) || (t = e.filter(i, o)), {
            rows: t,
            rowsCount: t.length
        }
    }

    function t() {
        return {
            dataFetchContext: null,
            dataFetchHandler: null,
            uiState: null,
            agGridApi: null,
            currentPage: void 0
        }
    }
    return t.setGrid = function(e, i, o, n) {
        return t.destroyGrid(e), new i.Grid(n, o), e.agGridApi = o.api, e
    }, t.destroyGrid = function(e) {
        return null !== e.agGridApi && (e.agGridApi.destroy(), e.agGridApi = null), e
    }, t.setDataSource = function(e, i) {
        return e.agGridApi.setDatasource(i), e
    }, t.setRowData = function(e, t, n) {
        var s = o(t, i.buildFilter(n));
        return e.agGridApi.setRowData(s.rows), e
    }, t.updateUsingApi = function(i, o) {
        return e.forEach(o, function(e, o) {
            i.agGridApi[o].apply(i.agGridApi, e)
        }), i
    }, t.displayOverlay = function(e, i) {
        return e.agGridApi[i](), e
    }, t.setDataFetchHandler = function(e, i) {
        return e.dataFetchHandler = i, e
    }, t.handleFetchedData = function(i, t) {
        if (null !== i.dataFetchHandler) {
            var n = e.clone(t),
                s = i.dataFetchHandler;
            e.has(s, "startRow") && ((n = o(t.rows, s.filter)).rows = e.slice(n.rows, s.startRow, s.endRow)), s.successCallback(n.rows, n.rowsCount), i.dataFetchHandler = null
        }
        return i
    }, t.updateUIState = function(e, i, o) {
        return null === e.uiState && (e.uiState = {}), e.uiState[o] = i, e
    }, t.restoreUIState = function(e, i) {
        return t.updateUsingApi(e, i)
    }, t.saveCurrentPage = function(e) {
        return e.currentPage = e.agGridApi.paginationController.currentPage, e
    }, t.setCurrentPage = function(e, i) {
        return e.agGridApi.paginationController.currentPage = i, e.agGridApi.paginationController.loadPage(), e
    }, t.restoreCurrentPage = function(i) {
        return e.isUndefined(i.currentPage) ? i : t.setCurrentPage(i, i.currentPage)
    }, t
}), define("components/components/grid/wrappers/gridOptions", ["components/components/grid/core/enums"], function(e) {
    function i(o, t, n) {
        var s = null !== n.dataFetchContext,
            r = o.compProp,
            a = {
                rowBuffer: 0,
                rowHeight: i.getRowHeight(o),
                paginationOverflowSize: 0,
                paginationPageSize: r.pagination.rowsPerPage,
                enableSorting: !1,
                enableFilter: !1,
                suppressMovableColumns: !0,
                rowSelection: i.getRowSelection(r),
                suppressCellSelection: i.isCellSelectionSuppressed(r),
                enableServerSideSorting: s,
                enableServerSideFilter: s,
                onSortChanged: t.onSortChanged,
                onFilterChanged: t.onUoUFiltersChanged,
                onCellValueChanged: t.onCellEdit,
                onRowSelected: t.onRowSelect,
                onCellFocused: t.onCellSelect,
                rowData: null
            };
        return r.pagination.type !== e.PaginationType.NONE && (a.rowModelType = r.pagination.type), a
    }
    var o = e.UserSelectionType;
    return i.isCellSelectionSuppressed = function(e) {
        return e.userSelectionType !== o.CELL
    }, i.getRowHeight = function(e) {
        return e.compProp.rowHeight + (Number(e.compTheme.style.properties.rowDivider_w) || 0)
    }, i.getRowSelection = function(e) {
        if (e.userSelectionType === o.ROW) return "single"
    }, i
}), define("components/components/grid/helpers/either", ["lodash"], function(e) {
    var i = {
        Left: function(e) {
            return {
                left: e
            }
        },
        Right: function(e) {
            return {
                right: e
            }
        },
        isRight: e.partialRight(e.has, "right"),
        get: e.partialRight(e.get, "right"),
        getOrElse: function(e, o) {
            return i.isRight(e) ? i.get(e) : o
        }
    };
    return i
}), define("components/components/grid/wrappers/newValueHandler", ["lodash", "components/components/grid/helpers/either", "components/components/grid/core/enums"], function(e, i, o) {
    var t = o.FieldType,
        n = i.Left,
        s = i.Right,
        r = {
            validatorByFieldType: {}
        };
    return r.validatorByFieldType[t.DATE] = function(i) {
        return e.isNaN(Date.parse(i)) ? n(null) : s(new Date(i))
    }, r.validatorByFieldType[t.NUMBER] = function(i) {
        var o = Number(i);
        return e.isNaN(o) ? n(null) : s(o)
    }, r.getNextValue = function(o, t, n) {
        var s = t;
        return e.has(r.validatorByFieldType, o) && (s = i.getOrElse(r.validatorByFieldType[o](t), n)), s
    }, r.update = function(i, o) {
        var t = r.getNextValue(i.type, o.newValue, o.oldValue);
        e.set(o.data, i.dataPath, t)
    }, r
}), define("components/components/grid/wrappers/dateFilter", ["lodash", "components/components/grid/core/enums"], function(e, i) {
    function o() {}
    var t = i.filtering.DateOperator,
        n = i.filtering.DateOperatorFuncs;
    return o.prototype.init = function(i) {
        this.eGui = window.document.createElement("div"), this.eGui.innerHTML = '<div><select class="date-filter-select ag-filter-select">' + e.map(t, function(e, i) {
            return '<option value="' + i + '">' + e + "</option>"
        }).join("") + '</select></div><div><input type="number" class="date-filter-amount ag-filter-filter" min="0" placeholder="Filter..." /></div>', this.select = this.eGui.querySelector(".date-filter-select"), this.input = this.eGui.querySelector(".date-filter-amount"), this.select.addEventListener("change", i.filterChangedCallback), this.input.addEventListener("change", i.filterChangedCallback)
    }, o.prototype.getGui = function() {
        return this.eGui
    }, o.prototype.doesFilterPass = function(i) {
        var o = Number(this.input.value) || 0,
            t = this.select.value;
        return !!e.isUndefined(n[t]) || n[t](o, i.data.date)
    }, o.prototype.isFilterActive = function() {
        return this.select.value !== t.NONE
    }, o.prototype.getApi = function() {
        return {
            getModel: function() {
                return {
                    type: i.FieldType.DATE,
                    operator: this.select.value,
                    value: Number(this.input.value)
                }
            }.bind(this),
            setModel: function(o) {
                e.isUndefined(o) && (o = {
                    type: i.FieldType.DATE,
                    operator: t.NONE,
                    value: ""
                }), this.select.value = o.operator, this.input.value = o.value
            }.bind(this)
        }
    }, o
}), define("components/components/grid/wrappers/cellRenderers", ["lodash", "utils", "components/components/grid/core/enums"], function(e, i, o) {
    function t(e, i, o, t) {
        if (/^image:\/\//.test(i)) {
            var n = /^image:\/\/([^\/]*)\/([^\/]*)\/([^\/]*)\/([^\/]*)/,
                s = i.match(n),
                r = s[1],
                a = s[2];
            return e(a) + "/" + r + "/fit/w_" + o + ",h_" + t + "/" + a
        }
        return i
    }

    function n(e, i) {
        var o = e.compProp.columns,
            t = i.column.colId,
            n = window.document.createElement("div");
        return n.classList.add("cell-content-wrapper"), d(o, t) ? n.classList.add("first-column") : p(o, t) && n.classList.add("last-column"), n
    }

    function s() {
        var e = window.document.createElement("div");
        return e.classList.add("ag-cell-text"), e
    }

    function r(i, o, t) {
        var n = window.document.createElement("a"),
            s = c.renderLink(i.value.link, o, t);
        return e.assign(n, s), n.classList.add("ag-cell-link"), n
    }

    function a(e, i, o) {
        return (u.byFieldType[e] || u.valueRenderer)(i, o)
    }

    function l(e) {
        return e !== m.IMAGE
    }

    function d(e, i) {
        return e[0].id === i
    }

    function p(e, i) {
        return e[e.length - 1].id === i
    }

    function g(i, o) {
        return !(e.isUndefined(i.linkPath) || e.isEmpty(o.value.link))
    }
    var c = i.linkRenderer,
        _ = i.dateTimeUtils,
        m = o.FieldType,
        u = {
            byFieldType: {}
        };
    return u.byFieldType[m.IMAGE] = function(i, o) {
        var n = i.getMediaFullStaticUrl,
            s = Math.floor(o.column.actualWidth),
            r = o.node.rowHeight,
            a = t(n, o.value.data, s, r),
            l = window.document.createElement("img");
        return l.classList.add("ag-cell-image"), e.isNull(a) || (l.src = a), l
    }, u.byFieldType[m.DATE] = function(e, i) {
        var o = e.compProp.dateFormat,
            t = new Date(i.value.data),
            n = _.dateFormat(t, o);
        return window.document.createTextNode(n)
    }, u.byFieldType[m.BOOLEAN] = function(e, i) {
        var o = i.value.data ? "Yes" : "No";
        return window.document.createTextNode(o)
    }, u.byFieldType[m.RICH_TEXT] = function(e, i) {
        var o = window.document.createElement("div");
        return o.classList.add("ag-cell-richtext"), o.innerHTML = i.value.data, o
    }, u.valueRenderer = function(i, o) {
        var t = e.get(o, "value.data");
        return window.document.createTextNode(t)
    }, u.render = e.curry(function(i, o, t) {
        if (e.isUndefined(t.value.data)) return "";
        var d, p;
        if (p = d = n(i, t), g(o, t)) {
            var c = r(t, i.linkRenderInfo, i.rootNavigationInfo);
            d.appendChild(c), d = c
        }
        if (l(o.type)) {
            var _ = window.document.createElement("div");
            _.classList.add("cell-text-wrapper");
            var m = s();
            _.appendChild(m), d.appendChild(_), d = m
        }
        var u = a(o.type, i, t);
        return d.appendChild(u), p
    }), u
}), define("components/components/grid/wrappers/columnDefinition", ["lodash", "components/components/grid/core/enums", "components/components/grid/wrappers/newValueHandler", "components/components/grid/wrappers/dateFilter", "components/components/grid/wrappers/cellRenderers"], function(e, i, o, t, n) {
    function s(i, t) {
        var r = t.type,
            a = s.byFieldType[r],
            l = e.assign({
                colId: t.id,
                field: t.id,
                headerName: t.label,
                width: s.getColumnWidth(i, t),
                hide: !t.visible,
                valueGetter: s.getValueGetter(t),
                newValueHandler: e.partial(o.update, t),
                cellRenderer: n.render(i, t),
                editable: s.getEditable(i.compProp, a)
            }, a);
        return i.isExperimentOpen("sv_gridUoUEdit") || e.assign(l, {
            editable: !1
        }), l
    }

    function r(e, i) {
        return new Date(e) - new Date(i)
    }
    var a = i.FieldType;
    return s.getValueGetter = function(i) {
        return function(o) {
            return {
                data: e.get(o.data, i.dataPath),
                link: e.get(o.data, i.linkPath + "_linkObj"),
                toString: function() {
                    return this.data.toString()
                }
            }
        }
    }, s.getEditable = function(i, o) {
        return i.allowUserEditing && !e.isUndefined(o) && o.editable
    }, s.getColumnWidth = function(o, t) {
        switch (o.compProp.columnLayout) {
            case i.ColumnLayout.EQUAL:
                return 0 === o.compProp.columns.length ? 0 : e.get(o, "structure.layout.width") / o.compProp.columns.length;
            default:
                return t.width
        }
    }, s.byFieldType = {}, s.byFieldType[a.STRING] = {
        filter: "text",
        editable: !0
    }, s.byFieldType[a.NUMBER] = {
        filter: "number",
        editable: !0
    }, s.byFieldType[a.DATE] = {
        filter: t,
        comparator: r,
        editable: !0
    }, s
}), define("components/components/grid/apiCallMaps/selectionCallMap", ["lodash", "components/components/grid/core/enums"], function(e, i) {
    function o(o) {
        return e.has(o, "columnId") ? i.UserSelectionType.CELL : i.UserSelectionType.ROWS
    }

    function t(e, i) {
        Number(i.id) === e && i.setSelected(!0, !0)
    }

    function n(i) {
        return {
            forEachNode: [e.partial(t, i)]
        }
    }

    function s(e, i, o) {
        var t = Number(o.id),
            n = e % i,
            s = t % i,
            r = t - s <= e && t - s + i > e;
        o.childIndex === n && r && o.setSelected(!0, !0)
    }

    function r(i, o) {
        return {
            forEachNodeAfterFilterAndSort: [e.partial(s, i, o.rowsPerPage)]
        }
    }

    function a(e) {
        return {
            setFocusedCell: [e.rowIndex, e.columnId]
        }
    }

    function l(e, t) {
        return o(e) === i.UserSelectionType.CELL ? a(e) : d[t.type](Number(e.rowIndex), t)
    }
    var d = {};
    return d[i.PaginationType.NONE] = r, d[i.PaginationType.PAGES] = r, d[i.PaginationType.SCROLL] = n, Object.freeze(d), l
}), define("components/components/grid/apiCallMaps/updateApiCallMap", ["lodash", "components/components/grid/wrappers/columnDefinition", "components/components/grid/apiCallMaps/selectionCallMap"], function(e, i, o) {
    function t(o, t) {
        return e.map(o, e.partial(i, t))
    }

    function n(e, i) {
        return e ? i.compProp.headerHeight : 0
    }

    function s(i, o) {
        return e.reduce(s.propertyUpdateOrder, function(t, n) {
            return e.has(i, n) && e.assign(t, s.propertyToCall[n](i[n], o)), t
        }, {})
    }
    return s.invoke = function(e) {
        return function(i) {
            var o = {};
            return o[e] = [i], o
        }
    }, s.propertyUpdateOrder = ["columns", "headerHeight", "sorting", "userSelection", "showHeader"], s.propertyToCall = {
        columns: e.flow(t, s.invoke("setColumnDefs")),
        headerHeight: s.invoke("setHeaderHeight"),
        showHeader: e.flow(n, s.invoke("setHeaderHeight")),
        sorting: s.invoke("setSortModel"),
        userSelection: function(e, i) {
            return o(e, i.compProp.pagination)
        }
    }, s
}), define("components/components/grid/apiCallMaps/uiStateApiCallMap", ["lodash", "components/components/grid/apiCallMaps/selectionCallMap"], function(e, i) {
    function o(i, t) {
        var n = o.callByProperty(t);
        return e.reduce(i, function(i, o, t) {
            return e.assign(i, n[t](o))
        }, {})
    }
    return o.callByProperty = function(e) {
        return {
            userFilter: function(e) {
                return {
                    setFilterModel: [e]
                }
            },
            userSelection: function(o) {
                i(o, e.pagination)
            }
        }
    }, o.uiProperties = ["userFilter", "userSelection"], o.getUIStateProps = function(i) {
        return e.pick(i, o.uiProperties)
    }, o
}), define("components/components/grid/core/actions", ["lodash", "components/components/grid/wrappers/dataSource", "components/components/grid/core/state", "components/components/grid/wrappers/gridOptions", "components/components/grid/apiCallMaps/updateApiCallMap", "components/components/grid/apiCallMaps/uiStateApiCallMap", "components/components/grid/core/enums"], function(e, i, o, t, n, s, r) {
    var a = r.UserSelectionType;
    return {
        INIT: o,
        CREATE_GRID: function(e, i, n, s) {
            return function(r) {
                var a = t(i, n, r);
                return o.setGrid(r, e, a, s)
            }
        },
        UPDATE_GRID_USING_API: e.flow(n, e.curryRight(o.updateUsingApi)),
        DESTROY_GRID: o.destroyGrid,
        SET_DATA_FETCH_HANDLER: function(e) {
            return function(i) {
                return i = o.setDataFetchHandler(i, e), o.displayOverlay(i, r.OverlayDisplayType.LOADING)
            }
        },
        HANDLE_FETCHED_DATA: function(e) {
            return function(i) {
                return i = o.handleFetchedData(i, e), o.displayOverlay(i, r.OverlayDisplayType.HIDE)
            }
        },
        SET_DATA: function(e, t, n) {
            return function(s) {
                if (e.compProp.pagination.type === r.PaginationType.NONE) return o.setRowData(s, e.compData.rows, e.compProp.filter);
                var a = i(e, s, t, n);
                return o.setDataSource(s, a)
            }
        },
        UPDATE_UI_STATE: function(i) {
            return e.partial(e.reduce, s.getUIStateProps(i), o.updateUIState)
        },
        RESTORE_UI_STATE: function(e) {
            return function(i) {
                var t = s(i.uiState, e);
                return o.restoreUIState(i, t)
            }
        },
        SAVE_CURRENT_PAGE: o.saveCurrentPage,
        RESTORE_CURRENT_PAGE: o.restoreCurrentPage,
        SET_CURRENT_PAGE: e.curryRight(o.setCurrentPage),
        CLEAR_SELECTION: function(e) {
            return function(i) {
                return e === a.CELL ? o.updateUsingApi(i, {
                    setFocusedCell: [-1, -1]
                }) : e === a.ROW ? o.updateUsingApi(i, {
                    deselectAll: []
                }) : o.updateUsingApi(i, {
                    setFocusedCell: [-1, -1],
                    deselectAll: []
                })
            }
        }
    }
}), define("components/components/grid/core/propsInspector", ["lodash", "components/components/grid/apiCallMaps/updateApiCallMap", "components/components/grid/apiCallMaps/uiStateApiCallMap", "components/components/grid/core/enums"], function(e, i, o, t) {
    function n(e, i) {
        return i.compProp.columnLayout === t.ColumnLayout.EQUAL
    }

    function s(e, i) {
        return i.compTheme.style.properties[a] !== e.compTheme.style.properties[a]
    }

    function r(i, o) {
        var t = e(o.compProp).pick(r.agGridAffectingProps).reduce(function(o, t, n) {
            return e.isEqual(t, i.compProp[n]) || (o[n] = t), o
        }, {});
        return t = e.reduce(r.propChangeTests, function(t, n) {
            if (n.test(i, o)) {
                var s = {};
                s[n.mappedProp] = o.compProp[n.mappedProp], e.assign(t, s)
            }
            return t
        }, t), {
            props: t,
            dataChanged: i.compData.revision !== o.compData.revision
        }
    }
    var a = "rowDivider_w";
    return r.propChangeTests = [{
        test: n,
        mappedProp: "columns"
    }, {
        test: s,
        mappedProp: "rowHeight"
    }], r.agGridAffectingProps = ["allowUserEditing", "allowUserFiltering", "allowUserSorting", "cellPadding", "columnLayout", "columns", "dataSource", "dateFormat", "headerHeight", "heightLayout", "horizontalAlignment", "linkTarget", "pagination", "rowHeight", "showHeader", "userFilter", "userSelection", "userSelectionType"], r.apiProperties = i.propertyUpdateOrder, r.hasOnlyApiProps = function(i) {
        return e(i.props).keys().difference(r.apiProperties).isEmpty()
    }, r.didDataSourceChange = function(i) {
        return e.has(i.props, "dataSource") || e.has(i.props, "pagination")
    }, r.didDataChange = function(e) {
        return e.dataChanged
    }, r.didUIPropsChange = function(i) {
        return !e(i.props).keys().intersection(o.uiProperties).isEmpty()
    }, r.isEmpty = function(i) {
        return e.isEmpty(i.props) && !i.dataChanged
    }, r.hasPagesPagination = function(e) {
        return e.compProp.pagination.type === t.PaginationType.PAGES
    }, r
}), define("components/components/grid/helpers/filterModelConverter", ["lodash", "components/components/grid/core/enums"], function(e, i) {
    var o = i.FieldType,
        t = i.filtering.NumericOperator,
        n = i.filtering.StringOperator,
        s = {
            convert: function(i, o) {
                return e.mapValues(i, function(i, t) {
                    var n = e.find(o, {
                        id: t
                    }).type;
                    return e.has(s.operatorMap, n) ? {
                        type: n,
                        operator: s.operatorMap[n][i.type],
                        value: i.filter
                    } : i
                })
            }
        };
    return s.operatorMap = {}, s.operatorMap[o.NUMBER] = {
        1: t.EQUALS,
        2: t.NOT_EQUALS,
        3: t.LESS_THAN,
        4: t.LESS_OR_EQUALS,
        5: t.GREATER_THAN,
        6: t.GREATER_OR_EQUALS
    }, s.operatorMap[o.STRING] = {
        1: n.CONTAINS,
        2: n.EQUALS,
        3: n.NOT_EQUALS,
        4: n.STARTS_WITH,
        5: n.ENDS_WITH
    }, s
}), define("components/components/grid/helpers/rowHelpers", ["lodash"], function(e) {
    return {
        createRow: function(i, o, t, n) {
            var s = {};
            return e.forEach(i, function(i) {
                var r = e.get(o, i.dataPath);
                n && i.id === t && (r = n), e.set(s, i.dataPath, r)
            }), s
        },
        getRowIndex: function(i, o) {
            return e.findIndex(i.compData.rows, o)
        }
    }
}), define("components/components/grid/helpers/boolSet", ["lodash"], function(e) {
    var i = e.flow(e.partialRight(e.chunk, 2), e.partialRight(e.filter, e.last), e.partialRight(e.map, e.head));
    return Object.freeze(i), i
}), define("components/components/grid/core/grid", ["lodash", "bluebird", "components/components/grid/core/actions", "components/components/grid/core/propsInspector", "components/components/grid/helpers/filterModelConverter", "components/components/grid/helpers/rowHelpers", "components/components/grid/core/enums", "components/components/grid/helpers/boolSet"], function(e, i, o, t, n, s, r, a) {
    function l(e) {
        return {
            state: null,
            foreign: e
        }
    }
    var d = r.UserSelectionType;
    l.mutateState = function(i, o) {
        i.state = e.reduce(o, function(e, i) {
            return i(e)
        }, i.state)
    }, l.loadAgGridModule = null, l.ensureAgGridModule = function(o) {
        null === l.loadAgGridModule && (l.loadAgGridModule = new i(e.partial(requirejs, ["ag-grid"]))), l.loadAgGridModule.then(o)
    }, l.init = function(e, i, t) {
        l.ensureAgGridModule(function(n) {
            var s = [o.INIT, o.CREATE_GRID(n, i, l.bindGridEventHandlers(e, i), t), o.UPDATE_GRID_USING_API(i.compProp, i), o.SET_DATA(i, l.bindRowGetters(e), i.compProp.dataSource.type)];
            l.mutateState(e, s)
        })
    }, l.update = function(e, i, n, s) {
        l.ensureAgGridModule(function(r) {
            var d = t(i, n);
            if (!t.isEmpty(d)) {
                var p = t.hasOnlyApiProps(d),
                    g = t.hasPagesPagination(i) && t.hasPagesPagination(n),
                    c = t.didDataSourceChange(d),
                    _ = t.didDataChange(d),
                    m = t.didUIPropsChange(d),
                    u = p ? d.props : n.compProp,
                    S = a([o.SAVE_CURRENT_PAGE, !p && g, o.CREATE_GRID(r, n, l.bindGridEventHandlers(e, n), s), !p, o.UPDATE_GRID_USING_API(u, n), !0, o.SET_DATA(n, l.bindRowGetters(e), n.compProp.dataSource.type), c || !p, o.HANDLE_FETCHED_DATA({
                        rows: n.compData.rows,
                        rowsCount: n.compData.rowsCount
                    }), !c && _, o.RESTORE_CURRENT_PAGE, !p && g, o.UPDATE_UI_STATE(d.props), m, o.RESTORE_UI_STATE(n.compProp), !m]);
                l.mutateState(e, S)
            }
        })
    }, l.destroy = function(e) {
        l.mutateState(e, [o.DESTROY_GRID])
    };
    var p = {
        EDITOR: "editor",
        PREVIEW: "preview"
    };
    return l.handleViewModeChange = function(e, i, n) {
        var s = t.hasPagesPagination(i);
        n === p.EDITOR && l.mutateState(e, a([o.CLEAR_SELECTION(), !0, o.SET_CURRENT_PAGE(0), s]))
    }, l.bindRowGetters = function(e) {
        return {
            static: function(i, t) {
                return function(n) {
                    l.mutateState(e, [o.SET_DATA_FETCH_HANDLER({
                        successCallback: n.successCallback,
                        startRow: n.startRow,
                        endRow: n.endRow,
                        filter: t
                    }), o.HANDLE_FETCHED_DATA({
                        rows: i.compData.rows
                    })])
                }
            },
            dynamic: function(i) {
                return function(t) {
                    l.mutateState(e, [o.SET_DATA_FETCH_HANDLER({
                        successCallback: t.successCallback
                    })]);
                    var s = n.convert(t.filterModel, i.compProp.columns),
                        r = {
                            name: "fetchData",
                            id: i.id,
                            startRow: t.startRow,
                            endRow: t.endRow,
                            sorting: t.sortModel,
                            filter: s
                        };
                    e.foreign.handleAction("fetchData", r)
                }
            }
        }
    }, l.bindGridEventHandlers = function(i, t) {
        return {
            onSortChanged: function() {
                if (null !== i.state) {
                    var e = i.state.agGridApi.getSortModel();
                    i.foreign.updateProps({
                        sorting: e
                    })
                }
            },
            onUoUFiltersChanged: function() {
                var e = i.state.agGridApi.getFilterModel();
                l.mutateState(i, [o.UPDATE_UI_STATE({
                    userFilter: e
                })])
            },
            onRowSelect: function(n) {
                if (n.node.selected) {
                    var s = n.node.childIndex || n.node.id,
                        r = e.map(t.compProp.columns, "dataPath"),
                        a = e.pick(n.node.data, r),
                        p = {
                            rowIndex: s,
                            rowData: JSON.stringify(a)
                        };
                    i.foreign.updateProps({
                        userSelection: p
                    }), l.mutateState(i, [o.UPDATE_UI_STATE({
                        userSelection: p
                    }), o.CLEAR_SELECTION(d.CELL)]), i.foreign.handleAction("rowSelect", p)
                }
            },
            onCellSelect: function(t) {
                if (t.column) {
                    var n = e.find(this.api.getRenderedNodes(), {
                            id: t.rowIndex.toString()
                        }),
                        s = this.api.getValue(t.column.colId, n),
                        r = {
                            rowIndex: t.rowIndex,
                            columnId: t.column.colId,
                            cellData: JSON.stringify(s)
                        };
                    l.mutateState(i, [o.UPDATE_UI_STATE({
                        userSelection: r
                    }), o.CLEAR_SELECTION(d.ROW)]), i.foreign.handleAction("cellSelect", r)
                }
            },
            onCellEdit: function(o) {
                var n = s.createRow(t.compProp.columns, o.data, o.colDef.colId, o.oldValue),
                    r = s.createRow(t.compProp.columns, o.data, o.colDef.colId, o.newValue),
                    a = s.getRowIndex(t, n),
                    l = e.map(t.compData.rows, function(e, i) {
                        return i === a ? r : e
                    });
                i.foreign.updateData({
                    rows: l
                }), i.foreign.handleAction("cellEdit", {
                    cellData: o.newValue,
                    rowIndex: a,
                    columnId: o.colDef.colId
                })
            }
        }
    }, l
}), define("components/components/grid/gridComponent", ["lodash", "core", "santaProps", "components/components/grid/core/grid", "components/components/grid/core/enums"], function(e, i, o, t, n) {
    return {
        displayName: "Grid",
        mixins: [i.compMixins.skinBasedComp, i.compMixins.runTimeCompData],
        propTypes: {
            compData: o.Types.Component.compData.isRequired,
            compProp: o.Types.Component.compProp.isRequired,
            linkRenderInfo: o.Types.Link.linkRenderInfo,
            isViewerMode: o.Types.isViewerMode,
            getMediaFullStaticUrl: o.Types.ServiceTopology.getMediaFullStaticUrl,
            renderFlags: o.Types.RenderFlags.all,
            isExperimentOpen: o.Types.isExperimentOpen
        },
        statics: {
            useSantaTypes: !0
        },
        getClasses: function() {
            var e = {};
            return e["ag-fresh"] = !0, e["hide-pagination-panel"] = 0 === this.props.compData.rows.length, e["align-text-left"] = this.props.compProp.horizontalAlignment === n.HorizontalAlignment.LEFT, e["align-text-right"] = this.props.compProp.horizontalAlignment === n.HorizontalAlignment.RIGHT, e["align-text-center"] = this.props.compProp.horizontalAlignment === n.HorizontalAlignment.CENTER, e["disable-horizontal-scroll"] = this.props.compProp.columnLayout === n.ColumnLayout.EQUAL, e["select-rows"] = this.props.compProp.userSelectionType === n.UserSelectionType.ROW, e["select-cells"] = this.props.compProp.userSelectionType === n.UserSelectionType.CELL, e["hide-header"] = !this.props.compProp.showHeader, e
        },
        componentDidMount: function() {
            this.grid = t(this), this.componentViewMode = this.props.renderFlags.componentViewMode;
            var i = e.isFunction(this.transformPropsWithPreviewDummyData) ? this.transformPropsWithPreviewDummyData(this.props) : this.props;
            t.init(this.grid, i, this.refs.grid)
        },
        componentWillReceiveProps: function(i) {
            var o = i.renderFlags.componentViewMode !== this.componentViewMode,
                n = e.isFunction(this.transformPropsWithIncompleteData) ? this.transformPropsWithIncompleteData(i, o) : i;
            o && (this.componentViewMode = n.renderFlags.componentViewMode, t.handleViewModeChange(this.grid, n, this.componentViewMode)), t.update(this.grid, this.props, n, this.refs.grid, this.componentViewMode)
        },
        getSkinProperties: function() {
            var i = this.getClasses();
            return {
                "": {
                    className: e.reduce(i, function(e, i, o) {
                        return i && (e += " " + o), e
                    }, "")
                }
            }
        },
        componentWillUnmount: function() {
            t.destroy(this.grid)
        }
    }
}), define("components/core/svgShapeStylesCollector", ["lodash", "core", "utils"], function(e, i, o) {
    function t(i, t, n, s) {
        var r = e.get(i, "styleItem.id") || e.get(i, "structure.styleId");
        r && (s[r] = o.santaTypes.shortenStyleId(i.structure.skin));
        var a = e.get(i.structure, ["modes", "overrides"]);
        e.forEach(a, function(e) {
            var n = e.styleId;
            n && t[n] && (s[n] = o.santaTypes.shortenStyleId(i.structure.skin))
        })
    }
    i.styleCollector.registerClassBasedStyleCollector("wysiwyg.viewer.components.svgshape.SvgShape", t), i.styleCollector.registerClassBasedStyleCollector("wysiwyg.viewer.components.PopupCloseIconButton", t)
}), define("components/core/mediaRichTextStylesCollector", ["lodash", "skins", "core", "utils"], function(e, i, o, t) {
    var n = i.skins;
    o.styleCollector.registerClassBasedStyleCollector("wysiwyg.viewer.components.MediaRichText", function(e, i, o, s) {
        for (var r, a = /(<img[^>]*wix-comp="([^"]+)"[^>]*>)/g; r = a.exec(e.dataItem.text);) {
            var l = JSON.parse(r[2].replace(/&quot;/g, '"')),
                d = "";
            l.skin && n[l.skin] && (d = l.skin), d && !s[d] && (s[t.santaTypes.shortenStyleId(d)] = e.structure.skin)
        }
    })
}), define("components/core/dialogsStylesCollector", ["lodash", "core", "utils"], function(e, i, o) {
    function t(e, i, t, n) {
        n.b1 = o.santaTypes.shortenStyleId(e.structure.skin)
    }
    i.styleCollector.registerClassBasedStyleCollector("wysiwyg.viewer.components.dialogs.EnterPasswordDialog", t), i.styleCollector.registerClassBasedStyleCollector("wysiwyg.viewer.components.dialogs.NotificationDialog", t), i.styleCollector.registerClassBasedStyleCollector("wysiwyg.viewer.components.dialogs.siteMemberDialogs.MemberLoginDialog", t), i.styleCollector.registerClassBasedStyleCollector("wysiwyg.viewer.components.dialogs.siteMemberDialogs.RequestPasswordResetDialog", t), i.styleCollector.registerClassBasedStyleCollector("wysiwyg.viewer.components.dialogs.siteMemberDialogs.ResetPasswordDialog", t), i.styleCollector.registerClassBasedStyleCollector("wysiwyg.viewer.components.dialogs.siteMemberDialogs.SignUpDialog", t)
}), define("components/core/appControllerStyleCollector", ["lodash", "core", "utils"], function(e, i, o) {
    function t(e, i, t, s) {
        s[o.santaTypes.shortenStyleId(n)] = n
    }
    var n = "platform.components.skins.controllerIconAndNameSkin";
    i.styleCollector.registerClassBasedStyleCollector("platform.components.AppController", t)
}), define("components/behaviors/compBehaviorHandler", ["lodash"], function(e) {
    function i(i, o, t) {
        var n = o.getSiteAspect("behaviorsAspect");
        e.forEach(i, function(e) {
            n.registerBehavior(e, t.callback)
        }), o.forceUpdate()
    }
    return {
        handle: i
    }
}), define("components/behaviors/compBehaviorsRegistrar", ["core", "components/behaviors/compBehaviorHandler"], function(e, i) {
    e.behaviorHandlersFactory.registerHandler("comp", i)
}), define("components/behaviors/animationBehaviorHandler", ["lodash", "core"], function(e, i) {
    function o(e, o) {
        i.animationsService.hideElementsByAnimationType(o, [e])
    }

    function t(e, o) {
        i.animationsService.revertHideElementsByAnimations(o, [e])
    }

    function n(o, t, n) {
        var s = t.getSiteData(),
            r = n.group || n.action,
            a = t.getRuntimeDal();
        o = e(o).filter(function(e) {
            return !(a.getCompProps(e.targetId) || {}).isCollapsed
        }).map(function(i) {
            return e.omit(e.defaultsDeep({}, i, e.find(s.animations.viewerDefaults, {
                name: i.name
            })), "action")
        }).value(), t.getSiteData().isMobileView() ? e.defer(function() {
            e.get(n, "callback", e.noop)()
        }) : i.animationsService.playAnimations(t, r, o, !0, n.callback || e.noop)
    }

    function s(e, i) {
        return !(i.getSiteData().isMobileDevice() || i.getSiteData().isMobileView())
    }
    return {
        handle: n,
        handlePreCondition: o,
        cancelPreCondition: t,
        isEnabled: s
    }
}), define("components/behaviors/animationBehaviorsRegistrar", ["core", "components/behaviors/animationBehaviorHandler"], function(e, i) {
    e.behaviorHandlersFactory.registerHandler("animation", i)
}), define("components", ["facebookShare", "vKShareButton", "youTubeSubscribeButton", "itunesButton", "skypeCallButton", "fileUploader", "wixSkinOnly", "pinItPinWidget", "siteButton", "popupCloseTextButton", "image", "zoomedImage", "wPhoto", "clipArt", "displayer", "matrixGallery", "wRichText", "paginatedGridGallery", "container", "radioButton", "radioGroup", "headerContainer", "footerContainer", "screenWidthContainer", "documentMedia", "adminLoginButton", "backgroundCommon", "balata", "datePicker", "contactForm", "subscribeForm", "textArea", "video", "loginButton", "googleMap", "soundCloudWidget", "paypalButton", "imageButton", "linkBar", "comboBoxInput", "spotifyPlayer", "spotifyFollow", "twitterFeed", "backToTopButton", "svgShape", "svgCommon", "facebookLike", "facebookComments", "facebookLikeBox", "flickrBadgeWidget", "rssButton", "textInput", "tinyMenu", "groupContainer", "wGooglePlusOne", "pinterestPinIt", "pinterestFollow", "wTwitterFollow", "wTwitterTweet", "audioPlayer", "column", "htmlComponent", "deadComponent", "mediaPlayer", "mediaControls", "sliderGallery", "slideShowGallery", "singleAudioPlayer", "quickActionBar", "quickActionBarItem", "boxSlideShowSlide", "stripSlideShowSlide", "page", "bgImageStrip", "popupContainer", "stripContainer", "stripColumnsContainer", "siteBackground", "hoverBox", "exitMobileModeButton", "tpaGalleries", "internalMarkings", "messageView", "flashComponent", "stripSlideShow", "mediaZoom", "mobileActionsMenu", "imageZoom", "imageZoomDisplayer", "verticalMenu", "dropDownMenu", "menuButton", "infoTip", "pageGroup", "verticalAnchorsMenu", "disqusComments", "components/components/masterPage/masterPage", "components/components/imageButtonWithText/imageButtonWithText", "components/components/mobileMediaZoom/mobileMediaZoom", "components/components/erasableTextInput/erasableTextInput", "components/components/touchMediaZoom/touchMediaZoomSlideshow", "components/components/touchMediaZoom/touchMediaZoomItem", "components/components/inputWithValidation/inputWithValidation", "components/components/wixAppsImageButton/wixAppsImageButton", "components/components/colorOption/colorOption", "components/components/mobileColorOption/mobileColorOption", "components/components/ebayItemsBySeller/ebayItemsBySeller", "components/components/icon/icon", "components/components/numericStepper/numericStepper", "components/components/optionsListInput/optionsListInput", "components/components/selectOptionsList/selectOptionsList", "components/components/dialogs/notificationDialog/notificationDialog", "components/components/dialogs/creditsDialog/creditsDialog", "components/components/dialogs/enterPasswordDialog/enterPasswordDialog", "components/components/dialogs/siteMemberDialogs/signUpDialog/signUpDialog", "components/components/dialogs/siteMemberDialogs/memberLoginDialog/memberLoginDialog", "components/components/dialogs/siteMemberDialogs/requestPasswordResetDialog/requestPasswordResetDialog", "components/components/dialogs/siteMemberDialogs/resetPasswordDialog/resetPasswordDialog", "components/components/toggle/toggle", "components/components/textOption/textOption", "components/components/mobileTextOption/mobileTextOption", "components/components/mediaRichText/mediaRichText", "components/components/table/table", "checkbox", "components/components/controller/controller", "components/components/grid/gridComponent", "core", "compUtils", "components/core/svgShapeStylesCollector", "components/core/mediaRichTextStylesCollector", "components/core/dialogsStylesCollector", "components/core/appControllerStyleCollector", "components/behaviors/compBehaviorsRegistrar", "components/behaviors/animationBehaviorsRegistrar"], function(e, i, o, t, n, s, r, a, l, d, p, g, c, _, m, u, S, h, M, w, T, E, f, y, P, v, R, b, I, C, L, k, x, D, F, A, O, N, B, U, W, G, z, H, V, K, j, Z, q, X, Y, Q, $, J, ee, ie, oe, te, ne, se, re, ae, le, de, pe, ge, ce, _e, me, ue, Se, he, Me, we, Te, Ee, fe, ye, Pe, ve, Re, be, Ie, Ce, Le, ke, xe, De, Fe, Ae, Oe, Ne, Be, Ue, We, Ge, ze, He, Ve, Ke, je, Ze, qe, Xe, Ye, Qe, $e, Je, ei, ii, oi, ti, ni, si, ri, ai, li, di, pi, gi, ci, _i, mi, ui, Si, hi, Mi, wi) {
    var Ti = Le.boxSlideShow;
    Mi.compRegistrar.register("wysiwyg.common.components.verticalanchorsmenu.viewer.VerticalAnchorsMenu", We.verticalAnchorsMenuComp, !0).register("wysiwyg.common.components.verticalanchorsmenu.viewer.VerticalAnchorsMenuItem", We.verticalAnchorsMenuItem).register("wysiwyg.components.imageZoom", De).register("wysiwyg.common.components.backtotopbutton.viewer.BackToTopButton", H, !0).register("wysiwyg.common.components.subscribeform.viewer.SubscribeForm", L, !0).register("wysiwyg.viewer.components.FiveGridLine", r, !0).register("wysiwyg.viewer.components.MobileMediaZoom", Ve).register("wysiwyg.viewer.components.VerticalLine", r, !0).register("wysiwyg.common.components.anchor.viewer.Anchor", r, !0).register("wysiwyg.viewer.components.PageGroup", Ue, !0).register("wysiwyg.viewer.components.DeadComponent", le).register("wysiwyg.viewer.components.WFacebookLike", j, !0).register("wysiwyg.viewer.components.WFacebookComment", Z, !0).register("wysiwyg.viewer.components.inputs.ErasableTextInput", Ke).register("tpa.viewer.components.Masonry", Re.masonry, !0).register("tpa.viewer.components.Accordion", Re.accordion, !0).register("tpa.viewer.components.Impress", Re.impress, !0).register("tpa.viewer.components.Freestyle", Re.freestyle, !0).register("wysiwyg.viewer.components.TouchMediaZoomSlideshow", je).register("wysiwyg.viewer.components.TouchMediaZoomItem", Ze).register("tpa.viewer.components.Collage", Re.collage, !0).register("tpa.viewer.components.Honeycomb", Re.honeycomb, !0).register("tpa.viewer.components.StripShowcase", Re.stripShowcase, !0).register("tpa.viewer.components.StripSlideshow", Re.stripSlideshow, !0).register("tpa.viewer.components.Thumbnails", Re.thumbnails, !0).register("wysiwyg.viewer.components.tpapps.TPA3DGallery", Re.tpa3DGallery, !0).register("wysiwyg.viewer.components.tpapps.TPA3DCarousel", Re.tpa3DCarousel, !0).register("wysiwyg.viewer.components.TwitterFeed", z, !0).register("wysiwyg.common.components.InfoTip", Be).register("core.components.Image", p).register("core.components.ZoomedImage", g).register("wysiwyg.common.components.singleaudioplayer.viewer.SingleAudioPlayer", _e, !0).register("wysiwyg.viewer.components.AudioPlayer", se, !0).register("wysiwyg.viewer.components.SiteBackground", ye, !0).register("wysiwyg.components.viewer.inputs.InputWithValidation", qe).register("wysiwyg.viewer.components.FlashComponent", Ce, !0).register("wixapps.integration.components.ImageButton", Xe).register("wysiwyg.viewer.components.AdminLoginButton", v, !0).register("wysiwyg.viewer.components.MessageView", Ie).register("wysiwyg.common.components.verticalmenu.viewer.VerticalMenu", Ae, !0).register("wysiwyg.common.components.imagebutton.viewer.ImageButton", N, !0).register("wysiwyg.common.components.rssbutton.viewer.RSSButton", Y, !0).register("wysiwyg.viewer.components.BgImageStrip", we, !0).register("wysiwyg.viewer.components.ContactForm", C, !0).register("wysiwyg.viewer.components.DynamicContactForm", C, !0).register("wixapps.integration.components.Area", M).register("wysiwyg.viewer.components.VerticalRepeater", M).register("wysiwyg.viewer.components.WSiteStructure", M, !0).register("mobile.core.components.Container", M, !0).register("wysiwyg.viewer.components.Group", J, !0).register("wixapps.integration.components.AppPage", Me, !0).register("wysiwyg.viewer.components.HeaderContainer", E, !0).register("wysiwyg.viewer.components.FooterContainer", f, !0).register("wysiwyg.viewer.components.PagesContainer", y, !0).register("wysiwyg.viewer.components.ScreenWidthContainer", y, !0).register("wysiwyg.viewer.components.StripContainer", Ee, !0).register("wysiwyg.viewer.components.StripColumnsContainer", fe, !0).register("wysiwyg.viewer.components.Column", re, !0).register("wysiwyg.viewer.components.MediaPlayer", de, !0).register("wysiwyg.viewer.components.inputs.ColorOption", Ye).register("ecommerce.integration.components.MobileColorOption", Qe).register("wysiwyg.viewer.components.ClipArt", _, !0).register("wysiwyg.viewer.components.Displayer", m).register("wysiwyg.viewer.components.menus.DropDownMenu", Oe, !0).register("wysiwyg.common.components.facebooklikebox.viewer.FacebookLikeBox", q, !0).register("wysiwyg.viewer.components.FacebookShare", e, !0).register("wysiwyg.viewer.components.GoogleMap", F, !0).register("wysiwyg.viewer.components.EbayItemsBySeller", $e, !0).register("wysiwyg.viewer.components.HtmlComponent", ae, !0).register("wixapps.integration.components.Icon", Je).register("wysiwyg.viewer.components.LinkBar", B.linkBar, !0).register("wysiwyg.viewer.components.LinkBarItem", B.linkBarItem).register("wysiwyg.viewer.components.MatrixGallery", u, !0).register("wysiwyg.viewer.components.FlickrBadgeWidget", X, !0).register("wysiwyg.viewer.components.PaginatedGridGallery", h, !0).register("wysiwyg.viewer.components.MediaOverlayControls", pe.mediaOverlayControls, !0).register("wysiwyg.viewer.components.MediaControls", pe.mediaControls, !0).register("wysiwyg.viewer.components.MediaControlPlay", pe.mediaControlPlay).register("wysiwyg.viewer.components.MediaControlFullscreen", pe.mediaControlFullscreen).register("wysiwyg.viewer.components.MediaControlVolume", pe.mediaControlVolume).register("wysiwyg.viewer.components.MediaControlProgress", pe.mediaControlProgress).register("wysiwyg.viewer.components.MediaControlTime", pe.mediaControlTime).register("wysiwyg.viewer.components.MediaControlStoryboard", pe.mediaControlStoryboard).register("wysiwyg.viewer.components.MediaZoom", ke).register("wysiwyg.components.ImageZoomDisplayer", Fe).register("core.components.MenuButton", Ne).register("wysiwyg.common.components.NumericStepper", ei).register("wysiwyg.common.components.inputs.OptionsListInput", ii).register("wysiwyg.common.components.inputs.SelectOptionsList", oi).register("wysiwyg.common.components.pinitpinwidget.viewer.PinItPinWidget", a, !0).register("wysiwyg.common.components.pinterestpinit.viewer.PinterestPinIt", ie, !0).register("wysiwyg.viewer.components.PayPalButton", O, !0).register("wysiwyg.viewer.components.SiteButton", l, !0).register("wysiwyg.viewer.components.LoginButton", D, !0).register("wysiwyg.viewer.components.dialogs.NotificationDialog", ti).register("wysiwyg.viewer.components.dialogs.CreditsDialog", ni).register("wysiwyg.viewer.components.dialogs.EnterPasswordDialog", si).register("wysiwyg.viewer.components.dialogs.siteMemberDialogs.SignUpDialog", ri).register("wysiwyg.viewer.components.dialogs.siteMemberDialogs.MemberLoginDialog", ai).register("wysiwyg.viewer.components.dialogs.siteMemberDialogs.RequestPasswordResetDialog", li).register("wysiwyg.viewer.components.dialogs.siteMemberDialogs.ResetPasswordDialog", di).register("wysiwyg.viewer.components.ItunesButton", t, !0).register("wixapps.integration.components.Toggle", pi).register("wysiwyg.common.components.skypecallbutton.viewer.SkypeCallButton", n, !0).register("wysiwyg.viewer.components.SliderGallery", ge, !0).register("wysiwyg.viewer.components.SlideShowGallery", ce, !0).register("wysiwyg.viewer.components.svgshape.SvgShape", V.svgShape, !0).register("wysiwyg.viewer.components.svgPrimitive", K.svgPrimitive, !0).register("wysiwyg.viewer.components.inputs.TextInput", Q, !0).register("wixapps.integration.components.inputs.TextArea", k).register("wysiwyg.viewer.components.inputs.TextAreaInput", k, !0).register("wysiwyg.viewer.components.mobile.TinyMenu", $, !0).register("wysiwyg.viewer.components.inputs.TextOption", gi).register("ecommerce.integration.components.MobileTextOption", ci).register("wysiwyg.viewer.components.Video", x, !0).register("wysiwyg.viewer.components.VKShareButton", i, !0).register("wysiwyg.viewer.components.WGooglePlusOne", ee, !0).register("wysiwyg.viewer.components.WPhoto", c, !0).register("wysiwyg.viewer.components.documentmedia.DocumentMedia", P, !0).register("wysiwyg.viewer.components.WRichText", S, !0).register("wysiwyg.viewer.components.MediaRichText", _i, !0).register("wysiwyg.viewer.components.WTwitterFollow", te, !0).register("wysiwyg.common.components.youtubesubscribebutton.viewer.YouTubeSubscribeButton", o, !0).register("wysiwyg.viewer.components.WixAdsDesktop", be.wixAdsDesktop).register("wysiwyg.viewer.components.WixAdsMobile", be.wixAdsMobile).register("wysiwyg.viewer.components.MobileActionsMenu", xe).register("wysiwyg.viewer.components.QuickActionBar", me, !0).register("wysiwyg.viewer.components.QuickActionBarItem", ue, !0).register("wysiwyg.common.components.spotifyfollow.viewer.SpotifyFollow", G, !0).register("wysiwyg.common.components.spotifyplayer.viewer.SpotifyPlayer", W, !0).register("wysiwyg.viewer.components.PinterestFollow", oe, !0).register("wysiwyg.viewer.components.SoundCloudWidget", A, !0).register("wysiwyg.viewer.components.WTwitterTweet", ne, !0).register("wysiwyg.viewer.components.inputs.ComboBoxInput", U, !0).register("wysiwyg.common.components.exitmobilemode.viewer.ExitMobileMode", ve, !0).register("wysiwyg.viewer.components.Table", mi).register("wysiwyg.common.components.disquscomments.viewer.DisqusComments", Ge, !0).register("wysiwyg.viewer.components.background.bgMedia", R.components.bgMedia).register("wysiwyg.viewer.components.background.bgImage", R.components.bgImage).register("wysiwyg.viewer.components.background.html5Video", R.components.html5Video).register("wysiwyg.viewer.components.background.youtubeVideo", R.components.youtubeVideo).register("wysiwyg.viewer.components.background.iframeVideo", R.components.iframeVideo).register("wysiwyg.viewer.components.background.bgOverlay", R.components.bgOverlay).register("wysiwyg.viewer.components.BoxSlideShow", Ti, !0).register("wysiwyg.viewer.components.BoxSlideShowSlide", Se, !0).register("wysiwyg.viewer.components.StripContainerSlideShow", Le.stripSlideShow, !0).register("wysiwyg.viewer.components.StripContainerSlideShowSlide", he, !0).register("wysiwyg.viewer.components.HoverBox", Pe, !0).register("wysiwyg.viewer.components.inputs.Checkbox", ui, !0).register("wysiwyg.viewer.components.inputs.RadioButton", w).register("wysiwyg.viewer.components.inputs.DatePicker", I.datePicker, !0).register("wysiwyg.viewer.components.Calendar", I.calendar).register("wysiwyg.viewer.components.Month", I.month).register("wysiwyg.viewer.components.Day", I.day).register("wysiwyg.viewer.components.inputs.RadioGroup", T, !0).register("platform.components.AppController", Si, !0).register("wysiwyg.viewer.components.ImageButtonWithText", He, !0).register("wysiwyg.viewer.components.background.Balata", b).register("wysiwyg.viewer.components.PopupCloseTextButton", d, !0).register("wysiwyg.viewer.components.PopupCloseIconButton", V.popupCloseIconButton, !0).register("mobile.core.components.Page", Me, !0).register("mobile.core.components.MasterPage", ze, !0).register("wysiwyg.viewer.components.PopupContainer", Te, !0).register("wysiwyg.viewer.components.inputs.FileUploader", s.fileUploader, !0).register("wysiwyg.viewer.components.inputs.uploadName", s.uploadName, !0).register("wysiwyg.viewer.components.Grid", hi, !0).registerMobxObserver(wi.mobxObserverWrapper)
});
//# sourceMappingURL=components.min.js.map