"use strict";
define("dropDownMenu", ["lodash", "utils", "core", "santaProps", "menuButton"], function(e, t, n, i, r) {
    function o(e) {
        return !isNaN(parseFloat(e)) && isFinite(e)
    }

    function s(t) {
        return e.filter(t, "isVisible")
    }

    function a(e, t, n, i, r, o) {
        return o === e.length - 1 ? 1 === e.length ? "dropLonely" : t ? "bottom" : n || "right" === i ? r ? "left" : "right" : "center" : 0 === o ? t ? "top" : n || "left" === i ? r ? "right" : "left" : "center" : t ? "dropCenter" : "center"
    }

    function h(n, i, r, o, s) {
        var a, h = e.some(r, ["link.pageId.id", i]),
            p = {
                AnchorLink: function(t) {
                    return (e.has(t.anchorDataId, "id") ? t.anchorDataId.id : t.anchorDataId) === a
                },
                PageLink: function(e) {
                    if (!a) {
                        if (e.pageId.isPopup) return e.pageId.id === i;
                        if (!h) return e.pageId.id === n
                    }
                    return !1
                }
            };
        return o && (a = t.menuUtils.getActiveAnchorInPage(s, r, n)),
            function(e) {
                var t = e && p[e.type];
                return !!t && t(e)
            }
    }

    function p(t, n, i, r, o, s, p, u, l) {
        return e.map(n, function(e, d) {
            var c = e.link,
                m = h(s, p, n, l, t);
            return {
                isContainer: Boolean(i),
                isSelected: m(c),
                positionInList: a(n, i, r, o, u, d)
            }
        })
    }
    var u = n.compMixins;
    return {
        displayName: "DropDownMenu",
        propTypes: e.assign({
            isMobileView: i.Types.isMobileView,
            isMobileDevice: i.Types.Device.isMobileDevice,
            isTabletDevice: i.Types.Device.isTabletDevice,
            anchorChangeEvent: i.Types.SiteAspects.anchorChangeEvent,
            activeAnchorData: i.Types.AnchorChange.activeAnchorData,
            currentUrlPageId: i.Types.Component.currentUrlPageId,
            currentPopupId: i.Types.currentPopupId,
            highlightAnchorsInMenu: i.Types.BrowserFlags.highlightAnchorsInMenu.isRequired,
            siteMenuWithRender: i.Types.Menu.siteMenuWithRender,
            nonHiddenPageIdsFromMainMenu: i.Types.Menu.nonHiddenPageIdsFromMainMenu,
            id: i.Types.Component.id,
            refInParent: i.Types.Component.refInParent,
            skin: i.Types.Component.skin,
            compProp: i.Types.Component.compProp,
            compData: i.Types.Component.compData
        }, i.santaTypesUtils.getSantaTypesByDefinition(r)),
        statics: {
            useSantaTypes: !0
        },
        mixins: [u.skinBasedComp, u.timeoutsMixin, u.skinInfo],
        getInitialState: function() {
            return this.shouldChildrenUpdate = !1, {
                hover: null,
                hoverListPosition: null,
                activeAnchor: null,
                $dropAlign: this.props.compProp.alignButtons,
                $mobile: this.props.isMobileDevice || this.props.isMobileView || this.props.isTabletDevice ? "mobile" : "notMobile"
            }
        },
        componentDidMount: function() {
            this.props.highlightAnchorsInMenu && this.props.anchorChangeEvent.registerToAnchorChange(this)
        },
        componentWillUnmount: function() {
            this.props.highlightAnchorsInMenu && this.props.anchorChangeEvent.unregisterToAnchorChange(this)
        },
        convertItemsToChildren: function(t, n, i, r) {
            var o = s(t);
            (n = n || {}).style = n.style || {};
            var a = p(this.state.activeAnchor, o, r, this.props.compProp.stretchButtonsToMenuWidth, this.props.compProp.alignButtons, this.props.currentUrlPageId, this.props.currentPopupId, this.props.compProp.rtl, this.props.highlightAnchorsInMenu);
            return e.map(o, function(t, i) {
                var o = (r ? "moreContainer" : "") + i;
                return this.createChildComponent(t, "core.components.MenuButton", "repeaterButton", e.merge({
                    isContainer: a[i].isContainer,
                    isSelected: a[i].isSelected,
                    positionInList: a[i].positionInList,
                    id: this.props.id + o,
                    ref: o,
                    key: t.id,
                    refInParent: o,
                    mouseEnterHandler: this.mouseEnterHandler,
                    mouseLeaveHandler: this.mouseLeaveHandler,
                    isDropDownButton: r,
                    onMouseClick: this.onMouseClick
                }, n))
            }.bind(this))
        },
        onMouseClick: function(e, t, n) {
            var i = s(this.props.siteMenuWithRender);
            if (n) this.mouseLeaveHandler();
            else {
                var r = [];
                "__more__" !== t && (r = s(i[t].items));
                var o = r.length > 0 || "__more__" === t,
                    a = this.state.hover;
                !this.dropDownOpen && o ? (this.mouseEnterHandler(t), e.preventDefault(), e.stopPropagation()) : this.dropDownOpen && !this.isDropdownOwner(t, a) && o ? (this.mouseLeaveHandler(), e.preventDefault(), e.stopPropagation(), this.mouseEnterHandler(t)) : this.dropDownOpen && this.mouseLeaveHandler()
            }
        },
        onAnchorChange: function(e) {
            e !== this.state.activeAnchor && this.setState({
                activeAnchor: e
            })
        },
        isDropdownOwner: function(e, t) {
            return e === t
        },
        createMoreButton: function(e) {
            var t = e ? "left" : "right",
                n = this.props.compProp.alignButtons;
            return this.props.compProp.stretchButtonsToMenuWidth || "right" === n || (t = "center"), this.createChildComponent({
                id: "__more__",
                label: this.props.compProp.moreButtonLabel
            }, "core.components.MenuButton", "repeaterButton", {
                isSelected: !1,
                positionInList: t,
                id: this.props.id + "__more__",
                ref: "__more__",
                key: "__more__",
                mouseEnterHandler: this.mouseEnterHandler,
                mouseLeaveHandler: this.mouseLeaveHandler,
                onMouseClick: this.onMouseClick,
                isDropDownButton: !1,
                display: "inline-block"
            })
        },
        mouseEnterHandler: function(e, n) {
            this.hovering = !0, this.lastHovered = this.getCurrentTime();
            var i = e.replace(this.props.id, ""); - 1 !== this.props.nonHiddenPageIdsFromMainMenu.concat("__more__").indexOf(i) && (o(i) || t.stringUtils.startsWith(e, "__")) && e !== this.state.hover && (this.state.hover && this.refs[this.state.hover].setIdleState(), this.registerReLayout(), this.setState({
                hover: e,
                hoverListPosition: n
            }))
        },
        getCurrentTime: function() {
            return Date.now()
        },
        mouseLeaveHandler: function() {
            this.hovering = !1, this.lastHovered = this.getCurrentTime(), !this.dropDownOpen && this.state.hover && this.refs[this.state.hover].setIdleState(), this.setTimeout(function() {
                var e = this.getCurrentTime() - this.lastHovered;
                !this.hovering && this.state.hover && e >= 1e3 && (this.refs[this.state.hover].setIdleState(), this.dropDownOpen = !1, this.setState({
                    hover: null,
                    hoverListPosition: null
                }))
            }.bind(this), 1e3)
        },
        getParamsFromSkins: function() {
            return {
                menuBorderY: this.getSumParamValue("menuTotalBordersY", this.props.skin),
                menuBtnBorder: this.getSumParamValue("menuButtonBorders", this.getSkinExports().repeaterButton.skin),
                ribbonEls: this.getParamFromDefaultSkin("ribbonEls").value ? parseInt(this.getParamFromDefaultSkin("ribbonEls").value, 10) : 0,
                labelPad: this.getFromExports("labelPad"),
                ribbonExtra: this.getFromExports("ribbonExtra") ? Math.abs(parseInt(this.getFromExports("ribbonExtra"), 10)) : 0
            }
        },
        getSkinProperties: function() {
            var e = s(this.props.siteMenuWithRender),
                t = this.getParamsFromSkins(),
                n = this.convertItemsToChildren(e, {
                    display: "inherit"
                }, null, null),
                i = [],
                r = "hidden";
            return n.push(this.createMoreButton(this.props.compProp.rtl)), this.props.compProp.rtl && n.reverse(), (o(this.state.hover) || "__more__" === this.state.hover) && (i = this.convertItemsToChildren(o(this.state.hover) ? e[this.state.hover].items : e, {
                style: {
                    width: "100%"
                },
                display: "block",
                prefix: "_",
                subMenu: !0
            }, !0, !0)).length > 0 && (r = "inherit", this.dropDownOpen = !0), {
                "": {
                    id: this.props.id,
                    key: this.props.refInParent,
                    ref: this.props.refInParent,
                    "data-menuborder-y": t.menuBorderY,
                    "data-menubtn-border": t.menuBtnBorder,
                    "data-ribbon-els": t.ribbonEls,
                    "data-label-pad": t.labelPad,
                    "data-ribbon-extra": t.ribbonExtra,
                    "data-drophposition": this.state.hover ? this.state.hoverListPosition : "",
                    "data-dropalign": this.props.compProp.alignButtons
                },
                itemsContainer: {
                    children: n,
                    style: {
                        textAlign: this.props.compProp.alignButtons
                    }
                },
                moreContainer: {
                    children: i,
                    "data-hover": this.state.hover,
                    style: {
                        visibility: r
                    }
                },
                dropWrapper: {
                    style: {
                        visibility: r
                    },
                    "data-drophposition": this.state.hover ? this.state.hoverListPosition : "",
                    "data-dropalign": this.props.compProp.alignButtons
                }
            }
        }
    }
});
//# sourceMappingURL=dropDownMenu.min.js.map