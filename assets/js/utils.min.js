"use strict";
define("utils/fonts/renderedFontsList", ["lodash"], function(e) {
    var t = {};
    return {
        set: function(a) {
            e.forEach(a, function(e) {
                t[e] = 1
            })
        },
        get: function() {
            return e.keys(t)
        },
        has: function(e) {
            return Boolean(t[e])
        }
    }
}), define("utils/fonts/uploadedFontsUtils", ["lodash", "utils/fonts/renderedFontsList", "coreUtilsLib"], function(e, t, a) {
    function r(r) {
        var o = a.fonts.collectFontsFromTextDataArray([r]),
            n = t.get();
        return e(o).difference(n).some(a.fonts.isUploadedFontFamily)
    }
    return {
        doesDataContainNewUploadedFonts: r,
        isUploadedFontFamily: a.fonts.isUploadedFontFamily,
        getUploadedFontValue: a.fonts.getUploadedFontValue,
        getUploadedId: a.fonts.getUploadedId,
        getUploadedFontFaceStyles: a.fonts.getUploadedFontFaceStyles
    }
}), define("utils/fonts/constants", [], function() {
    return {
        UPLOADED_FONT_PREFIX: "wf_",
        LONG_UPLOADED_FONT_PREFIX: "wfont_"
    }
}), define("utils/fonts/fontsParser", ["lodash"], function(e) {
    function t(t) {
        var a = /(<[^>]+["']font-family:\s*)([^,;]+)([,;])/g;
        return e.reduce(t, function(e, t) {
            a.lastIndex = 0;
            for (var r; r = a.exec(t);) e.push(r[2].replace(/['"]/g, ""));
            return e
        }, [])
    }
    return {
        collectFontsFromTextDataArray: t
    }
}), define("utils/mixins/postMessageCompMixin", ["lodash"], function(e) {
    return {
        componentWillMount: function() {
            this.handlers = {}
        },
        componentWillUnmount: function() {
            e.forEach(this.handlers, function(e, t) {
                this.clearPostMessageHandlerNamed(t)
            }.bind(this))
        },
        setPostMessageHandler: function(e, t) {
            this.setPostMessageHandlerNamed("default", e, t)
        },
        setPostMessageHandlerNamed: function(e, t, a) {
            this.handlers.hasOwnProperty(e) && this.clearPostMessageHandlerNamed(e);
            var r = function(e) {
                var r;
                try {
                    r = JSON.parse(e.data)
                } catch (e) {
                    return
                }(r.id === t || null === t && void 0 === r.id) && a(r)
            };
            window.addEventListener("message", r, !1), this.handlers[e] = r
        },
        clearPostMessageHandlerNamed: function(e) {
            this.handlers[e] && (window.removeEventListener("message", this.handlers[e], !1), delete this.handlers[e])
        }
    }
}), define("utils/socialAPI/providers/facebook", ["zepto"], function(e) {
    function t(e) {
        return {
            likesAndShares: e.total_count || 0,
            comments: e.commentsbox_count || 0
        }
    }

    function a(a) {
        return function(o, n) {
            e.ajax({
                url: r + encodeURIComponent(o),
                dataType: "json",
                success: function(e, r) {
                    if ("success" === r && e[0]) {
                        var o = t(e[0]);
                        n(o[a])
                    } else n(0, 0)
                },
                error: function() {
                    n(0, 0)
                }
            })
        }
    }
    var r = "http://api.facebook.com/restserver.php?format=json&method=links.getStats&urls=";
    return a.likes = a.shares = a("likesAndShares"), a.comments = a("comments"), a
}), define("utils/socialAPI/providers/vk", [], function() {
    function e(e) {
        window.VK = window._tempVK, delete window._tempVK, window.document.head.removeChild(e)
    }
    return function(t, a) {
        var r = window.document.createElement("script"),
            o = 0;
        window._tempVK = window.VK, window.VK = {
            Share: {
                count: function(e, t) {
                    o = t
                }
            }
        }, r.setAttribute("type", "text/javascript"), r.setAttribute("src", "http://vk.com/share.php?act=count&url=" + encodeURIComponent(t)), r.addEventListener("load", function() {
            a(o), e(r)
        }), r.addEventListener("error", function() {
            a(o), e(r)
        }), window.document.head.appendChild(r)
    }
}), define("utils/socialAPI/providers/pinterest", ["zepto"], function(e) {
    return function(t, a) {
        var r = 0;
        window._tempReceiveCount = window.receiveCount, window.receiveCount = function(e) {
            r = e.count
        }, e.ajax({
            url: "http://widgets.pinterest.com/v1/urls/count.json?url=" + encodeURIComponent(t),
            dataType: "script",
            complete: function() {
                a(r), window.receiveCount = window._tempReceiveCount, delete window._tempReceiveCount
            }
        })
    }
}), define("utils/socialAPI/socialAPI", ["utils/socialAPI/providers/facebook", "utils/socialAPI/providers/vk", "utils/socialAPI/providers/pinterest"], function(e, t, a) {
    return {
        facebook: e,
        pinterest: a,
        vk: t
    }
}), define("utils/color/colorParser", ["lodash", "color", "coreUtils"], function(e, t, a) {
    function r(r, n, c) {
        var i, s;
        return /color_/.test(n) && (n = o(r, n = n.replace(/[\[\]{}]/g, "")), n = a.cssUtils.normalizeColorStr(n)), "none" === n ? i = "transparent" : (s = new t(n), e.isNumber(c) && s.setValues("alpha", c), i = 0 === s.alpha() ? "transparent" : s.rgbaString()), i
    }

    function o(e, t) {
        return e[t.split("_")[1]] || t
    }

    function n(e, t) {
        return o(e.color, t)
    }
    return {
        getColor: r,
        getColorValue: n
    }
}), define("utils/routers/routersBackEndRequests", ["lodash", "coreUtils", "wixCodeInit"], function(e, t, a) {
    function r(e, t, a) {
        var r = e.host,
            o = "wix-code" === t.appDefinitionId ? "/custom" : "/data-binding";
        return e.protocol + "//" + r + "/_api/cloud-dispatcher/public" + o + (a ? "/sitemap" : "/pages")
    }

    function o(e, t, r) {
        return "?" + ["viewMode=" + (r ? "editor" : "site"), "instance=" + a.specMapUtils.getAppSpec(e).instance, "scari=" + t].join("&")
    }

    function n(t, a, r, o, n, c) {
        var i = e.isString(r.config) ? JSON.parse(r.config) : r.config,
            s = ("/" + a).replace(/^\/\//, "/"),
            d = o + "/" + r.prefix + s;
        return c && (d = d + "?" + c), {
            fullUrl: d,
            routerPrefix: "/" + r.prefix,
            routerSuffix: s,
            requestInfo: {
                formFactor: n
            },
            config: i,
            pageRoles: t
        }
    }

    function c(t, a, c, i) {
        N.ajax({
            type: "POST",
            dataType: "json",
            url: r(t.currentUrl, t.routerDefinition, a) + o(t.clientSpecMap, t.rendererModel_wixCodeModel_appRenderInfo, t.isEditor),
            data: n(t.pageRoles, t.suffix, t.routerDefinition, t.publicBaseUrl, t.formFactor, t.queryParams),
            success: function(t) {
                e.get(t, "result._elementoryError") && R("Internal server error:" + t.result.stack), l(e.get(t, "consoleMethodCalls")), c(t)
            },
            error: i
        })
    }

    function i(e, t, a, r) {
        R("Uknown error(" + r + ")"), a.pageId = e ? t : f.IDS.UKNOWN_ERROR
    }

    function s(e, t, a) {
        R("Forbidden (403) - The request was a valid request, but the server is refusing to respond to it. The user might be logged in but does not have the necessary permissions for the resource."), a.pageId = e ? t : f.IDS.FORBIDDEN
    }

    function d(e, t, a) {
        R('Redirected to URL: "' + t.result.redirectUrl + '"'), a.redirectUrl = t.result.redirectUrl, a.pageId = e
    }

    function u(e, t, a) {
        R("Not Found (404) - The requested resource could not be found"), a.pageId = e ? t : f.IDS.NOT_FOUND
    }

    function h(e, t, a, r) {
        R(500 === e ? "Internal Server Error (500)" : "Error Code (" + e + ")"), r.pageId = t ? a : f.IDS.INTERNAL_ERROR
    }

    function p(t, a, r, o, n, c, p, l) {
        var m = {
                pageId: l.result.page,
                pageData: l.result.data,
                pageHeadData: l.result.head
            },
            S = e.parseInt(l.result.status);
        if (403 === S ? s(r, n, m) : 302 === S || 301 === S ? d(n, l, m) : 404 === S ? u(r, n, m) : 500 === S ? h(S, r, n, m) : m.pageId || i(r, n, m, l.result.status), R(l.result.message), S >= 400 && o) {
            var g = ("/" + a).replace(/^\/\//, "/");
            m.errorInfo = {
                statusCode: S,
                routerUrl: "/" + t.prefix + g,
                publicUrl: c + "/" + t.prefix + g
            }
        }
        p(m)
    }

    function l(t) {
        e.forEach(t, function(e) {
            R(e[1])
        })
    }

    function m(t, a, r) {
        var o = e.map(r.getPagesList(t, !0), function(e) {
            return {
                pageId: e,
                title: r.getPageData(t, e).title
            }
        });
        return {
            isEditor: !0,
            currentUrl: t.dal.getByPath(["currentUrl"]),
            clientSpecMap: t.dal.get(t.pointers.general.getClientSpecMap()),
            rendererModel_wixCodeModel_appRenderInfo: t.dal.getByPath(["rendererModel", "wixCodeModel", "signedAppRenderInfo"]),
            routerDefinition: a,
            suffix: "",
            pageRoles: e.reduce(a.pages, function(t, a, r) {
                return t[r] = {
                    id: a,
                    title: e.find(o, {
                        pageId: a
                    }).title
                }, t
            }, {}),
            publicBaseUrl: t.siteDataAPI.siteData.getPublicBaseUrl()
        }
    }

    function S(a, r, o) {
        var n = e.assign({}, a.getQueryParams(), o.queryParams || {}),
            c = t.urlUtils.toQueryString(n);
        return {
            primaryPageId: a.getPrimaryPageId(),
            isPreview: !!a.documentServicesModel,
            isEditorPreview: "preview" === a.renderFlags.componentViewMode && !!a.documentServicesModel,
            isEditor: !a.isViewerMode(),
            currentUrl: a.currentUrl,
            clientSpecMap: a.getClientSpecMap(),
            rendererModel_wixCodeModel_appRenderInfo: a.rendererModel.wixCodeModel.signedAppRenderInfo,
            routerDefinition: r,
            suffix: o.innerRoute,
            queryParams: c,
            pageRoles: e.reduce(r.pages, function(t, r, o) {
                var n = e.chain(a).get("publicModel.pageList.pages").find({
                    pageId: r
                }).get("title").value();
                return t[o] = {
                    id: r,
                    title: n || e.get(a.getDataByQuery(r), "title")
                }, t
            }, {}),
            publicBaseUrl: a.getPublicBaseUrl(),
            formFactor: a.isMobileView() || a.isMobileDevice() ? "mobile" : "desktop"
        }
    }

    function g(t, a) {
        var r = new RegExp(".*?/" + a);
        e.forEach(t, function(e) {
            e && e.url && (e.url = e.url.replace(r, ""), "/" === e.url.charAt(0) && e.url.length > 1 && (e.url = e.url.substring(1)))
        })
    }

    function y(e, t, a) {
        function r(r) {
            r.exception ? a() : (g(r.result, e.routerDefinition.prefix), t(r.result))
        }
        c(e, !0, r, a)
    }

    function C(t, a, r) {
        c(t, !1, e.partial(p, t.routerDefinition, t.suffix, t.isPreview, t.isEditorPreview, t.primaryPageId, t.publicBaseUrl, a), r)
    }
    var N = t.ajaxLibrary,
        f = t.errorPages,
        R = t.logWixCodeConsoleMessage;
    return {
        getPage: C,
        getInnerRoutesSiteMap: y,
        makeParamObjFromPs: m,
        makeParamObjFromSiteData: S
    }
}), define("utils/integrations/fullStory", ["experiment"], function(e) {
    return {
        start: function(t) {
            e.isOpen("sv_fullstory", t) && e.isOpen("se_fullstory", t) && requirejs(["wix-fullstory-loader"], function(e) {
                e({
                    label: "santa-viewer",
                    iframe: !0,
                    sample: 1
                })
            })
        }
    }
}), define("utils/santaTypes/santaTypes", ["coreUtils"], function(e) {
    function t(e) {
        return e.length > 1
    }
    return {
        shortenStyleId: function(a) {
            var r = (a || "").split(".");
            if (t(r)) {
                var o = e.hashUtils.SHA256.b64_sha256(a);
                return "s_" + (o.substr(o.length - 5) + r.pop()).replace(/[^a-z]/gi, "")
            }
            return a
        }
    }
}), define("utils/media/media", ["coreUtils"], function(e) {
    return {
        getMediaUrl: function(t, a) {
            var r = t && t.scriptsDomainUrl || "http://static.parastorage.com/";
            return e.urlUtils.joinURL(r, "services", "santa-resources", "resources", "viewer", a)
        }
    }
}), define("utils/media/svg", ["lodash"], function(e) {
    function t(e, t, a) {
        return t + (1 === e ? "_svgshape.v1." + a : "") + ".svg"
    }

    function a(e, a) {
        var r = a.replace(/^.*\//, "").split(".");
        return e + "shapes/" + t("v1" === r[1] ? 1 : 2, r[2].replace(/svg_/i, ""), r[3])
    }
    return {
        createSvgFetchRequest: function(t, r, o) {
            var n = ["svgShapes", o];
            return e.get(r, n) ? null : {
                destination: n,
                url: a(t, o),
                dataType: "html",
                error: function() {
                    r.svgShapes[o] = "<svg><g></g></svg>"
                }
            }
        }
    }
}), define("utils/siteUtils/countryCodes.json", [], function() {
    return {
        countries: {
            AFG: {
                countryName: "Afghanistan",
                characterSets: [],
                phoneCode: "+93"
            },
            ALA: {
                countryName: "Åland Islands",
                characterSets: [],
                phoneCode: "+358 18"
            },
            ALB: {
                countryName: "Albania",
                characterSets: [],
                phoneCode: "+355"
            },
            DZA: {
                countryName: "Algeria",
                characterSets: ["arabic"],
                phoneCode: "+213"
            },
            ASM: {
                countryName: "American Samoa",
                characterSets: [],
                phoneCode: "+1 684"
            },
            AND: {
                countryName: "Andorra",
                characterSets: [],
                phoneCode: "+376"
            },
            AGO: {
                countryName: "Angola",
                characterSets: [],
                phoneCode: "+244"
            },
            AIA: {
                countryName: "Anguilla",
                characterSets: [],
                phoneCode: "+1 264"
            },
            ATA: {
                countryName: "Antarctica",
                characterSets: [],
                phoneCode: ""
            },
            ATG: {
                countryName: "Antigua and Barbuda",
                characterSets: [],
                phoneCode: "+1 268"
            },
            ARG: {
                countryName: "Argentina",
                characterSets: [],
                phoneCode: "+54"
            },
            ARM: {
                countryName: "Armenia",
                characterSets: [],
                phoneCode: "+374"
            },
            ABW: {
                countryName: "Aruba",
                characterSets: [],
                phoneCode: "+297"
            },
            AUS: {
                countryName: "Australia",
                characterSets: [],
                phoneCode: "+61"
            },
            AUT: {
                countryName: "Austria",
                characterSets: [],
                phoneCode: "+43"
            },
            AZE: {
                countryName: "Azerbaijan",
                characterSets: [],
                phoneCode: "+994"
            },
            BHS: {
                countryName: "Bahamas",
                characterSets: [],
                phoneCode: "+1 242"
            },
            BHR: {
                countryName: "Bahrain",
                characterSets: ["arabic"],
                phoneCode: "+973"
            },
            BGD: {
                countryName: "Bangladesh",
                characterSets: [],
                phoneCode: "+880"
            },
            BRB: {
                countryName: "Barbados",
                characterSets: [],
                phoneCode: "+1 246"
            },
            BLR: {
                countryName: "Belarus",
                characterSets: ["cyrillic"],
                phoneCode: "+375"
            },
            BEL: {
                countryName: "Belgium",
                characterSets: [],
                phoneCode: "+32"
            },
            BLZ: {
                countryName: "Belize",
                characterSets: [],
                phoneCode: "+501"
            },
            BEN: {
                countryName: "Benin",
                characterSets: [],
                phoneCode: "+229"
            },
            BMU: {
                countryName: "Bermuda",
                characterSets: [],
                phoneCode: "+1 441"
            },
            BTN: {
                countryName: "Bhutan",
                characterSets: [],
                phoneCode: "+975"
            },
            BOL: {
                countryName: "Bolivia, Plurinational State of",
                characterSets: [],
                phoneCode: "+591"
            },
            BES: {
                countryName: "Bonaire, Sint Eustatius and Saba",
                characterSets: [],
                phoneCode: "+599 7"
            },
            BIH: {
                countryName: "Bosnia and Herzegovina",
                characterSets: ["cyrillic"],
                phoneCode: "+387"
            },
            BWA: {
                countryName: "Botswana",
                characterSets: [],
                phoneCode: "+267"
            },
            BVT: {
                countryName: "Bouvet Island",
                characterSets: [],
                phoneCode: ""
            },
            BRA: {
                countryName: "Brazil",
                characterSets: [],
                phoneCode: "+55"
            },
            IOT: {
                countryName: "British Indian Ocean Territory",
                characterSets: [],
                phoneCode: "+246"
            },
            BRN: {
                countryName: "Brunei Darussalam",
                characterSets: [],
                phoneCode: "+673"
            },
            BGR: {
                countryName: "Bulgaria",
                characterSets: ["cyrillic"],
                phoneCode: "+359"
            },
            BFA: {
                countryName: "Burkina Faso",
                characterSets: [],
                phoneCode: "+226"
            },
            BDI: {
                countryName: "Burundi",
                characterSets: [],
                phoneCode: "+257"
            },
            KHM: {
                countryName: "Cambodia",
                characterSets: [],
                phoneCode: "+855"
            },
            CMR: {
                countryName: "Cameroon",
                characterSets: [],
                phoneCode: "+237"
            },
            CAN: {
                countryName: "Canada",
                characterSets: [],
                phoneCode: "+1"
            },
            CPV: {
                countryName: "Cape Verde",
                characterSets: [],
                phoneCode: "+238"
            },
            CYM: {
                countryName: "Cayman Islands",
                characterSets: [],
                phoneCode: "+1 345"
            },
            CAF: {
                countryName: "Central African Republic",
                characterSets: [],
                phoneCode: "+236"
            },
            TCD: {
                countryName: "Chad",
                characterSets: ["arabic"],
                phoneCode: "+235"
            },
            CHL: {
                countryName: "Chile",
                characterSets: [],
                phoneCode: "+56"
            },
            CHN: {
                countryName: "China",
                characterSets: [],
                phoneCode: "+86"
            },
            CXR: {
                countryName: "Christmas Island",
                characterSets: [],
                phoneCode: "+61"
            },
            CCK: {
                countryName: "Cocos (Keeling) Islands",
                characterSets: [],
                phoneCode: "+61"
            },
            COL: {
                countryName: "Colombia",
                characterSets: [],
                phoneCode: "+57"
            },
            COM: {
                countryName: "Comoros",
                characterSets: ["arabic"],
                phoneCode: "+269"
            },
            COG: {
                countryName: "Congo",
                characterSets: [],
                phoneCode: "+242"
            },
            COD: {
                countryName: "Congo, the Democratic Republic of the",
                characterSets: [],
                phoneCode: "+243"
            },
            COK: {
                countryName: "Cook Islands",
                characterSets: [],
                phoneCode: "+682"
            },
            CRI: {
                countryName: "Costa Rica",
                characterSets: [],
                phoneCode: "+506"
            },
            CIV: {
                countryName: "Côte d'Ivoire",
                characterSets: [],
                phoneCode: "+225"
            },
            HRV: {
                countryName: "Croatia",
                characterSets: ["latin-ext"],
                phoneCode: "+385"
            },
            CUB: {
                countryName: "Cuba",
                characterSets: [],
                phoneCode: "+53"
            },
            CUW: {
                countryName: "Curaçao",
                characterSets: [],
                phoneCode: "+599 9"
            },
            CYP: {
                countryName: "Cyprus",
                characterSets: [],
                phoneCode: "+357"
            },
            CZE: {
                countryName: "Czech Republic",
                characterSets: ["latin-ext"],
                phoneCode: "+420"
            },
            DNK: {
                countryName: "Denmark",
                characterSets: [],
                phoneCode: "+45"
            },
            DJI: {
                countryName: "Djibouti",
                characterSets: ["arabic"],
                phoneCode: "+253"
            },
            DMA: {
                countryName: "Dominica",
                characterSets: [],
                phoneCode: "+1 767"
            },
            DOM: {
                countryName: "Dominican Republic",
                characterSets: [],
                phoneCode: "+1 809"
            },
            ECU: {
                countryName: "Ecuador",
                characterSets: [],
                phoneCode: "+593"
            },
            EGY: {
                countryName: "Egypt",
                characterSets: ["arabic"],
                phoneCode: "+20"
            },
            SLV: {
                countryName: "El Salvador",
                characterSets: [],
                phoneCode: "+503"
            },
            GNQ: {
                countryName: "Equatorial Guinea",
                characterSets: [],
                phoneCode: "+240"
            },
            ERI: {
                countryName: "Eritrea",
                characterSets: ["arabic"],
                phoneCode: "+291"
            },
            EST: {
                countryName: "Estonia",
                characterSets: [],
                phoneCode: "+372"
            },
            ETH: {
                countryName: "Ethiopia",
                characterSets: [],
                phoneCode: "+251"
            },
            FLK: {
                countryName: "Falkland Islands (Malvinas)",
                characterSets: [],
                phoneCode: "+500"
            },
            FRO: {
                countryName: "Faroe Islands",
                characterSets: [],
                phoneCode: "+298"
            },
            FJI: {
                countryName: "Fiji",
                characterSets: [],
                phoneCode: "+679"
            },
            FIN: {
                countryName: "Finland",
                characterSets: [],
                phoneCode: "+358"
            },
            FRA: {
                countryName: "France",
                characterSets: [],
                phoneCode: "+33"
            },
            GUF: {
                countryName: "French Guiana",
                characterSets: [],
                phoneCode: "+594"
            },
            PYF: {
                countryName: "French Polynesia",
                characterSets: [],
                phoneCode: "+689"
            },
            ATF: {
                countryName: "French Southern Territories",
                characterSets: [],
                phoneCode: ""
            },
            GAB: {
                countryName: "Gabon",
                characterSets: [],
                phoneCode: "+241"
            },
            GMB: {
                countryName: "Gambia",
                characterSets: [],
                phoneCode: "+220"
            },
            GEO: {
                countryName: "Georgia",
                characterSets: [],
                phoneCode: "+995"
            },
            DEU: {
                countryName: "Germany",
                characterSets: [],
                phoneCode: "+49"
            },
            GHA: {
                countryName: "Ghana",
                characterSets: [],
                phoneCode: "+233"
            },
            GIB: {
                countryName: "Gibraltar",
                characterSets: [],
                phoneCode: "+350"
            },
            GRC: {
                countryName: "Greece",
                characterSets: [],
                phoneCode: "+30"
            },
            GRL: {
                countryName: "Greenland",
                characterSets: [],
                phoneCode: "+299"
            },
            GRD: {
                countryName: "Grenada",
                characterSets: [],
                phoneCode: "+1 473"
            },
            GLP: {
                countryName: "Guadeloupe",
                characterSets: [],
                phoneCode: "+590"
            },
            GUM: {
                countryName: "Guam",
                characterSets: [],
                phoneCode: "+1 671"
            },
            GTM: {
                countryName: "Guatemala",
                characterSets: [],
                phoneCode: "+502"
            },
            GGY: {
                countryName: "Guernsey",
                characterSets: [],
                phoneCode: "+44"
            },
            GIN: {
                countryName: "Guinea",
                characterSets: [],
                phoneCode: "+224"
            },
            GNB: {
                countryName: "Guinea-Bissau",
                characterSets: [],
                phoneCode: "+245"
            },
            GUY: {
                countryName: "Guyana",
                characterSets: [],
                phoneCode: "+592"
            },
            HTI: {
                countryName: "Haiti",
                characterSets: [],
                phoneCode: "+509"
            },
            HMD: {
                countryName: "Heard Island and McDonald Islands",
                characterSets: [],
                phoneCode: ""
            },
            VAT: {
                countryName: "Holy See (Vatican City State)",
                characterSets: [],
                phoneCode: ""
            },
            HND: {
                countryName: "Honduras",
                characterSets: [],
                phoneCode: "+504"
            },
            HKG: {
                countryName: "Hong Kong",
                characterSets: [],
                phoneCode: "+852"
            },
            HUN: {
                countryName: "Hungary",
                characterSets: ["latin-ext"],
                phoneCode: "+36"
            },
            ISL: {
                countryName: "Iceland",
                characterSets: [],
                phoneCode: "+354"
            },
            IND: {
                countryName: "India",
                characterSets: [],
                phoneCode: "+91"
            },
            IDN: {
                countryName: "Indonesia",
                characterSets: [],
                phoneCode: "+62"
            },
            IRN: {
                countryName: "Iran, Islamic Republic of",
                characterSets: [],
                phoneCode: "+98"
            },
            IRQ: {
                countryName: "Iraq",
                characterSets: ["arabic"],
                phoneCode: "+964"
            },
            IRL: {
                countryName: "Ireland",
                characterSets: [],
                phoneCode: "+353"
            },
            IMN: {
                countryName: "Isle of Man",
                characterSets: [],
                phoneCode: "+44"
            },
            ISR: {
                countryName: "Israel",
                characterSets: ["hebrew", "arabic"],
                phoneCode: "+972"
            },
            ITA: {
                countryName: "Italy",
                characterSets: [],
                phoneCode: "+39"
            },
            JAM: {
                countryName: "Jamaica",
                characterSets: [],
                phoneCode: "+1 876"
            },
            JPN: {
                countryName: "Japan",
                characterSets: ["japanese"],
                phoneCode: "+81"
            },
            JEY: {
                countryName: "Jersey",
                characterSets: [],
                phoneCode: "+44"
            },
            JOR: {
                countryName: "Jordan",
                characterSets: ["arabic"],
                phoneCode: "+962"
            },
            KAZ: {
                countryName: "Kazakhstan",
                characterSets: [],
                phoneCode: "+7"
            },
            KEN: {
                countryName: "Kenya",
                characterSets: [],
                phoneCode: "+254"
            },
            KIR: {
                countryName: "Kiribati",
                characterSets: [],
                phoneCode: "+686"
            },
            PRK: {
                countryName: "Korea, Democratic People's Republic of",
                characterSets: ["korean"],
                phoneCode: "+850"
            },
            KOR: {
                countryName: "Korea, Republic of",
                characterSets: ["korean"],
                phoneCode: "+82"
            },
            KWT: {
                countryName: "Kuwait",
                characterSets: ["arabic"],
                phoneCode: "+965"
            },
            KGZ: {
                countryName: "Kyrgyzstan",
                characterSets: [],
                phoneCode: "+996"
            },
            LAO: {
                countryName: "Lao People's Democratic Republic",
                characterSets: [],
                phoneCode: "+856"
            },
            LVA: {
                countryName: "Latvia",
                characterSets: ["latin-ext"],
                phoneCode: "+371"
            },
            LBN: {
                countryName: "Lebanon",
                characterSets: ["arabic"],
                phoneCode: "+961"
            },
            LSO: {
                countryName: "Lesotho",
                characterSets: [],
                phoneCode: "+266"
            },
            LBR: {
                countryName: "Liberia",
                characterSets: [],
                phoneCode: "+231"
            },
            LBY: {
                countryName: "Libya",
                characterSets: ["arabic"],
                phoneCode: "+218"
            },
            LIE: {
                countryName: "Liechtenstein",
                characterSets: [],
                phoneCode: "+423"
            },
            LTU: {
                countryName: "Lithuania",
                characterSets: [],
                phoneCode: "+370"
            },
            LUX: {
                countryName: "Luxembourg",
                characterSets: [],
                phoneCode: "+352"
            },
            MAC: {
                countryName: "Macao",
                characterSets: [],
                phoneCode: "+853"
            },
            MKD: {
                countryName: "Macedonia, the former Yugoslav Republic of",
                characterSets: ["cyrillic"],
                phoneCode: "+389"
            },
            MDG: {
                countryName: "Madagascar",
                characterSets: [],
                phoneCode: "+261"
            },
            MWI: {
                countryName: "Malawi",
                characterSets: [],
                phoneCode: "+265"
            },
            MYS: {
                countryName: "Malaysia",
                characterSets: [],
                phoneCode: "+60"
            },
            MDV: {
                countryName: "Maldives",
                characterSets: [],
                phoneCode: "+960"
            },
            MLI: {
                countryName: "Mali",
                characterSets: [],
                phoneCode: "+223"
            },
            MLT: {
                countryName: "Malta",
                characterSets: [],
                phoneCode: "+356"
            },
            MHL: {
                countryName: "Marshall Islands",
                characterSets: [],
                phoneCode: "+692"
            },
            MTQ: {
                countryName: "Martinique",
                characterSets: [],
                phoneCode: "+596"
            },
            MRT: {
                countryName: "Mauritania",
                characterSets: ["arabic"],
                phoneCode: "+222"
            },
            MUS: {
                countryName: "Mauritius",
                characterSets: [],
                phoneCode: "+230"
            },
            MYT: {
                countryName: "Mayotte",
                characterSets: [],
                phoneCode: "+262"
            },
            MEX: {
                countryName: "Mexico",
                characterSets: [],
                phoneCode: "+52"
            },
            FSM: {
                countryName: "Micronesia, Federated States of",
                characterSets: [],
                phoneCode: "+691"
            },
            MDA: {
                countryName: "Moldova, Republic of",
                characterSets: [],
                phoneCode: "+373"
            },
            MCO: {
                countryName: "Monaco",
                characterSets: [],
                phoneCode: "+377"
            },
            MNG: {
                countryName: "Mongolia",
                characterSets: [],
                phoneCode: "+976"
            },
            MNE: {
                countryName: "Montenegro",
                characterSets: ["cyrillic"],
                phoneCode: "+382"
            },
            MSR: {
                countryName: "Montserrat",
                characterSets: [],
                phoneCode: "+1 664"
            },
            MAR: {
                countryName: "Morocco",
                characterSets: ["arabic"],
                phoneCode: "+212"
            },
            MOZ: {
                countryName: "Mozambique",
                characterSets: [],
                phoneCode: "+258"
            },
            MMR: {
                countryName: "Myanmar",
                characterSets: [],
                phoneCode: ""
            },
            NAM: {
                countryName: "Namibia",
                characterSets: [],
                phoneCode: "+264"
            },
            NRU: {
                countryName: "Nauru",
                characterSets: [],
                phoneCode: "+674"
            },
            NPL: {
                countryName: "Nepal",
                characterSets: [],
                phoneCode: "+977"
            },
            NLD: {
                countryName: "Netherlands",
                characterSets: [],
                phoneCode: "+31"
            },
            NCL: {
                countryName: "New Caledonia",
                characterSets: [],
                phoneCode: "+687"
            },
            NZL: {
                countryName: "New Zealand",
                characterSets: [],
                phoneCode: "+64"
            },
            NIC: {
                countryName: "Nicaragua",
                characterSets: [],
                phoneCode: "+505"
            },
            NER: {
                countryName: "Niger",
                characterSets: [],
                phoneCode: "+227"
            },
            NGA: {
                countryName: "Nigeria",
                characterSets: [],
                phoneCode: "+234"
            },
            NIU: {
                countryName: "Niue",
                characterSets: [],
                phoneCode: "+683"
            },
            NFK: {
                countryName: "Norfolk Island",
                characterSets: [],
                phoneCode: "+672"
            },
            MNP: {
                countryName: "Northern Mariana Islands",
                characterSets: [],
                phoneCode: "+1 670"
            },
            NOR: {
                countryName: "Norway",
                characterSets: [],
                phoneCode: "+47"
            },
            OMN: {
                countryName: "Oman",
                characterSets: ["arabic"],
                phoneCode: "+968"
            },
            PAK: {
                countryName: "Pakistan",
                characterSets: [],
                phoneCode: "+92"
            },
            PLW: {
                countryName: "Palau",
                characterSets: [],
                phoneCode: "+680"
            },
            PSE: {
                countryName: "Palestine, State of",
                characterSets: ["arabic"],
                phoneCode: "+970"
            },
            PAN: {
                countryName: "Panama",
                characterSets: [],
                phoneCode: "+507"
            },
            PNG: {
                countryName: "Papua New Guinea",
                characterSets: [],
                phoneCode: "+675"
            },
            PRY: {
                countryName: "Paraguay",
                characterSets: [],
                phoneCode: "+595"
            },
            PER: {
                countryName: "Peru",
                characterSets: [],
                phoneCode: "+51"
            },
            PHL: {
                countryName: "Philippines",
                characterSets: [],
                phoneCode: "+63"
            },
            PCN: {
                countryName: "Pitcairn",
                characterSets: [],
                phoneCode: "+64"
            },
            POL: {
                countryName: "Poland",
                characterSets: ["latin-ext"],
                phoneCode: "+48"
            },
            PRT: {
                countryName: "Portugal",
                characterSets: [],
                phoneCode: "+351"
            },
            PRI: {
                countryName: "Puerto Rico",
                characterSets: [],
                phoneCode: "+1 787"
            },
            QAT: {
                countryName: "Qatar",
                characterSets: ["arabic"],
                phoneCode: "+974"
            },
            REU: {
                countryName: "Réunion",
                characterSets: [],
                phoneCode: "+262"
            },
            ROU: {
                countryName: "Romania",
                characterSets: ["latin-ext"],
                phoneCode: "+40"
            },
            RUS: {
                countryName: "Russian Federation",
                characterSets: ["cyrillic"],
                phoneCode: "+7"
            },
            RWA: {
                countryName: "Rwanda",
                characterSets: [],
                phoneCode: "+250"
            },
            BLM: {
                countryName: "Saint Barthélemy",
                characterSets: [],
                phoneCode: "+590"
            },
            SHN: {
                countryName: "Saint Helena, Ascension and Tristan da Cunha",
                characterSets: [],
                phoneCode: "+290"
            },
            KNA: {
                countryName: "Saint Kitts and Nevis",
                characterSets: [],
                phoneCode: "+1 869"
            },
            LCA: {
                countryName: "Saint Lucia",
                characterSets: [],
                phoneCode: "+1 758"
            },
            MAF: {
                countryName: "Saint Martin (French part)",
                characterSets: [],
                phoneCode: "+590"
            },
            SPM: {
                countryName: "Saint Pierre and Miquelon",
                characterSets: [],
                phoneCode: "+508"
            },
            VCT: {
                countryName: "Saint Vincent and the Grenadines",
                characterSets: [],
                phoneCode: "+1 784"
            },
            WSM: {
                countryName: "Samoa",
                characterSets: [],
                phoneCode: "+685"
            },
            SMR: {
                countryName: "San Marino",
                characterSets: [],
                phoneCode: "+378"
            },
            STP: {
                countryName: "Sao Tome and Principe",
                characterSets: [],
                phoneCode: "+239"
            },
            SAU: {
                countryName: "Saudi Arabia",
                characterSets: ["arabic"],
                phoneCode: "+966"
            },
            SEN: {
                countryName: "Senegal",
                characterSets: [],
                phoneCode: "+221"
            },
            SRB: {
                countryName: "Serbia",
                characterSets: ["cyrillic"],
                phoneCode: "+381"
            },
            SYC: {
                countryName: "Seychelles",
                characterSets: [],
                phoneCode: "+248"
            },
            SLE: {
                countryName: "Sierra Leone",
                characterSets: [],
                phoneCode: "+232"
            },
            SGP: {
                countryName: "Singapore",
                characterSets: [],
                phoneCode: "+65"
            },
            SXM: {
                countryName: "Sint Maarten (Dutch part)",
                characterSets: [],
                phoneCode: "+1 721"
            },
            SVK: {
                countryName: "Slovakia",
                characterSets: [],
                phoneCode: "+421"
            },
            SVN: {
                countryName: "Slovenia",
                characterSets: [],
                phoneCode: "+386"
            },
            SLB: {
                countryName: "Solomon Islands",
                characterSets: [],
                phoneCode: "+677"
            },
            SOM: {
                countryName: "Somalia",
                characterSets: ["arabic"],
                phoneCode: "+252"
            },
            ZAF: {
                countryName: "South Africa",
                characterSets: [],
                phoneCode: "+27"
            },
            SGS: {
                countryName: "South Georgia and the South Sandwich Islands",
                characterSets: [],
                phoneCode: "+500"
            },
            SSD: {
                countryName: "South Sudan",
                characterSets: [],
                phoneCode: "+211"
            },
            ESP: {
                countryName: "Spain",
                characterSets: [],
                phoneCode: "+34"
            },
            LKA: {
                countryName: "Sri Lanka",
                characterSets: [],
                phoneCode: "+94"
            },
            SDN: {
                countryName: "Sudan",
                characterSets: ["arabic"],
                phoneCode: "+249"
            },
            SUR: {
                countryName: "Suriname",
                characterSets: [],
                phoneCode: "+597"
            },
            SJM: {
                countryName: "Svalbard and Jan Mayen",
                characterSets: [],
                phoneCode: "+47 79"
            },
            SWZ: {
                countryName: "Swaziland",
                characterSets: [],
                phoneCode: "+268"
            },
            SWE: {
                countryName: "Sweden",
                characterSets: [],
                phoneCode: "+46"
            },
            CHE: {
                countryName: "Switzerland",
                characterSets: [],
                phoneCode: "+41"
            },
            SYR: {
                countryName: "Syrian Arab Republic",
                characterSets: ["arabic"],
                phoneCode: "+963"
            },
            TWN: {
                countryName: "Taiwan, Province of China",
                characterSets: [],
                phoneCode: "+886"
            },
            TJK: {
                countryName: "Tajikistan",
                characterSets: [],
                phoneCode: "+992"
            },
            TZA: {
                countryName: "Tanzania, United Republic of",
                characterSets: [],
                phoneCode: "+255"
            },
            THA: {
                countryName: "Thailand",
                characterSets: [],
                phoneCode: "+66"
            },
            TLS: {
                countryName: "Timor-Leste",
                characterSets: [],
                phoneCode: ""
            },
            TGO: {
                countryName: "Togo",
                characterSets: [],
                phoneCode: "+228"
            },
            TKL: {
                countryName: "Tokelau",
                characterSets: [],
                phoneCode: "+690"
            },
            TON: {
                countryName: "Tonga",
                characterSets: [],
                phoneCode: "+676"
            },
            TTO: {
                countryName: "Trinidad and Tobago",
                characterSets: [],
                phoneCode: "+1 868"
            },
            TUN: {
                countryName: "Tunisia",
                characterSets: ["arabic"],
                phoneCode: "+216"
            },
            TUR: {
                countryName: "Turkey",
                characterSets: ["latin-ext"],
                phoneCode: "+90"
            },
            TKM: {
                countryName: "Turkmenistan",
                characterSets: [],
                phoneCode: "+993"
            },
            TCA: {
                countryName: "Turks and Caicos Islands",
                characterSets: [],
                phoneCode: "+1 649"
            },
            TUV: {
                countryName: "Tuvalu",
                characterSets: [],
                phoneCode: "+688"
            },
            UGA: {
                countryName: "Uganda",
                characterSets: [],
                phoneCode: "+256"
            },
            UKR: {
                countryName: "Ukraine",
                characterSets: ["cyrillic"],
                phoneCode: "+380"
            },
            ARE: {
                countryName: "United Arab Emirates",
                characterSets: ["arabic"],
                phoneCode: "+971"
            },
            GBR: {
                countryName: "United Kingdom",
                characterSets: [],
                phoneCode: "+44"
            },
            USA: {
                countryName: "United States",
                characterSets: [],
                phoneCode: "+1"
            },
            UMI: {
                countryName: "United States Minor Outlying Islands",
                characterSets: [],
                phoneCode: ""
            },
            URY: {
                countryName: "Uruguay",
                characterSets: [],
                phoneCode: "+598"
            },
            UZB: {
                countryName: "Uzbekistan",
                characterSets: [],
                phoneCode: "+998"
            },
            VUT: {
                countryName: "Vanuatu",
                characterSets: [],
                phoneCode: "+678"
            },
            VEN: {
                countryName: "Venezuela, Bolivarian Republic of",
                characterSets: [],
                phoneCode: "+58"
            },
            VNM: {
                countryName: "Viet Nam",
                characterSets: [],
                phoneCode: "+84"
            },
            VGB: {
                countryName: "Virgin Islands, British",
                characterSets: [],
                phoneCode: ""
            },
            VIR: {
                countryName: "Virgin Islands, U.S.",
                characterSets: [],
                phoneCode: ""
            },
            WLF: {
                countryName: "Wallis and Futuna",
                characterSets: [],
                phoneCode: "+681"
            },
            ESH: {
                countryName: "Western Sahara",
                characterSets: [],
                phoneCode: ""
            },
            YEM: {
                countryName: "Yemen",
                characterSets: ["arabic"],
                phoneCode: "+967"
            },
            ZMB: {
                countryName: "Zambia",
                characterSets: [],
                phoneCode: "+260"
            },
            ZWE: {
                countryName: "Zimbabwe",
                characterSets: [],
                phoneCode: "+263"
            }
        }
    }
}), define("utils/bi/wixappsClassicsLogger", ["lodash", "loggingUtils"], function(e, t) {
    function a(e, t, a) {
        try {
            var r = {
                desc: t.description || u.GENERIC_ERROR.description,
                errorCode: t.code || u.GENERIC_ERROR.code,
                type: d.Type.ERROR,
                issue: t.issue || d.Issue.CLIENT_VIEWER_ERROR,
                severity: t.severity || d.Severity.ERROR,
                category: t.category || d.Category.VIEWER,
                reportType: "error",
                packageName: "blog",
                src: d.CLASSICS_EVENT_SOURCE
            };
            a = a || {}, i.reportBI(e, r, a)
        } catch (e) {}
    }

    function r(t, a, r) {
        try {
            var o = {
                    type: d.Type.USER_ACTION,
                    adapter: "blog-ugc",
                    category: d.Category.VIEWER,
                    reportType: "event",
                    packageName: "blog",
                    params: {},
                    src: d.CLASSICS_EVENT_SOURCE
                },
                n = e.assign({}, o, a);
            r = r || {}, i.reportBI(t, n, r)
        } catch (e) {}
    }

    function o(e, t, a) {
        e.isViewerMode() && (p[t] || (r(e, h.FIRST_TIME_APP_PART_RENDER_START, {
            component_id: t,
            app_part_name: a,
            site_id: e.siteId
        }), p[t] = !0))
    }

    function n(e, t, a, o, n, c) {
        e.isViewerMode() && p[t] && !l[t] && (r(e, h.FIRST_TIME_APP_PART_RENDER_FINISH, {
            component_id: t,
            app_part_name: a,
            app_part_state: o,
            duration: n,
            render_duration: c,
            site_id: e.siteId
        }), l[t] = !0)
    }

    function c(e) {
        a(e, u.APP_PART_FAILED_TO_LOAD)
    }
    var i = t.logger,
        s = {
            ALWAYS: 1,
            ONCE_PER_APP_PART: 10,
            MANY_PER_APP_PART: 30
        },
        d = {
            CLASSICS_EVENT_SOURCE: 12,
            Type: {
                ERROR: 10,
                TIMING: 20,
                FUNNEL: 30,
                USER_ACTION: 40
            },
            Category: {
                EDITOR: 1,
                VIEWER: 2,
                CORE: 3,
                SERVER: 4
            },
            Issue: {
                SERVER_EDITOR_ERROR: 0,
                SERVER_VIEWER_ERROR: 1,
                CLIENT_EDITOR_ERROR: 2,
                CLIENT_VIEWER_ERROR: 4
            },
            Severity: {
                RECOVERABLE: 10,
                WARNING: 20,
                ERROR: 30,
                FATAL: 40
            }
        },
        u = {
            GENERIC_ERROR: {
                code: -2e4,
                description: "classics unspecified error"
            },
            APP_PART_FAILED_TO_LOAD: {
                code: -20011,
                description: "Failed to load app part",
                issue: d.Issue.CLIENT_VIEWER_ERROR
            }
        };
    Object.freeze(u), i.register("{%= name %}", "error", u);
    var h = {
        APP_PART_LOADING_STAGES: {
            adapter: "blog-ugc",
            description: "measure time for a stage",
            eventId: 511,
            params: {
                component_id: "component_id",
                component_type: "component_type",
                startTime: "startTime",
                endTime: "endTime",
                stage_process: "stage_process",
                site_id: "site_id"
            },
            src: 12
        },
        SITE_PUBLISHED_WITH_BLOG: {
            eventId: 64,
            description: "site published with blog"
        },
        CATEGORY_CLICKED: {
            eventId: 502,
            description: "category clicked",
            params: {
                site_id: "site_id"
            }
        },
        TAG_CLICKED: {
            eventId: 503,
            description: "tag clicked",
            params: {
                site_id: "site_id"
            }
        },
        SHARE_CLICKED: {
            eventId: 504,
            description: "share clicked",
            params: {
                type: "type",
                post_id: "post_id",
                site_id: "site_id"
            },
            sampleRatio: s.ALWAYS
        },
        SINGLE_POST_LINK_CLICKED: {
            eventId: 505,
            description: "single post link clicked",
            params: {
                post_id: "post_id",
                site_id: "site_id",
                msid: "msid"
            }
        },
        SELECTION_SHARER_OPENED: {
            eventId: 507,
            description: "share part of text popup",
            params: {
                post_id: "post_id",
                site_id: "site_id"
            }
        },
        SELECTION_SHARER_CLICKED: {
            eventId: 508,
            description: "share part of text click",
            params: {
                type: "type",
                post_id: "post_id",
                site_id: "site_id"
            }
        },
        LIKE_CLICKED: {
            eventId: 512,
            description: "User click on like",
            params: {
                like_status: "like_status",
                post_id: "post_id"
            }
        },
        APP_PART_RENDERED: {
            adapter: "blog-ugc",
            description: "appPart has rendered",
            eventId: 513,
            params: {
                component_id: "component_id",
                app_part_name: "app_part_name",
                duration: "duration",
                app_part_state: "app_part_state",
                occurrence_count: "occurrence_count",
                site_id: "site_id"
            },
            src: 12,
            sampleRatio: s.MANY_PER_APP_PART
        },
        APP_PART_DATA_REQUEST_FINISHED: {
            adapter: "blog-ugc",
            description: "appPart data request returned from server",
            eventId: 514,
            params: {
                component_id: "component_id",
                app_part_name: "app_part_name",
                duration: "duration",
                is_batched: "is_batched",
                occurrence_count: "occurrence_count",
                site_id: "site_id"
            },
            src: 12,
            sampleRatio: s.ONCE_PER_APP_PART
        },
        FIRST_TIME_APP_PART_RENDER_START: {
            adapter: "blog-ugc",
            description: "appPart started first time render",
            eventId: 516,
            params: {
                component_id: "component_id",
                app_part_name: "app_part_name",
                site_id: "site_id"
            },
            src: 12,
            sampleRatio: s.ONCE_PER_APP_PART
        },
        FIRST_TIME_APP_PART_RENDER_FINISH: {
            adapter: "blog-ugc",
            description: "appPart finished rendering with content/error for the first time",
            eventId: 517,
            params: {
                component_id: "component_id",
                app_part_name: "app_part_name",
                app_part_state: "app_part_state",
                duration: "duration",
                render_duration: "render_duration",
                site_id: "site_id"
            },
            src: 12,
            sampleRatio: s.ONCE_PER_APP_PART
        }
    };
    i.register("{%= name %}", "event", h), Object.freeze(h);
    var p = {},
        l = {};
    return {
        events: h,
        errors: u,
        reportError: a,
        reportEvent: r,
        reportFirstTimeRenderStart: o,
        reportFirstTimeRenderFinish: n,
        reportAppPartMetadataError: c
    }
}), define("utils/seo/seoUtils", ["lodash", "platformUtils", "coreUtils"], function(e, t, a) {
    function r(e) {
        if (e) return e.replace(/[",']/g, "").replace().replace(/\n/g, " ")
    }

    function o(t) {
        if (t) return e(t).mapKeys(function(e, t) {
            return r(t)
        }).mapValues(function(e) {
            return r(e)
        }).value()
    }

    function n(t) {
        return e.pickBy(t, function(t) {
            return e.isString(t) && !e.isEmpty(t)
        })
    }

    function c(e) {
        var t = {},
            a = o(e);
        return t.description = a.description, t.keywords = a.keywords, t.robots = "true" === a.noIndex ? "noindex" : "index", t
    }

    function i(e, r) {
        if (!e) return null;
        var o = t.uriUtils.extractImageRelativeUriFromWixUri(e);
        return a.urlUtils.getMediaUrlByContext(o, r.staticMediaUrl, r.mediaRootUrl)
    }

    function s(t, a, r, s) {
        if (!t) return {};
        var d = c(e.omit(t, ["metaTags", "title"])),
            u = o(t.metaTags);
        u && (u["og:image"] = i(u["og:image"], s));
        var h = {
            "og:title": r,
            "og:url": a
        };
        return e.assign(h, n(d), n(u))
    }
    return {
        getSEOMetaTagsForDynamicPage: s,
        sanitizeHTMLInjectionFromString: r
    }
}), define("utils/core/FullSiteData", ["lodash", "mobx", "dataFixer", "siteUtils", "utils/seo/seoUtils", "experiment"], function(e, t, a, r, o, n) {
    function c(t, a) {
        if (a.content) {
            var r = e(a).pick(["name", "property"]).keys().head(),
                o = {};
            o[r] = a[r], e.find(t, o) || t.push(a)
        }
    }

    function i(o) {
        o && (o && o.wixData && a.deprecatedSiteModelMigrater(o), r.SiteData.call(this, o, e.get), t.extendObservable(this, {
            observableUpdateIndex: 0
        }), n.isOpen("sv_dpages", {
            rendererModel: o.rendererModel
        }) && (this.dynamicPages.headData = {}, this.dynamicPages.data = {}, this.dynamicPages.currMetaTags = {}), this.pageIdToOgTags = {}, this.pageIdToTwitterTags = {}, e.bindAll(this, ["getDynamicPageTitle", "getCurrentUrlPageTitle", "getCurrDynamicPageMetaTags", "resetCurrDynamicPageMetaTags", "getDynamicPageSEOMetaData", "addDynamicPageData", "getDynamicPageData", "addDynamicPageHeadData", "getDynamicPageHeadData", "getPageOgTags", "setPageOgTags", "getPageSEOMetaData", "getPageTwitterTags", "setPageTwitterTags"]))
    }
    return i.prototype = e.create(r.SiteData.prototype, {
        constructor: i,
        getDynamicPageTitle: function(t) {
            if (n.isOpen("sv_dpages", {
                    rendererModel: this.rendererModel
                }) && this.isDynamicPage(t)) {
                var a = e.get(this.dynamicPages.headData, [t, "title"]);
                if (!a) {
                    var r = e.get(this.dynamicPages.data, [t, "routerDefinition", "prefix"]),
                        c = this.getRootNavigationInfo().innerRoute;
                    return ((this.rendererModel.siteInfo.siteTitleSEO || "") + " | " + r + " " + c).trim()
                }
                return o.sanitizeHTMLInjectionFromString(a)
            }
        },
        getCurrentUrlPageTitle: function() {
            var e = this.rendererModel.siteInfo.siteTitleSEO || "",
                t = this.getCurrentUrlPageId(),
                a = this.getDataByQuery(t),
                r = a.title || "",
                o = a.pageTitleSEO || "",
                n = this.isHomePage(t),
                c = this.getDynamicPageTitle(t);
            return c ? e = c : o ? e = o : n || (e = e + " | " + r), e
        },
        getCurrDynamicPageMetaTags: function() {
            return this.dynamicPages && this.dynamicPages.currMetaTags
        },
        resetCurrDynamicPageMetaTags: function() {
            this.dynamicPages && (this.dynamicPages.currMetaTags = {})
        },
        getDynamicPageSEOMetaData: function(e) {
            var t = this.getDynamicPageHeadData(e),
                a = o.getSEOMetaTagsForDynamicPage(t, this.getCurrentUrl(), this.getCurrentUrlPageTitle(), this.serviceTopology);
            return this.dynamicPages.currMetaTags = a, a
        },
        addDynamicPageData: function(t, a, r) {
            e.set(this.dynamicPages.data, [t], {
                routerData: a,
                routerDefinition: r
            })
        },
        getDynamicPageData: function(e) {
            return this.dynamicPages && this.dynamicPages.data && this.isDynamicPage(e) ? this.dynamicPages.data[e || this.getPrimaryPageId()] : null
        },
        addDynamicPageHeadData: function(t, a) {
            e.set(this.dynamicPages.headData, [t], a)
        },
        getDynamicPageHeadData: function(e) {
            return this.dynamicPages && this.dynamicPages.headData ? this.dynamicPages.headData[e || this.getPrimaryPageId()] : null
        },
        getPageOgTags: function(t, a) {
            e.isUndefined(this.pageIdToOgTags[t]) && (this.pageIdToOgTags[t] = []);
            var r = e.cloneDeep(this.pageIdToOgTags[t]);
            return c(r, {
                property: "og:title",
                content: this.getCurrentUrlPageTitle()
            }), c(r, {
                property: "og:url",
                content: this.getCurrentUrl()
            }), c(r, {
                property: "og:description",
                content: e.get(a, "descriptionSEO")
            }), r
        },
        setPageOgTags: function(e, t) {
            this.pageIdToOgTags[e] = t
        },
        getPageTwitterTags: function(t) {
            return e.cloneDeep(this.pageIdToTwitterTags[t] || [])
        },
        setPageTwitterTags: function(e, t) {
            this.pageIdToTwitterTags[e] = t
        },
        getPageSEOMetaData: function(t) {
            var a = {},
                r = this.getDataByQuery(t);
            return r && (a.description = r.descriptionSEO, a.keywords = r.metaKeywordsSEO, a.robotIndex = e.get(r, "indexable", !0) ? "index" : "noindex", a.ogTags = this.getPageOgTags(t, r), n.isOpen("sv_twitterMetaTags", {
                rendererModel: this.rendererModel
            }) && (a.twitterTags = this.getPageTwitterTags(t, r))), a
        }
    }), i
}), define("utils/components/componentUtils", ["lodash"], function(e) {
    function t(t, a) {
        return e.includes(t, a) || "masterPage" === a
    }
    return {
        shouldBeRendered: t
    }
}), define("utils/constants/triggerTypesConsts", [], function() {
    return {
        DID_LAYOUT: "didLayout",
        SCROLL: "scroll",
        RESIZE: "resize",
        PAGE_CHANGED: "pageChanged",
        PAGE_RELOADED: "pageReloaded",
        SITE_READY: "siteReady",
        TRANSITION_ENDED: "transitionEnded",
        MODE_CHANGED_INIT: "modeChangedInit",
        MODE_CHANGED_EXECUTE: "modeChangedExecute",
        ACTIONS_ADDED_LAYOUTED: "actionsAddedLayouted",
        ACTIONS_REMOVED: "actionsRemoved"
    }
}), define("utils", ["loggingUtils", "coreUtils", "dataFixer", "siteUtils", "translationsUtils", "wixUrlParser", "utils/fonts/uploadedFontsUtils", "utils/fonts/constants", "utils/fonts/fontsParser", "utils/fonts/renderedFontsList", "utils/mixins/postMessageCompMixin", "utils/socialAPI/socialAPI", "utils/color/colorParser", "utils/routers/routersBackEndRequests", "utils/integrations/fullStory", "utils/santaTypes/santaTypes", "imageClientApi", "utils/media/media", "utils/media/svg", "utils/siteUtils/countryCodes.json", "utils/bi/wixappsClassicsLogger", "utils/core/FullSiteData", "utils/seo/seoUtils", "coreUtilsLib", "utils/components/componentUtils", "utils/constants/triggerTypesConsts"], function(e, t, a, r, o, n, c, i, s, d, u, h, p, l, m, S, g, y, C, N, f, R, P, _, I, T) {
    return {
        renderDoneMixin: r.renderDoneMixin,
        logger: e.logger,
        log: e.log,
        deprecatedSiteModelMigrater: a.deprecatedSiteModelMigrater,
        htmlTransformer: t.htmlTransformer,
        textSecurityFixer: t.textSecurityFixer,
        htmlParser: t.htmlParser,
        throttleUtils: t.throttleUtils,
        keyboardUtils: t.keyboardUtils,
        classNames: t.classNames,
        cookieUtils: t.cookieUtils,
        imageUtils: t.imageUtils,
        dataFixer: a,
        tween: t.tween,
        urlUtils: t.urlUtils,
        routersBackEndRequests: l,
        Store: t.Store,
        mobileViewportFixer: t.mobileViewportFixer,
        dataUtils: t.dataUtils,
        seoUtils: P,
        dateTimeUtils: t.dateTimeUtils,
        validationUtils: t.validationUtils,
        ajaxLibrary: t.ajaxLibrary,
        menuUtils: r.menuUtils,
        fileUploadManager: r.fileUploadManager,
        cssUtils: t.cssUtils,
        linkRenderer: r.linkRenderer,
        fonts: {
            uploadedFontsUtils: c,
            renderedFontsList: d,
            constants: i,
            fontsParser: s
        },
        triggerTypesConsts: T,
        wixUrlParser: n,
        wixUserApi: t.wixUserApi,
        MobileDeviceAnalyzer: r.MobileDeviceAnalyzer,
        FullSiteData: R,
        SiteDataPrivates: t.SiteDataPrivates,
        BootstrapSiteData: r.SiteData,
        hashUtils: t.hashUtils,
        textTransforms: t.textTransforms,
        guidUtils: t.guidUtils,
        arrayUtils: t.arrayUtils,
        stringUtils: t.stringUtils,
        countryCodes: N,
        mediaZoomCalculations: t.mediaZoomCalculations,
        objectUtils: t.objectUtils,
        animationFrame: t.animationFrame,
        scrollAnchors: t.scrollAnchors,
        layoutAnchors: r.layoutAnchors,
        originalValuesMapGenerator: r.originalValuesMapGenerator,
        domMeasurements: t.domMeasurements,
        storage: t.storage,
        style: t.style,
        galleriesCommonLayout: t.galleriesCommonLayout,
        requestsUtil: t.requestsUtil,
        migrateBgDataItem: a.fixBackgroundData.migrateBgDataItem,
        migrateBgString: a.fixBackgroundData.migrateBgString,
        imageTransformDataFixers: a.imageTransformDataFixers,
        timersMixins: _.timersMixins,
        boundingLayout: t.boundingLayout,
        siteConstants: t.siteConstants,
        languages: t.languages,
        componentsAnchorsMetaData: r.componentsAnchorsMetaData,
        verticalMenuCalculations: t.verticalMenuCalculations,
        nonPageItemZoom: t.nonPageItemZoom,
        appPartMediaInnerViewNameUtils: t.appPartMediaInnerViewNameUtils,
        translations: o,
        anchorCyclesHelper: a.anchorCyclesHelper,
        postMessageCompMixin: u,
        colorParser: p,
        reactComponentUtils: t.reactComponentUtils,
        dockUtils: t.dockUtils,
        layout: r.layout,
        positionAndSize: r.positionAndSize,
        viewportUtils: t.viewportUtils,
        containerBackgroundUtils: t.containerBackgroundUtils,
        svgFilters: _.svgFilters,
        svgFeatureDetection: r.svgFeatureDetection,
        math: t.math,
        socialAPI: h,
        functionUtils: t.functionUtils,
        constants: t.constants,
        siteRenderPrivateStuff: {
            fullToDisplayedJson: r.fullToDisplayedJson
        },
        modes: r.modes,
        structureDimensions: r.structureDimensions,
        performance: e.performance,
        newrelic: e.newrelic,
        mediaConsts: t.mediaConsts,
        balataConsts: t.mediaConsts.balataConsts,
        blogAppPartNames: t.blogAppPartNames,
        integrations: {
            fullStory: m
        },
        santaTypes: S,
        imageTransform: g,
        socialShareHandler: r.socialShareHandler,
        media: y,
        svg: C,
        socialCounterDatabaseAPI: r.socialCounterDatabaseAPI,
        errorPages: t.errorPages,
        logWixCodeConsoleMessage: t.logWixCodeConsoleMessage,
        wixappsClassicsLogger: f,
        componentUtils: I,
        sessionFreezer: t.sessionFreezer
    }
});
//# sourceMappingURL=utils.min.js.map