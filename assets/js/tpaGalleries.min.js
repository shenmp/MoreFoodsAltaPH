"use strict";
define("tpaGalleries/galleries/tpaGallery", ["lodash", "core", "utils", "tpa", "color", "coreUtils", "santaProps"], function(e, t, i, s, a, r, o) {
    function n(e) {
        var t = e.split(",");
        return a({
            r: t[0],
            g: t[1],
            b: t[2]
        }).hexString()
    }

    function l(t, s, a) {
        var r, o, l = {};
        return e.forEach(s, function(p, c) {
            r = i.colorParser.getColorValue(t, a[s[c]]), l[c] = e.includes(r, ",") ? n(r) : r, o = a["alpha-" + s[c]], e.isUndefined(o) || (l["alpha" + i.stringUtils.capitalize(c)] = o)
        }), l
    }

    function p(t, i, s) {
        return t.link ? e.merge({}, t, y.renderLink(t.link, i, s), {
            linkType: I[t.link.type]
        }) : t
    }

    function c(t, i, s) {
        return e.map(t, function(e) {
            return p(e, i, s)
        })
    }

    function m(e, t, i, s) {
        return i(r.urlUtils.joinURL(e, "/galleries/" + (s ? "src/" : "target/")) + t + "/" + t + ".html", ["compId", "deviceType", "locale", "viewMode"])
    }

    function u(t, i, s, a, r) {
        return {
            params: {
                props: e.merge({}, t, l(s.THEME_DATA, a, r)),
                quality: s.globalImageQuality,
                marketingLandingPage: s.isExperimentOpen("sv_marketingLandingPage"),
                items: c(i, s.linkRenderInfo, s.rootNavigationInfo),
                mainPageId: s.mainPageId
            },
            eventType: "SETTINGS_UPDATED",
            intent: "addEventListener"
        }
    }

    function d(e, t, s) {
        return {
            item: e,
            timeStamp: i.performance.now(),
            imageIndex: t,
            name: s
        }
    }

    function g(t) {
        return e.map(t, function(t) {
            return e.omit(t, "quality")
        })
    }
    var y = i.linkRenderer,
        h = t.compMixins,
        f = s.tpaMixins,
        I = {
            ExternalLink: "WEBSITE",
            EmailLink: "EMAIL",
            PageLink: "PAGE",
            DocumentLink: "DOCUMENT",
            AnchorLink: "ANCHOR",
            DynamicPageLink: "DYNAMIC_PAGE_LINK"
        };
    return {
        mixins: [h.skinBasedComp, f.tpaUrlBuilder, f.tpaCompApi, h.skinInfo],
        propTypes: {
            id: o.Types.Component.id.isRequired,
            compProp: o.Types.Component.compProp.isRequired,
            compData: o.Types.Component.compData.isRequired,
            linkRenderInfo: o.Types.Link.linkRenderInfo.isRequired,
            rootNavigationInfo: o.Types.Component.rootNavigationInfo.isRequired,
            navigateToPage: o.Types.navigateToPage.isRequired,
            compTheme: o.Types.Component.theme.isRequired,
            style: o.Types.Component.style.isRequired,
            structure: o.Types.Component.structure.isRequired,
            sendPostMessage: o.Types.TPA.sendPostMessage.isRequired,
            santaBase: o.Types.santaBase.isRequired,
            isDebugMode: o.Types.isDebugMode.isRequired,
            globalImageQuality: o.Types.globalImageQuality.isRequired,
            mainPageId: o.Types.mainPageId.isRequired,
            THEME_DATA: o.Types.Theme.THEME_DATA.isRequired,
            isPlayingAllowed: o.Types.RenderFlags.isPlayingAllowed.isRequired,
            tpaComponentsDomAspect: o.Types.SiteAspects.tpaComponentsDomAspect.isRequired,
            isExperimentOpen: o.Types.isExperimentOpen
        },
        messageSent: !1,
        isAlive: !1,
        componentInIframeReady: !1,
        processImageZoom: function(t) {
            var s = t.args[0],
                a = this.props.compData.items[s],
                r = this.props.compData.id,
                o = y.renderImageZoomLink(this.props.linkRenderInfo, this.props.rootNavigationInfo, a, r, void 0, this.props.id);
            if (this.props.rootNavigationInfo.pageItemId !== a.id) {
                var n = y.getLinkUrlFromLinkProps(o),
                    l = e.defaults({
                        pageItemAdditionalData: o["data-page-item-context"]
                    }, i.wixUrlParser.parseUrl(this.props.linkRenderInfo, n));
                this.props.navigateToPage(l)
            }
        },
        processItemClicked: function(e) {
            var t = e.args[0],
                s = this.props.compData.items[t],
                a = this.props.id;
            this.props.handleAction({
                type: "comp",
                name: i.constants.ACTION_TYPES.ITEM_CLICKED,
                sourceId: a,
                pageId: this.props.mainPageId
            }, d(s, t, i.constants.ACTION_TYPES.ITEM_CLICKED))
        },
        getInitialState: function() {
            return this.currStyle = this.props.compTheme, this.lastRenderedStyleData = {}, {
                height: this.props.style.height
            }
        },
        setAppIsAlive: function() {
            this.isAlive = !0, this.askToSendIframeMessage(this.props), this.props.tpaComponentsDomAspect.markComponentIsAlive(this.props.id)
        },
        setComponentInIframeReady: function() {
            this.messageSent = !1, this.componentInIframeReady = !0, this.askToSendIframeMessage(this.props)
        },
        askToSendIframeMessage: function(e) {
            var t = e.compProp,
                i = e.compData,
                s = e.structure.styleId;
            this.debounceIframe && this.shouldDebounceIframe && this.shouldDebounceIframe(t, i, s) ? this.debounceIframe(t, i, s, e) : this.sendIframeMessage(t, i, s, e)
        },
        sendIframeMessage: function(e, t, i, s) {
            var a;
            if (this.isAlive && this.componentInIframeReady && !this.messageSent) {
                var r = this.getOverrideParams ? this.getOverrideParams(e) : e,
                    o = this.getStyleData(i, s);
                a = u(r, t.items, s, this.getStyleProps(), o), this.patchMessageProps && this.patchMessageProps(a.params.props, i), this.props.sendPostMessage(this, a), this.lastRenderedStyleData = o, this.messageSent = !0
            }
        },
        shouldRenderIframe: function(t) {
            var i = g(c(t.compData.items, t.linkRenderInfo, t.rootNavigationInfo)),
                s = g(this.props.compData.items),
                a = this.props.globalImageQuality,
                r = !e.isEqual(a, t.globalImageQuality) || e.every(this.props.compData.items, function(t) {
                    return !(e.isEqual(t.quality, a) || e.isEmpty(t.quality) && e.isEmpty(a))
                }),
                o = !e.isEqual(t.compProp, this.props.compProp) || !e.isEqual(s, i) || r || !e.isEqual(this.getStyleData(t.structure.styleId), this.lastRenderedStyleData);
            return o
        },
        componentWillReceiveProps: function(t) {
            var i = t.compTheme;
            e.isEqual(this.currStyle, i) || (this.currStyle = i, this.messageSent = !1), this.shouldRenderIframe(t) && (this.messageSent = !1), e.isEqual(t.style.height, this.props.style.height) || this.setState({
                height: t.style.height
            }), this.askToSendIframeMessage(t), this.isPlayingAllowed !== this.props.isPlayingAllowed && (this.isPlayingAllowed = this.props.isPlayingAllowed, this.sendEditModeMessage(this.isPlayingAllowed ? "site" : "editor"))
        },
        sendEditModeMessage: function(e) {
            if (this.isAlive && this.componentInIframeReady) {
                var t = {
                    params: {
                        editMode: e
                    },
                    eventType: "EDIT_MODE_CHANGE",
                    intent: "addEventListener"
                };
                this.props.sendPostMessage(this, t)
            }
        },
        getSkinProperties: function() {
            return {
                "": {
                    style: {
                        height: this.state.height || 0,
                        minWidth: 10,
                        minHeight: 10
                    }
                },
                iframe: {
                    style: {
                        height: this.state.height,
                        width: this.props.style.width
                    },
                    className: "tpa-gallery-" + this.getGalleryType(),
                    "data-src": m(this.props.santaBase, this.getGalleryType(), this.buildUrl, this.props.isDebugMode)
                }
            }
        }
    }
}), define("tpaGalleries/galleries/masonry", ["lodash", "tpaGalleries/galleries/tpaGallery"], function(e, t) {
    var i = {
        textColor: "#000",
        descriptionColor: "#000",
        textBackgroundColor: "#fff",
        backgroundMouseoverColor: "#000",
        alphaBackgroundMouseoverColor: .4
    };
    return {
        displayName: "MasonryGallery",
        mixins: [t],
        statics: {
            useSantaTypes: !0
        },
        getGalleryType: function() {
            return "Masonry"
        },
        getStyleProps: function() {
            return {
                textColor: "color1",
                descriptionColor: "color2",
                textBackgroundColor: "color3",
                backgroundMouseoverColor: "color4",
                textButtonColor: "color5"
            }
        },
        patchMessageProps: function(t, s) {
            var a = this.getStyleData(s);
            a.version && 1 !== parseInt(a.version, 10) || e.assign(t, i)
        }
    }
}), define("tpaGalleries/galleries/accordion", ["tpaGalleries/galleries/tpaGallery"], function(e) {
    return {
        displayName: "AccordionGallery",
        mixins: [e],
        statics: {
            useSantaTypes: !0
        },
        getGalleryType: function() {
            return "Accordion"
        },
        getStyleProps: function() {
            return {
                textColor: "color1",
                descriptionColor: "color2",
                textBackgroundColor: "color3",
                borderColor: "color4"
            }
        }
    }
}), define("tpaGalleries/galleries/tpaGalleryCurrentItemMixin", ["lodash", "core", "utils", "santaProps"], function(e, t, i, s) {
    function a(e, t, s) {
        return {
            item: e,
            timeStamp: i.performance.now(),
            imageIndex: t,
            name: s
        }
    }

    function r(t) {
        return {
            currentIndex: e.get(t, "currentIndex", 0),
            isPlaying: e.get(t, "isPlaying")
        }
    }
    return {
        mixins: [t.compMixins.compStateMixin(r)],
        propTypes: {
            id: s.Types.Component.id.isRequired,
            compProp: s.Types.Component.compProp.isRequired,
            compData: s.Types.Component.compData.isRequired,
            sendPostMessage: s.Types.TPA.sendPostMessage.isRequired,
            mainPageId: s.Types.mainPageId.isRequired
        },
        componentDidMount: function() {
            this._itemChangedCallbacksToInvokeOnce = []
        },
        processItemChanged: function(t) {
            var s = t.args[0],
                r = this.props.compData.items[s],
                o = this.props.id;
            this.props.handleAction({
                type: "comp",
                name: i.constants.ACTION_TYPES.IMAGE_CHANGED,
                sourceId: o,
                pageId: this.props.mainPageId
            }, a(r, s, i.constants.ACTION_TYPES.IMAGE_CHANGED)), this.currentIndex !== s && (this.setState({
                currentIndex: s
            }), e.invokeMap(this._itemChangedCallbacksToInvokeOnce, Function.call), this._itemChangedCallbacksToInvokeOnce = [])
        },
        getInitialState: function() {
            return {
                currentIndex: 0,
                isPlaying: this.props.compProp.autoplay
            }
        },
        componentWillReceiveProps: function(t) {
            var i = this.props.compProp.autoplay;
            e.isUndefined(i) || i === t.compProp.autoplay || this.setState({
                isPlaying: t.compProp.autoplay
            })
        },
        sendCommandMessage: function(e) {
            if (this.isAlive && this.componentInIframeReady) {
                var t = {
                    params: {
                        cmd: e
                    },
                    eventType: "SETTINGS_UPDATED",
                    intent: "addEventListener"
                };
                this.props.sendPostMessage(this, t)
            }
        },
        next: function(e) {
            this._itemChangedCallbacksToInvokeOnce.push(e), this.sendCommandMessage("next", e)
        },
        prev: function(e) {
            this._itemChangedCallbacksToInvokeOnce.push(e), this.sendCommandMessage("previous", e)
        }
    }
}), define("tpaGalleries/galleries/impress", ["tpaGalleries/galleries/tpaGallery", "tpaGalleries/galleries/tpaGalleryCurrentItemMixin"], function(e, t) {
    return {
        displayName: "ImpressGallery",
        mixins: [e, t],
        statics: {
            useSantaTypes: !0,
            behaviors: {
                nextSlide: {
                    methodName: "next"
                },
                prevSlide: {
                    methodName: "prev"
                }
            }
        },
        getGalleryType: function() {
            return "Impress"
        },
        getStyleProps: function() {
            return {
                bcgColor1: "color1",
                bcgColor2: "color2",
                bcgColor3: "color3",
                bcgColor4: "color4",
                bcgColor5: "color5",
                textColor: "color6",
                descriptionColor: "color7",
                textBackgroundColor: "color8"
            }
        }
    }
}), define("tpaGalleries/galleries/freestyle", ["tpaGalleries/galleries/tpaGallery"], function(e) {
    return {
        displayName: "FreestyleGallery",
        mixins: [e],
        statics: {
            useSantaTypes: !0
        },
        getGalleryType: function() {
            return "Freestyle"
        },
        getStyleProps: function() {
            return {
                borderColor: "color1"
            }
        }
    }
}), define("tpaGalleries/galleries/collage", ["tpaGalleries/galleries/tpaGallery"], function(e) {
    return {
        displayName: "CollageGallery",
        mixins: [e],
        statics: {
            useSantaTypes: !0
        },
        getGalleryType: function() {
            return "Collage"
        },
        getStyleProps: function() {
            return {
                textColor: "color1",
                descriptionColor: "color2",
                backgroundMouseoverColor: "color3"
            }
        },
        getOverrideParams: function(e) {
            return e.maxImageSize > e.numOfCells && (e.maxImageSize = e.numOfCells), e.minImageSize > e.maxImageSize ? e.minImageSize = e.maxImageSize : e.maxImageSize < e.minImageSize && (e.maxImageSize = e.minImageSize), e
        }
    }
}), define("tpaGalleries/galleries/honeycomb", ["lodash", "tpaGalleries/galleries/tpaGallery", "santaProps"], function(e, t, i) {
    return {
        displayName: "HoneycombGallery",
        mixins: [t],
        propTypes: {
            compProp: i.Types.Component.compProp.isRequired
        },
        statics: {
            useSantaTypes: !0
        },
        getGalleryType: function() {
            return "Honeycomb"
        },
        debounceIframe: e.debounce(function(e, t, i) {
            this.sendIframeMessage(e, t, i, this.props)
        }, 400),
        shouldDebounceIframe: function(e) {
            return e.numOfColumns !== this.props.compProp.numOfColumns
        },
        getStyleProps: function() {
            return {
                textColor: "color1",
                descriptionColor: "color2",
                textBackgroundColor: "color3",
                backgroundMouseoverColor: "color4",
                holesColor: "color5"
            }
        }
    }
}), define("tpaGalleries/galleries/stripShowcase", ["tpaGalleries/galleries/tpaGallery", "tpaGalleries/galleries/tpaGalleryCurrentItemMixin"], function(e, t) {
    return {
        displayName: "StripShowcaseGallery",
        mixins: [e, t],
        statics: {
            useSantaTypes: !0,
            behaviors: {
                nextSlide: {
                    methodName: "next"
                },
                prevSlide: {
                    methodName: "prev"
                }
            }
        },
        getGalleryType: function() {
            return "StripShowcase"
        },
        getStyleProps: function() {
            return {}
        }
    }
}), define("tpaGalleries/galleries/stripSlideshow", ["tpaGalleries/galleries/tpaGallery", "tpaGalleries/galleries/tpaGalleryCurrentItemMixin"], function(e, t) {
    return {
        displayName: "StripSlideshowGallery",
        mixins: [e, t],
        statics: {
            useSantaTypes: !0,
            behaviors: {
                nextSlide: {
                    methodName: "next"
                },
                prevSlide: {
                    methodName: "prev"
                }
            }
        },
        getGalleryType: function() {
            return "StripSlideshow"
        },
        getStyleProps: function() {
            return {
                titleColor: "color1",
                descriptionColor: "color2",
                backgroundColor: "color3"
            }
        }
    }
}), define("tpaGalleries/galleries/thumbnails", ["tpaGalleries/galleries/tpaGallery", "tpaGalleries/galleries/tpaGalleryCurrentItemMixin"], function(e, t) {
    return {
        displayName: "ThumbnailsGallery",
        mixins: [e, t],
        statics: {
            useSantaTypes: !0,
            behaviors: {
                nextSlide: {
                    methodName: "next"
                },
                prevSlide: {
                    methodName: "prev"
                }
            }
        },
        getGalleryType: function() {
            return "Thumbnails"
        },
        getStyleProps: function() {
            return {
                textColor: "color1",
                descriptionColor: "color2",
                textBackgroundColor: "color3"
            }
        }
    }
}), define("tpaGalleries/galleries/tpa3DGallery", ["tpaGalleries/galleries/tpaGallery", "tpaGalleries/galleries/tpaGalleryCurrentItemMixin"], function(e, t) {
    return {
        displayName: "TPA3DGallery",
        mixins: [e, t],
        statics: {
            useSantaTypes: !0,
            behaviors: {
                nextSlide: {
                    methodName: "next"
                },
                prevSlide: {
                    methodName: "prev"
                }
            }
        },
        getGalleryType: function() {
            return "Slicebox"
        },
        getStyleProps: function() {
            return {}
        }
    }
}), define("tpaGalleries/galleries/tpa3DCarousel", ["tpaGalleries/galleries/tpaGallery", "tpaGalleries/galleries/tpaGalleryCurrentItemMixin"], function(e, t) {
    return {
        displayName: "TPA3DCarouselGallery",
        mixins: [e, t],
        statics: {
            useSantaTypes: !0,
            behaviors: {
                nextSlide: {
                    methodName: "next"
                },
                prevSlide: {
                    methodName: "prev"
                }
            }
        },
        getGalleryType: function() {
            return "Carousel"
        },
        getStyleProps: function() {
            return {}
        }
    }
}), define("tpaGalleries", ["tpaGalleries/galleries/masonry", "tpaGalleries/galleries/accordion", "tpaGalleries/galleries/impress", "tpaGalleries/galleries/freestyle", "tpaGalleries/galleries/collage", "tpaGalleries/galleries/honeycomb", "tpaGalleries/galleries/stripShowcase", "tpaGalleries/galleries/stripSlideshow", "tpaGalleries/galleries/thumbnails", "tpaGalleries/galleries/tpa3DGallery", "tpaGalleries/galleries/tpa3DCarousel"], function(e, t, i, s, a, r, o, n, l, p, c) {
    return {
        masonry: e,
        accordion: t,
        impress: i,
        freestyle: s,
        collage: a,
        honeycomb: r,
        stripShowcase: o,
        stripSlideshow: n,
        thumbnails: l,
        tpa3DGallery: p,
        tpa3DCarousel: c
    }
});
//# sourceMappingURL=tpaGalleries.min.js.map