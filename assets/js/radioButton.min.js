"use strict";
define("radioButton", ["react", "lodash", "core", "santaProps"], function(i, t, o, p) {
    return {
        displayName: "RadioButton",
        mixins: [o.compMixins.skinBasedComp, o.compMixins.runTimeCompData],
        statics: {
            useSantaTypes: !0
        },
        propTypes: {
            compData: p.Types.Component.compData.isRequired,
            compProp: p.Types.Component.compProp.isRequired,
            groupName: i.PropTypes.string,
            invalid: i.PropTypes.bool,
            validityIndication: i.PropTypes.bool,
            checked: i.PropTypes.bool,
            onChange: i.PropTypes.func,
            text: i.PropTypes.string
        },
        getSkinProperties: function() {
            var i = {
                invalid: this.props.invalid,
                "with-validation-indication": this.props.validityIndication
            };
            i[this.props.compProp.alignment + "-direction"] = !0;
            var o = "margin" + t.capitalize(this.props.compProp.alignment),
                p = this.props.textStyle || {};
            p[o] = t.get(this.props, "compProp.spacing", 0) + 1;
            var e = {
                    width: this.props.compProp.buttonSize,
                    minWidth: this.props.compProp.buttonSize,
                    height: this.props.compProp.buttonSize
                },
                s = !!this.props.compProp.isDisabled,
                a = t.get(this, "props.compProp.data-error", !1),
                r = this.getComponentPreviewState() || this.props.previewState,
                n = {
                    "": {
                        "data-disabled": s,
                        style: {
                            width: "horizontal" === this.props.layout ? (100 / this.props.numOfOptions).toString() + "%" : "100%"
                        },
                        className: this.classSet(i)
                    },
                    "radio-input": {
                        disabled: s,
                        onChange: this.props.onChange,
                        name: this.props.groupName
                    },
                    "circle-shadow": {
                        style: e
                    },
                    circle: {
                        "data-disabled": s,
                        "data-preview": r
                    },
                    container: {
                        "data-preview": r,
                        "data-disabled": s,
                        "data-error": a
                    },
                    text: {
                        children: [t.get(this.props, "compData.label", "")],
                        style: p
                    }
                };
            return this.props.checked && (n["radio-input"].checked = !0), n
        }
    }
});
//# sourceMappingURL=radioButton.min.js.map