"use strict";
define("googleMap", ["react", "lodash", "core", "utils", "reactDOM", "santaProps"], function(e, r, t, o, a, s) {
    function i(e) {
        return {
            address: e.compData.address,
            addressInfo: e.compData.addressInfo,
            mapType: e.compProp.mapType,
            mapInteractive: e.compProp.mapDragging,
            showZoom: e.compProp.showZoom,
            showStreetView: e.compProp.showStreetView,
            showMapType: e.compProp.showMapType,
            lat: e.compData.latitude,
            long: e.compData.longitude,
            ts: e.structure.layout.width + e.structure.layout.height,
            mapStyle: JSON.stringify(e.compData.mapStyle || [])
        }
    }

    function n(e) {
        var r = "language=" + d(e);
        return o.urlUtils.joinURL(e.santaBase || "", "static/external/googleMap.html?" + r)
    }
    var p = ["da", "de", "en", "es", "fr", "it", "ja", "ko", "nl", "no", "pl", "pt", "ru", "sv", "tr"],
        u = {
            pt: "pt-BR"
        },
        d = function(e) {
            var t = e.compProp.language,
                a = "userLang" === t ? o.wixUserApi.getLanguage(e.requestModelCookie, e.currentUrl) : t,
                s = r.includes(p, a) ? a : "en";
            return u[s] || s
        };
    return {
        displayName: "GoogleMap",
        mixins: [t.compMixins.skinBasedComp],
        propTypes: {
            compData: s.Types.Component.compData.isRequired,
            compProp: s.Types.Component.compProp.isRequired,
            structure: s.Types.Component.structure.isRequired,
            requestModelCookie: s.Types.requestModel.cookie.isRequired,
            currentUrl: s.Types.currentUrl.isRequired,
            santaBase: s.Types.santaBase.isRequired,
            cannotHideIframeWithinRoundedCorners: s.Types.mobile.cannotHideIframeWithinRoundedCorners.isRequired
        },
        statics: {
            useSantaTypes: !0
        },
        getInitialState: function() {
            var e = {};
            return this.props.cannotHideIframeWithinRoundedCorners && (e.$corners = "squared"), this.restartMap(this.props), e
        },
        componentDidMount: function() {
            this.iFrameNode = a.findDOMNode(this.refs.iframe), this.iFrameNode.onload = function() {
                var e = i(this.props);
                this.updateMapParams(e)
            }.bind(this)
        },
        componentWillReceiveProps: function(e) {
            var r = i(e);
            d(this.props) === d(e) ? this.updateMapParams(r) : this.restartMap(e)
        },
        updateMapParams: function(e) {
            a.findDOMNode(this.refs.iframe).contentWindow.postMessage(JSON.stringify(e), "*")
        },
        restartMap: function(e) {
            this.iframeUrl = n(e)
        },
        getMapParamsFromProps: i,
        getSkinProperties: function() {
            return {
                mapContainer: {
                    key: "mapContainer",
                    children: [e.DOM.iframe({
                        ref: "iframe",
                        "data-src": this.iframeUrl,
                        width: "100%",
                        height: "100%",
                        frameBorder: "0",
                        scrolling: "no",
                        "background-color": "red"
                    })]
                }
            }
        }
    }
});
//# sourceMappingURL=googleMap.min.js.map