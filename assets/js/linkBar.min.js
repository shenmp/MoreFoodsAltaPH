"use strict";
define("linkBar/linkBarItem/linkBarItem", ["lodash", "core", "utils", "santaProps", "react", "image"], function(i, e, t, n, o, r) {
    var s = e.compMixins,
        a = t.linkRenderer;
    return {
        displayName: "LinkBarItem",
        mixins: [s.skinBasedComp],
        propTypes: i.assign({
            linkRenderInfo: n.Types.Link.linkRenderInfo.isRequired,
            rootNavigationInfo: n.Types.Component.rootNavigationInfo.isRequired,
            compData: n.Types.Component.compData.isRequired,
            compProp: n.Types.Component.compProp.isRequired,
            style: o.PropTypes.object,
            id: n.Types.Component.id.isRequired,
            itemStyle: o.PropTypes.object
        }, n.santaTypesUtils.getSantaTypesByDefinition(r)),
        statics: {
            useSantaTypes: !0
        },
        getSkinProperties: function() {
            var e = this.props.compData,
                t = this.props.compProp,
                n = {
                    link: e.link ? a.renderLink(e.link, this.props.linkRenderInfo, this.props.rootNavigationInfo) : {
                        style: {
                            cursor: "default"
                        }
                    },
                    image: this.createChildComponent(e, "core.components.Image", "image", {
                        id: this.props.id + "image",
                        ref: "image",
                        imageData: e,
                        containerWidth: t.iconSize,
                        containerHeight: t.iconSize,
                        displayMode: "fill",
                        style: i.assign({}, this.props.style, {
                            position: "absolute"
                        })
                    })
                };
            return n[""] = {
                style: {
                    width: t.iconSize,
                    height: t.iconSize,
                    marginBottom: this.props.itemStyle.marginBottom,
                    marginRight: this.props.itemStyle.marginRight,
                    display: this.props.itemStyle.display
                }
            }, n
        }
    }
}), define("linkBar/linkBar/linkBar", ["lodash", "core", "linkBar/linkBarItem/linkBarItem", "santaProps"], function(i, e, t, n) {
    function o(i, e, t, n, o) {
        if (0 === i) return {
            width: 5,
            height: e
        };
        var r, s, a, p = e + t;
        return n ? (r = Math.min(o, 300), a = Math.floor((r + t) / p), s = Math.ceil(i / a) * e) : (r = e, s = o), {
            width: r,
            height: s
        }
    }

    function r(i) {
        var e = i.compProp.spacing,
            t = 0,
            n = 0,
            o = "block";
        return i.compProp.orientation === a.HORIZ ? (t = e, o = "inline-block") : n = e, {
            display: o,
            marginRight: t,
            marginBottom: n
        }
    }

    function s(i) {
        var e = i.compData.items.length,
            t = i.compProp.iconSize,
            n = i.compProp.spacing,
            r = e * (t + n) - n,
            s = i.compProp.orientation === a.HORIZ;
        return i.isMobileView ? o(e, t, n, s, r) : 0 !== e ? {
            width: s ? r : t,
            height: s ? t : r
        } : void 0
    }
    var a = {
        HORIZ: "HORIZ",
        VERTICAL: "VERTICAL"
    };
    return {
        displayName: "LinkBar",
        mixins: [e.compMixins.skinBasedComp],
        propTypes: i.assign({
            compData: n.Types.Component.compData.isRequired,
            isMobileView: n.Types.isMobileView,
            compProp: n.Types.Component.compProp.isRequired
        }, n.santaTypesUtils.getSantaTypesByDefinition(t)),
        statics: {
            useSantaTypes: !0
        },
        getInitialState: function() {
            var i = {};
            return this.props.isMobileView && (i.$mobile = "mobileView"), i
        },
        getSkinProperties: function() {
            var e = this.props.compData;
            return {
                itemsContainer: {
                    children: i.map(e.items, function(i, e) {
                        return this.createChildComponent(i, "wysiwyg.viewer.components.LinkBarItem", "imageItem", {
                            itemStyle: r(this.props),
                            ref: e,
                            id: this.props.id + e + "image"
                        })
                    }.bind(this))
                },
                "": {
                    style: s(this.props)
                }
            }
        }
    }
}), define("linkBar", ["linkBar/linkBar/linkBar", "linkBar/linkBarItem/linkBarItem"], function(i, e) {
    return {
        linkBar: i,
        linkBarItem: e
    }
});
//# sourceMappingURL=linkBar.min.js.map