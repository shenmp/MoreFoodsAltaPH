"use strict";
define("displayer", ["lodash", "react", "reactDOM", "core", "santaProps", "utils", "imageClientApi", "skins", "image"], function(e, i, t, r, a, s, o, p, n) {
    function g(e) {
        if (e) switch (e) {
            case "left":
                return "alignLeft";
            case "center":
                return "alignCenter";
            case "right":
                return "alignRight";
            default:
                return "alignLeft"
        }
    }

    function l(e, i) {
        var t = {
            textAlign: e
        };
        return i && "right" === e && (t.direction = "rtl"), t
    }
    var h = r.compMixins,
        m = s.linkRenderer;
    return {
        displayName: "Displayer",
        mixins: [h.skinBasedComp, h.skinInfo],
        propTypes: e.assign({
            browser: a.Types.Browser.browser.isRequired,
            rootNavigationInfo: a.Types.Component.rootNavigationInfo.isRequired,
            linkRenderInfo: a.Types.Link.linkRenderInfo.isRequired,
            isMobileView: a.Types.isMobileView,
            isMobileDevice: a.Types.Device.isMobileDevice,
            isAndroidOldBrowser: a.Types.Browser.isAndroidOldBrowser,
            isExperimentOpen: a.Types.isExperimentOpen,
            imageIndex: i.PropTypes.number.isRequired,
            compProp: i.PropTypes.object.isRequired,
            compData: i.PropTypes.object.isRequired,
            imageWrapperSize: i.PropTypes.object.isRequired,
            heightDiff: i.PropTypes.number,
            widthDiff: i.PropTypes.number,
            bottomGap: i.PropTypes.number,
            galleryId: i.PropTypes.string,
            isSelected: i.PropTypes.bool,
            galleryDataId: i.PropTypes.string,
            skin: i.PropTypes.string,
            id: i.PropTypes.string,
            showPanelState: i.PropTypes.string,
            zoom: a.Types.NonPageItemZoom.zoom,
            onClick: i.PropTypes.func
        }, a.santaTypesUtils.getSantaTypesByDefinition(n)),
        statics: {
            useSantaTypes: !0
        },
        getInitialState: function() {
            return {
                $showPanel: "defaultPanelState",
                $displayDevice: this.props.isMobileView ? "mobileView" : "desktopView",
                $textAlignmentState: g(this.props.compProp.alignText),
                $selected: this.props.isSelected ? "selected" : "unselected",
                $scaling: this.props.compProp.imageMode || "clipImage",
                $transitionPhase: "noTransition",
                $general: "normal",
                $linkableComponent: this.props.compData.link ? "link" : "noLink"
            }
        },
        _getImageClickAction: function() {
            var e = this.props.compProp,
                i = e.galleryImageOnClickAction;
            return i || (i = !0 === e.expandEnabled ? "zoomMode" : "disabled"), i
        },
        componentDidMount: function() {
            setTimeout(function() {
                var e;
                this.isMounted() && (this.setState({
                    $showPanel: this.props.showPanelState || "notShowPanel"
                }), this.props.isAndroidOldBrowser && this.props.isMobileDevice && ((e = t.findDOMNode(this).classList).add("androidNativeBrowserFix"), e.remove("androidNativeBrowserFix")))
            }.bind(this), 0)
        },
        componentWillReceiveProps: function(e) {
            this.setState({
                $selected: e.isSelected ? "selected" : "unselected"
            })
        },
        getContainerSize: function() {
            var e = this.props.imageWrapperSize.imageWrapperWidth - this.getDisplayerDefaultParam(this.props.skin, "imageWrapperRight") - this.getDisplayerDefaultParam(this.props.skin, "imageWrapperLeft"),
                i = this.props.imageWrapperSize.imageWrapperHeight - this.getDisplayerDefaultParam(this.props.skin, "imageWrapperBottom") - this.getDisplayerDefaultParam(this.props.skin, "imageWrapperTop");
            return this.getFromExports("addMarginToContainer") && (e += this.props.imageWrapperSize.imageWrapperMarginLeft + this.props.imageWrapperSize.imageWrapperMarginRight, i += this.props.imageWrapperSize.imageWrapperMarginTop + this.props.imageWrapperSize.imageWrapperMarginBottom), {
                containerWidth: e,
                containerHeight: i
            }
        },
        getSkinProperties: function() {
            var i = this.props.compData,
                t = this.props.compProp.alignText || "left",
                r = this.getContainerSize(),
                a = r.containerWidth,
                s = r.containerHeight,
                p = {
                    position: "relative",
                    overflow: "hidden"
                },
                n = this.props.isExperimentOpen("sv_fixGridsTextDirection");
            return this.props.browser.ie && this.props.browser.version <= 10 && e.merge(p, {
                border: "1px solid transparent"
            }), {
                "": {
                    onClick: this.props.onClick,
                    onMouseEnter: this.onMouseEnter,
                    onMouseLeave: this.onMouseLeave,
                    "data-image-index": this.props.imageIndex,
                    "data-displayer-width": i.width,
                    "data-displayer-height": i.height,
                    "data-displayer-uri": i.uri,
                    "data-height-diff": this.props.heightDiff,
                    "data-width-diff": this.props.widthDiff,
                    "data-bottom-gap": this.props.bottomGap,
                    "data-image-wrapper-right": this.getDisplayerDefaultParam(this.props.skin, "imageWrapperRight"),
                    "data-image-wrapper-left": this.getDisplayerDefaultParam(this.props.skin, "imageWrapperLeft"),
                    "data-image-wrapper-top": this.getDisplayerDefaultParam(this.props.skin, "imageWrapperTop"),
                    "data-image-wrapper-bottom": this.getDisplayerDefaultParam(this.props.skin, "imageWrapperBottom"),
                    "data-margin-to-container": this.getFromExports("addMarginToContainer")
                },
                imageWrapper: {
                    style: {
                        height: this.props.imageWrapperSize.imageWrapperHeight,
                        width: this.props.imageWrapperSize.imageWrapperWidth,
                        marginLeft: this.props.imageWrapperSize.imageWrapperMarginLeft,
                        marginRight: this.props.imageWrapperSize.imageWrapperMarginRight,
                        marginTop: this.props.imageWrapperSize.imageWrapperMarginTop,
                        marginBottom: this.props.imageWrapperSize.imageWrapperMarginBottom
                    }
                },
                title: {
                    children: i.title || "",
                    style: l(t, n)
                },
                description: {
                    children: this.parseTextIntoLinesArray(i.description) || "",
                    style: l(t, n)
                },
                image: this.createChildComponent(i, "core.components.Image", "image", {
                    ref: "image",
                    id: this.props.id + "image",
                    imageData: i,
                    containerWidth: a > 0 ? Math.round(a) : 16,
                    containerHeight: s > 0 ? Math.round(s) : 16,
                    displayMode: o.fittingTypes.SCALE_TO_FILL,
                    style: p
                }),
                zoom: {
                    style: {
                        cursor: this.getCursor()
                    },
                    addChildBefore: [this.generateZoomNode(), "link"]
                },
                link: {
                    style: {
                        display: "none"
                    }
                }
            }
        },
        parseTextIntoLinesArray: function(t) {
            if (e.isString(t)) {
                var r = t.split(/(?:\r\n|\r|\n)/);
                if (r.length > 1) {
                    var a = [];
                    return e.forEach(r, function(e, t) {
                        a.push(e), t < r.length - 1 && a.push(i.createElement("br", null))
                    }), a
                }
                return t
            }
        },
        onMouseEnter: function() {
            this.setState({
                $general: "rollover"
            })
        },
        onMouseLeave: function() {
            this.setState({
                $general: "normal"
            })
        },
        getCursor: function() {
            var e = this.props.compData,
                i = this._getImageClickAction();
            return "zoomMode" === i || e.link && "goToLink" === i ? "pointer" : "default"
        },
        getLinkData: function() {
            return m.renderLink(this.props.compData.link, this.props.linkRenderInfo, this.props.rootNavigationInfo)
        },
        getDisplayerDefaultParam: function(i, t) {
            var r = this.getSkinExports(),
                a = p.skins[i],
                s = a.paramsDefaults ? a.paramsDefaults[t] : "";
            if (!s) {
                var o = r[t];
                return o ? Math.abs(parseInt(o, 10) || 0) : 0
            }
            return Array.isArray(s) ? e.sumBy(s, function(e) {
                return Math.abs(parseInt(this.getParamFromDefaultSkin(e).value, 10))
            }.bind(this)) : Math.abs(parseInt(s, 10)) || 0
        },
        generateZoomNode: function() {
            var t = this.props.compData,
                r = this._getImageClickAction(),
                a = {
                    draggable: !1,
                    style: e.assign({
                        cursor: this.getCursor(),
                        height: "100%",
                        display: "block",
                        width: "100%",
                        position: "absolute",
                        top: "0px",
                        left: "0px",
                        backgroundColor: "#ffffff",
                        filter: "alpha(opacity=0)",
                        opacity: "0"
                    }, s.style.prefix({
                        userSelect: "none",
                        userDrag: "none",
                        userModify: "read-only"
                    })),
                    "data-page-item-context": this.props.galleryDataId,
                    "data-gallery-id": this.props.galleryId,
                    onDragStart: function(e) {
                        return e.preventDefault(), !1
                    }
                },
                o = {};
            return o = "zoomMode" === r ? this.props.compData.galleryData ? {
                onClick: function() {
                    this.props.zoom(this.props.compData, this.props.compData.galleryData)
                }.bind(this)
            } : m.renderImageZoomLink(this.props.linkRenderInfo, this.props.rootNavigationInfo, t, this.props.galleryDataId, void 0, this.props.galleryId) : t.link && "goToLink" === r ? this.getLinkData() : {
                onClick: function(i) {
                    this.props.handleAction({
                        type: "comp",
                        name: s.constants.ACTION_TYPES.ITEM_CLICKED,
                        sourceId: this.props.galleryId,
                        pageId: this.props.rootId
                    }, function(e, i) {
                        return {
                            item: e,
                            timeStamp: s.performance.now(),
                            imageIndex: i,
                            name: s.constants.ACTION_TYPES.ITEM_CLICKED
                        }
                    }(e.get(this.props, "compData"), e.get(this.props, "imageIndex"))), i.preventDefault(), i.stopPropagation()
                }.bind(this)
            }, e.merge(a, o), i.DOM.a(a)
        },
        setPanelState: function(e) {
            this.setState({
                $showPanel: e
            })
        },
        getPanelState: function() {
            return this.state.$showPanel
        },
        setTransitionPhase: function(e) {
            this.setState({
                $transitionPhase: e
            })
        }
    }
});
//# sourceMappingURL=displayer.min.js.map