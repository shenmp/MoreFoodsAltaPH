"use strict";
define("rssButton", ["core", "utils", "lodash", "santaProps", "image"], function(t, i, e, s, n) {
    function o(t, i) {
        return i.width < i.height ? {
            height: t.height * i.width / t.width,
            width: i.width
        } : {
            height: i.height,
            width: t.width * i.height / t.height
        }
    }

    function r(t) {
        return t ? (t.width === t.height ? t.width = t.height = Math.min(this.props.style.width, this.props.style.height) : e.assign(t, o(t, this.props.style)), this.createChildComponent(t, "core.components.Image", "image", {
            skinPart: "image",
            imageData: t,
            containerWidth: this.props.style.width,
            containerHeight: this.props.style.height,
            displayMode: "full"
        })) : {}
    }

    function a() {
        var t = {};
        if (this.props.compData.link) {
            t = this.props.compData.link;
            var e = this.props.linkRenderInfo,
                s = e.isViewerMode ? e.externalBaseUrl : i.urlUtils.baseUrl(e.externalBaseUrl);
            t.url = i.urlUtils.joinURL(s, p), t = i.linkRenderer.renderLink(t, e, this.props.rootNavigationInfo)
        }
        return t.title = this.props.compData.alt, t.style = {
            width: this.props.style.width,
            height: this.props.style.height
        }, t
    }
    var h = t.compMixins,
        p = "feed.xml";
    return {
        displayName: "RSSButton",
        mixins: [h.timeoutsMixin, h.skinBasedComp],
        propTypes: e.assign({
            compData: s.Types.Component.compData.isRequired,
            linkRenderInfo: s.Types.Link.linkRenderInfo.isRequired,
            rootNavigationInfo: s.Types.Component.rootNavigationInfo.isRequired,
            style: s.Types.Component.style.isRequired
        }, s.santaTypesUtils.getSantaTypesByDefinition(n)),
        statics: {
            useSantaTypes: !0
        },
        getSkinProperties: function() {
            var t = this.props.compData.image;
            return {
                image: r.call(this, t),
                link: a.call(this),
                "": {
                    title: t.alt
                }
            }
        }
    }
});
//# sourceMappingURL=rssButton.min.js.map