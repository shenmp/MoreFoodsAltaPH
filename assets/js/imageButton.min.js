"use strict";
define("imageButton", ["lodash", "core", "santaProps", "utils", "imageClientApi", "image"], function(e, t, n, o, s, i) {
    function r(e) {
        e.component.setState({
            $prepare: e.preTransitionClass
        }), o.animationFrame.request(function() {
            e.component.isMounted() && e.component.setState(e.state)
        })
    }

    function a(e) {
        e.state.$pressed || r({
            component: e,
            preTransitionClass: "prepare_dah",
            state: {
                $pressed: "pressed"
            }
        })
    }

    function p(e) {
        e.state.$pressed && r({
            component: e,
            preTransitionClass: "prepare_adh",
            state: {
                $pressed: "",
                $hovered: ""
            }
        })
    }

    function c(e) {
        e.state.$hovered || r({
            component: e,
            preTransitionClass: "prepare_dha",
            state: {
                $hovered: "hovered"
            }
        })
    }

    function u(e) {
        e.state.$pressed ? p(e) : e.state.$hovered && r({
            component: e,
            preTransitionClass: "prepare_hda",
            state: {
                $hovered: ""
            }
        })
    }

    function d(e) {
        e.state.$pressed || r({
            component: e,
            preTransitionClass: "prepare_had",
            state: {
                $pressed: "pressed"
            }
        })
    }

    function l(e) {
        e.state.$pressed && r({
            component: e,
            preTransitionClass: "prepare_ahd",
            state: {
                $pressed: ""
            }
        })
    }

    function f(t, n) {
        var o = t.props.compData[n];
        if (!o) return {};
        o = e.assign({
            alt: t.props.compData.alt
        }, o);
        var i = {
            id: t.props.id + n,
            ref: n,
            skinPart: n,
            imageData: o,
            containerWidth: t.props.style.width,
            containerHeight: t.props.style.height,
            displayMode: s.fittingTypes.LEGACY_FULL
        };
        return t.createChildComponent(o, "core.components.Image", n, i)
    }

    function m(e, t) {
        var n = {};
        return t.linkRef && (n = t.linkRef, n = o.linkRenderer.renderLink(n, t.linkRenderInfo, t.rootNavigationInfo)), n.title = t.title, n.style = {
            width: e.props.style.width,
            height: e.props.style.height
        }, n
    }
    var h = t.compMixins;
    return {
        displayName: "ImageButton",
        mixins: [h.timeoutsMixin, h.skinBasedComp],
        propTypes: e.assign({
            compData: n.Types.Component.compData,
            compProp: n.Types.Component.compProp,
            linkRenderInfo: n.Types.Link.linkRenderInfo,
            rootNavigationInfo: n.Types.Component.rootNavigationInfo,
            style: n.Types.Component.style,
            windowFocusEvents: n.Types.SiteAspects.windowFocusEvents
        }, n.santaTypesUtils.getSantaTypesByDefinition(i)),
        statics: {
            useSantaTypes: !0
        },
        getInitialState: function() {
            return this.blurEventAspect = this.props.windowFocusEvents, this.blurEventAspect.registerToFocusEvent("blur", this), {
                $opacity: "supports_opacity",
                $transition: "transition_" + this.props.compProp.transition,
                $prepare: "",
                $hovered: "",
                $pressed: ""
            }
        },
        getSkinProperties: function() {
            var e = this,
                t = {
                    onMouseEnter: function() {
                        c(e)
                    },
                    onMouseLeave: function() {
                        u(e)
                    },
                    onMouseDown: function() {
                        d(e)
                    },
                    onMouseUp: function() {
                        l(e)
                    },
                    onDragStart: function(e) {
                        e.preventDefault()
                    },
                    onTouchStart: function() {
                        a(e)
                    },
                    onTouchEnd: function() {
                        p(e)
                    },
                    onTouchMove: function() {
                        e.state.$pressed && e.setTimeout(t.onTouchEnd, 500)
                    },
                    onTouchCancel: function() {
                        p(e)
                    },
                    onClick: function() {
                        p(e)
                    },
                    onPointerDown: function() {
                        a(e)
                    },
                    onPointerOut: function() {
                        p(e)
                    }
                };
            return {
                "": t,
                defaultImage: f(e, "defaultImage"),
                hoverImage: f(e, "hoverImage"),
                activeImage: f(e, "activeImage"),
                link: m(e, {
                    linkRef: e.props.compData.link,
                    title: e.props.compData.alt,
                    linkRenderInfo: e.props.linkRenderInfo,
                    rootNavigationInfo: e.props.rootNavigationInfo
                })
            }
        },
        onBlur: function() {
            u(this)
        },
        componentWillUnmount: function() {
            this.blurEventAspect.unregisterFromFocusEvent("blur", this)
        }
    }
});
//# sourceMappingURL=imageButton.min.js.map