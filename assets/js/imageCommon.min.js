"use strict";
define("imageCommon/bi/errors.json", [], function() {
    return {
        IMAGE_FILTER_NOT_VALID: {
            errorName: "image_filter_not_valid",
            errorCode: 556,
            severity: "error",
            params: {
                p1: "filterName"
            }
        }
    }
}), define("imageCommon/bi/errors", ["imageCommon/bi/errors.json", "lodash", "utils"], function(e, t, i) {
    return t.forEach(e, function(e, t) {
        e.errorName = t
    }), i.logger.register("components", "error", e), e
}), define("imageCommon/utils/imageElementFactoryMixin", ["react", "lodash", "utils", "santaProps", "imageCommon/bi/errors"], function(e, t, i, r, s) {
    var a = i.svgFilters;
    return {
        propTypes: {
            staticMediaUrl: r.Types.ServiceTopology.staticMediaUrl,
            reportBI: r.Types.reportBI,
            "data-type": e.PropTypes.string,
            effectName: e.PropTypes.string,
            id: e.PropTypes.string
        },
        imageForLoadEvents: null,
        getSvgStyle: function(e) {
            return {
                style: {
                    width: t.get(e.style, "width", 0),
                    height: t.get(e.style, "height", 0),
                    left: 0,
                    top: 0,
                    overflow: "hidden",
                    position: "absolute",
                    visibility: "hidden"
                }
            }
        },
        assignLoadEvents: function() {
            if (this.eventsToAssign) {
                var e = this.eventsToAssign.readyCallback,
                    t = this.eventsToAssign.errorCallback,
                    i = this.eventsToAssign.uri;
                delete this.eventsToAssign, this.imageForLoadEvents || (this.imageForLoadEvents = new window.Image, e && (this.imageForLoadEvents.onload = e), t && (this.imageForLoadEvents.onerror = t)), this.imageForLoadEvents.src = i
            }
        },
        getImageAttributes: function(e, t, i) {
            var r = t ? {
                WebkitFilter: "url(#" + t + ")",
                filter: "url(#" + t + ")"
            } : {};
            return {
                displayName: "Image Element",
                id: this.props.id + "image",
                ref: "image",
                key: "image" + t,
                style: r,
                alt: i,
                "data-type": this.props["data-type"],
                itemProp: e.itemProp
            }
        },
        getSvgImageAttributes: function(e, i) {
            var r = e.attr || {},
                s = t.assign({
                    displayName: "SVG Image Element",
                    id: this.props.id + "image",
                    ref: "image",
                    key: "image",
                    xlinkHref: e.uri,
                    "data-type": this.props["data-type"]
                }, r.img);
            return i && (s.filter = "url(#" + i + ")"), s
        },
        getSvgAttributes: function(e, i) {
            return t.assign({
                displayName: "SVG Filter",
                ref: "svg",
                key: "svg" + i,
                version: "1.1"
            }, e)
        },
        getValidEffectName: function() {
            var e = "",
                t = this.props.effectName;
            return t && "none" !== t && (a.isFilterExists(t) ? e = t : this.props.reportBI(s.IMAGE_FILTER_NOT_VALID, {
                filterName: t
            })), e
        },
        getSvgDefsAttributes: function(e, t, i) {
            var r = {
                ref: "defs",
                key: "defs" + t
            };
            return t && (r.dangerouslySetInnerHTML = {
                __html: a.getFilter(t, e, i)
            }), r
        },
        getSvgOnlyImageComponent: function(t, i, r) {
            var s, a, n, o = this.getValidEffectName(),
                g = o && o + "-" + this.props.id,
                m = {
                    staticMediaUrl: this.props.staticMediaUrl
                };
            return (i || r) && (this.eventsToAssign = {
                uri: t.uri,
                readyCallback: i,
                errorCallback: r
            }), n = this.getSvgImageAttributes(t, g), s = this.getSvgAttributes(t.attr.container, g), a = o ? this.getSvgDefsAttributes(o, g, m) : {}, e.createElement("svg", s, [e.createElement("defs", a), e.createElement("image", n)])
        },
        getImageComponents: function(i, r, s) {
            var a, n, o, g, m, l, d, p = this.getValidEffectName(),
                u = p && p + "-" + this.props.id,
                c = t.get(this, "props.imageData.alt", "");
            return (r || s) && (this.eventsToAssign = {
                uri: i.uri,
                readyCallback: r,
                errorCallback: s
            }), m = this.getImageAttributes(i, u, c), n = e.createElement("img", m), p ? (d = {
                staticMediaUrl: this.props.staticMediaUrl
            }, l = this.getSvgStyle(m), o = this.getSvgAttributes(l, u), g = this.getSvgDefsAttributes(p, u, d), a = e.createElement("svg", o, e.createElement("defs", g)), [n, a]) : n
        },
        componentDidMount: function() {
            this.assignLoadEvents()
        },
        componentDidUpdate: function() {
            this.assignLoadEvents()
        }
    }
}), define("imageCommon", ["imageCommon/utils/imageElementFactoryMixin"], function(e) {
    return {
        imageElementFactoryMixin: e
    }
});
//# sourceMappingURL=imageCommon.min.js.map