"use strict";
define("spotifyPlayer", ["core", "utils", "santaProps", "lodash"], function(e, t, i, s) {
    function r(e, t, i) {
        var s = {
            uri: e,
            theme: t,
            view: i
        };
        return c + m.toQueryString(s)
    }

    function o(e) {
        var t = {};
        return s.size(e.uri) > 0 && (t.style = {}, t.style.display = "none"), t
    }

    function p(e, t) {
        var i = l[e.size].minH;
        return "large" === e.size && (i += t.width - l[e.size].minW), i
    }

    function n(e, t, i) {
        var o = {};
        return s.size(t.uri) > 0 ? (o["data-src"] = r(t.uri, e.color, e.style), o.style = {
            width: i.width,
            height: p(e, i)
        }) : o.style = {
            display: "none"
        }, o
    }
    var a = e.compMixins,
        m = t.urlUtils,
        c = "https://embed.spotify.com/?",
        l = {
            compact: {
                minW: 250,
                minH: 80
            },
            large: {
                minW: 250,
                minH: 330
            }
        };
    return {
        displayName: "SpotifyPlayer",
        mixins: [a.skinBasedComp],
        propTypes: {
            compData: i.Types.Component.compData.isRequired,
            compProp: i.Types.Component.compProp.isRequired,
            style: i.Types.Component.style.isRequired
        },
        statics: {
            useSantaTypes: !0
        },
        getSkinProperties: function() {
            return {
                "": {
                    style: {
                        height: p(this.props.compProp, this.props.style) + 2
                    }
                },
                iframe: n(this.props.compProp, this.props.compData, this.props.style),
                placeholder: o(this.props.compData)
            }
        }
    }
});
//# sourceMappingURL=spotifyPlayer.min.js.map