"use strict";
define("sliderGallery", ["lodash", "react", "reactDOM", "coreUtils", "siteUtils", "core", "skins", "santaProps", "galleriesCommon", "displayer"], function(e, t, i, s, o, a, r, n, p, h) {
    function d(e, t, i) {
        this.state.currentIndex !== e && (this.props.onImageSelected && (t.type = "imageSelected", t.payload = {
            itemIndex: e,
            imageData: this.props.compData.items[e]
        }, this.props.onImageSelected(t, i)), this.setState({
            currentIndex: e
        }))
    }

    function l(t, i) {
        var s = i.props.selectedItemIndex || 0;
        return {
            currentIndex: e.get(t, ["currentIndex"], s)
        }
    }
    var m = a.compMixins,
        c = p.utils.galleriesHelperFunctions,
        u = s.matrix.scalingCalculations;
    return {
        displayName: "SliderGallery",
        statics: {
            useSantaTypes: !0,
            behaviors: {
                nextSlide: {
                    methodName: "next"
                },
                prevSlide: {
                    methodName: "prev"
                }
            }
        },
        mixins: [m.skinBasedComp, m.skinInfo, m.animationsMixin, m.timeoutsMixin, m.compStateMixin(l)],
        propTypes: e.assign({
            id: n.Types.Component.id.isRequired,
            rootId: n.Types.Component.rootId.isRequired,
            compData: n.Types.Component.compData.isRequired,
            compProp: n.Types.Component.compData.isRequired,
            skin: n.Types.Component.skin.isRequired,
            style: n.Types.Component.style.isRequired,
            isMobileView: n.Types.isMobileView,
            isMobileDevice: n.Types.Device.isMobileDevice,
            isTabletDevice: n.Types.Device.isTabletDevice,
            windowTouchEventsAspect: n.Types.SiteAspects.windowTouchEvents.isRequired,
            getSliderGalleryMeasures: n.Types.__DangerousSantaTypes.getSliderGalleryMeasures,
            onImageSelected: t.PropTypes.func
        }, n.santaTypesUtils.getSantaTypesByDefinition(h)),
        _currentOffset: null,
        _motion: !1,
        _firstChild: null,
        getInitialState: function() {
            return this.props.windowTouchEventsAspect.registerToWindowTouchEvent("touchStart", this), e.assign(l(null, {
                props: this.props.compProp
            }), {
                $mobile: this.props.isMobileDevice || this.props.isTabletDevice ? "mobile" : "notMobile",
                $displayDevice: this.props.isMobileView ? "mobileView" : "desktopView"
            })
        },
        componentWillUnmount: function() {
            this.props.windowTouchEventsAspect.unregisterFromWindowTouchEvent("touchStart", this)
        },
        getSkinProperties: function() {
            this.gap = e.isNumber(this.props.compProp.margin) ? this.props.compProp.margin : 20, this.contentOverflow = !1;
            var t = r.skins[this.props.skin],
                i = t.exports && t.exports.bottomGap || 0,
                s = Math.abs(this.getFromExports("itemContainerAdditionalHeight")),
                o = this.populate(i, s),
                a = Math.abs(this.getFromExports("itemContainerTotalOffset")),
                n = parseFloat(this.props.style.width) - a;
            return this.itemsHolderWidth > n && (this.contentOverflow = !0, o = this.populate(i, s)), {
                imageItem: {},
                images: {
                    children: o,
                    "data-gallery-id": this.props.id
                },
                swipeLeftHitArea: {
                    onMouseEnter: this.prev,
                    onMouseLeave: this._stopMovement,
                    onTouchStart: this.prev,
                    "data-gallery-id": this.props.id
                },
                swipeRightHitArea: {
                    onMouseEnter: this.next,
                    onMouseLeave: this._stopMovement,
                    onTouchStart: this.next,
                    "data-gallery-id": this.props.id
                },
                "": {
                    onSwipeLeft: this.next,
                    onSwipeRight: this.prev,
                    "data-height-diff": c.getSkinHeightDiff(this.props.skin),
                    "data-width-diff": c.getSkinWidthDiff(this.props.skin),
                    "data-bottom-gap": i,
                    "data-additional-height": s
                }
            }
        },
        getChildrenData: function() {
            var e = this.props.compData.items;
            return this.props.compProp.loop && this.contentOverflow ? e.concat(e) : e
        },
        populate: function(t, i) {
            var s = this.props.compProp,
                o = this.props.compData;
            return this.itemsHolderWidth = 0, this.getChildrenData().map(function(a, n) {
                var p = a,
                    h = this.getSkinExports().imageItem.skin,
                    l = this.getParams(["topPadding", "imgHeightDiff"], h),
                    m = c.getDisplayerHeightDiff(r.skins[h], l, this.state.$displayDevice),
                    g = c.getDisplayerWidthDiff(r.skins[h], this.state.$displayDevice),
                    f = Math.floor(this.props.style.height + i),
                    y = this.props.compData.items.length,
                    v = u.getSizeAfterScaling({
                        itemHeight: f,
                        itemWidth: Math.floor(f * (this.props.compProp.aspectRatio || 1)),
                        displayerData: p,
                        imageMode: this.props.compProp.imageMode,
                        heightDiff: m,
                        widthDiff: g,
                        bottomGap: t
                    });
                return this.itemsHolderWidth = this.itemsHolderWidth + v.imageWrapperSize.imageWrapperWidth + this.gap, this.createChildComponent(p, "wysiwyg.viewer.components.Displayer", "imageItem", {
                    rootId: this.props.rootId,
                    currentUrlPageId: this.props.currentUrlPageId,
                    rootNavigationInfo: this.props.rootNavigationInfo,
                    galleryDataId: o.id,
                    imageWrapperSize: v.imageWrapperSize,
                    style: {
                        display: "inline-block",
                        margin: "0 " + (e.isNumber(s.margin) ? s.margin : 20) + "px 0 0",
                        height: v.displayerSize.height,
                        width: v.displayerSize.width
                    },
                    isSelected: this.state.currentIndex === n,
                    onClick: d.bind(this, n),
                    displayerDataQuery: a,
                    galleryId: this.props.id,
                    heightDiff: m,
                    widthDiff: g,
                    bottomGap: t,
                    imageIndex: n % y,
                    key: this.props.id + p.id + "_" + n,
                    ref: "displayer" + n,
                    id: this.props.id + "displayer" + n
                })
            }, this)
        },
        prev: function() {
            this._move(!0)
        },
        next: function() {
            this._move(!1)
        },
        _move: function(e) {
            var t = this.props.compProp.maxSpeed || .05;
            this.slide(e, t, this.props.compProp.loop)
        },
        _stopMovement: function() {
            this._sequenceId && (this.easeStopSequence(this._sequenceId, 1), this._sequenceId = null)
        },
        slide: function(e, t, s) {
            if (this.contentOverflow) {
                var a = this.props.getSliderGalleryMeasures(this.props.id),
                    r = a.imagesWidth - (this.props.compProp.margin || 0),
                    n = a.itemsContainerWidth,
                    p = i.findDOMNode(this.refs.images).offsetLeft,
                    h = s ? -r / 2 : n - r;
                this._stopMovement();
                var d = this.sequence(),
                    l = Math.abs(h) / (60 * t),
                    m = l * (e ? Math.abs(p / h) : 1 - Math.abs(p / h));
                d.add("images", "BasePosition", m, 0, {
                    from: {
                        left: p
                    },
                    to: {
                        left: e ? 0 : h
                    },
                    ease: "Linear.easeNone"
                }), s && d.add("images", "BasePosition", l, 0, {
                    from: {
                        left: e ? h : 0
                    },
                    to: {
                        left: e ? 0 : h
                    },
                    repeat: s ? -1 : 0,
                    immediateRender: !1,
                    ease: "Linear.easeNone"
                }), d.onCompleteAll(function() {
                    var e = this.props.compData.items[this.state.currentIndex];
                    this.handleAction(o.constants.ACTION_TYPES.IMAGE_CHANGED, {
                        item: e,
                        imageIndex: this.state.currentIndex
                    })
                }.bind(this)), this._sequenceId = d.execute({
                    paused: !0
                }), this.easeStartSequence(this._sequenceId, 1), "mobile" === this.state.$mobile && (this.clearTimeoutNamed(this.props.id), this._nextStopTimeout = this.setTimeoutNamed(this.props.id, function() {
                    this._stopMovement()
                }.bind(this), 2e3))
            }
        },
        onWindowTouchStart: function(e) {
            (e.target.getAttribute("data-gallery-id") || e.target.parentNode.getAttribute("data-gallery-id")) !== this.props.id && this._stopMovement()
        }
    }
});
//# sourceMappingURL=sliderGallery.min.js.map