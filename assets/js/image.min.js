"use strict";
define("image", ["lodash", "react", "utils", "core", "santaProps", "imageCommon"], function(e, t, s, i, r, o) {
    function n(t) {
        return e.transform(t, function(t, s, i) {
            return t.push(e.kebabCase(i) + ":" + s), t
        }, []).join(";")
    }
    var p = o.imageElementFactoryMixin;
    return {
        displayName: "Image",
        mixins: [i.compMixins.skinBasedComp, p],
        propTypes: {
            browser: r.Types.Browser.browser.isRequired,
            currentUrl: r.Types.currentUrl,
            onImageUnmount: r.Types.Images.onImageUnmount,
            getMediaFullStaticUrl: r.Types.ServiceTopology.getMediaFullStaticUrl,
            devicePixelRatio: r.Types.Device.devicePixelRatio,
            isExperimentOpen: r.Types.isExperimentOpen,
            containerWidth: t.PropTypes.number.isRequired,
            containerHeight: t.PropTypes.number.isRequired,
            imageData: t.PropTypes.object.isRequired,
            style: t.PropTypes.object,
            quality: t.PropTypes.object,
            alignType: t.PropTypes.string,
            opacity: t.PropTypes.number,
            displayMode: t.PropTypes.string,
            effectName: t.PropTypes.string,
            addItemProp: t.PropTypes.bool,
            imgStyle: t.PropTypes.object,
            "data-gallery-id": t.PropTypes.string,
            "data-page-desc": t.PropTypes.string,
            "data-query": t.PropTypes.string,
            "data-image-index": t.PropTypes.number,
            onMouseEnter: t.PropTypes.func,
            onTouchStart: t.PropTypes.func
        },
        statics: {
            useSantaTypes: !0
        },
        getInitialState: function() {
            return this.cssFiltersSupported = !(this.props.browser.ie || this.props.browser.edge), {
                showPreloader: !1
            }
        },
        componentWillUnmount: function() {
            this.props.onImageUnmount(this.props.id)
        },
        hasEffect: function() {
            return this.props.effectName && "none" !== this.props.effectName
        },
        onImageMouseEnter: function() {
            "function" == typeof this.props.onMouseEnter && this.props.onMouseEnter(this.props.id)
        },
        onImageTouchStart: function() {
            "function" == typeof this.props.onTouchStart && this.props.onTouchStart(this.props.id)
        },
        getDefaultStyles: function(t) {
            return e.pickBy(t, function(e) {
                return "" !== e
            })
        },
        getContainerStyle: function(t) {
            var s = this.getDefaultStyles(this.props.style),
                i = t.css.container,
                r = e.assign({
                    position: "absolute",
                    width: this.props.containerWidth,
                    height: this.props.containerHeight
                }, i, s);
            return this.hasEffect() && (r.WebkitTransform = "translateZ(0)", r.transform = "translateZ(0)"), e.isNumber(this.props.imageData.opacity) && (r.opacity = this.props.imageData.opacity), r
        },
        updateRootStyle: function(t) {
            var s = ["visibility", "transform"],
                i = e.pick(this.props.style, s),
                r = e.omit(this.props.style, s);
            this.hasEffect() && (i.WebkitTransform = "translateZ(0)", i.transform = "translateZ(0)"), e.assign(t, {
                style: i,
                "data-style": n(r)
            })
        },
        getSkinProperties: function() {
            var t, i, r = e.pick(this.props, ["imageData", "containerWidth", "containerHeight", "fittingType", "alignType", "quality", "displayMode", "addItemProp"]);
            this.hasEffect() && !this.cssFiltersSupported ? (i = s.imageUtils.getImageComputedProperties(r, this.props.getMediaFullStaticUrl, this.props.currentUrl, this.props.devicePixelRatio, "svg"), t = this.getSvgOnlyImageComponent(i)) : (i = s.imageUtils.getImageComputedProperties(r, this.props.getMediaFullStaticUrl, this.props.currentUrl, this.props.devicePixelRatio, "img"), t = this.getImageComponents(i));
            var o = this.state.showPreloader && !this.props.isExperimentOpen("removeImagePreloader") ? "circle-preloader white" : "",
                n = e.defaults({
                    addChildren: t
                }, {
                    onMouseEnter: this.onImageMouseEnter,
                    onTouchStart: this.onImageTouchStart
                }, e.omit(this.props, "style"));
            return this.updateRootStyle(n), {
                "": n,
                preloader: {
                    className: o
                }
            }
        },
        getDefaultSkinName: function() {
            return "skins.core.ImageNewSkinZoomable"
        }
    }
});
//# sourceMappingURL=image.min.js.map