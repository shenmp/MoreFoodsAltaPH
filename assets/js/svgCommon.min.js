"use strict";
define("svgCommon/svgPrimitive/svgPrimitive", ["lodash", "react", "core"], function(e, r, i) {
    return {
        displayName: "SvgPrimitive",
        mixins: [i.compMixins.skinBasedComp],
        propTypes: {
            id: r.PropTypes.string.isRequired,
            svgString: r.PropTypes.string.isRequired,
            compData: r.PropTypes.object,
            styleId: r.PropTypes.string
        },
        statics: {
            useSantaTypes: !0
        },
        getSkinProperties: function() {
            return {
                "": {
                    style: this.props.style,
                    className: this.props.styleId,
                    dangerouslySetInnerHTML: {
                        __html: this.props.svgString
                    }
                }
            }
        }
    }
}), define("svgCommon", ["lodash", "color", "svgCommon/svgPrimitive/svgPrimitive"], function(e, r, i) {
    function s(e, i) {
        var s, n = new r(i);
        return e.replace(/fill="(.*?)"/gi, function(e, i) {
            var o = new r(i);
            if (t(o)) {
                var l = 1 - (255 - o.red()) / 255,
                    g = Math.floor(n.red() + (255 - n.red()) * l),
                    p = Math.floor(n.green() + (255 - n.green()) * l),
                    a = Math.floor(n.blue() + (255 - n.blue()) * l);
                return 'fill="' + (s = new r({
                    red: g,
                    green: p,
                    blue: a
                })).hexString() + '"'
            }
            return 'fill="' + i + '"'
        })
    }

    function t(e) {
        return e.red() === e.green() && e.red() === e.blue() && 255 !== e.red()
    }
    return {
        svgPrimitive: i,
        transformToTintColors: s
    }
});
//# sourceMappingURL=svgCommon.min.js.map