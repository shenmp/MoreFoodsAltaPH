"use strict";
define("mediaControls/mediaOverlayControls/mediaOverlayControls", ["lodash", "react", "core", "utils", "santaProps", "svgCommon"], function(t, e, s, i, o, r) {
    var a = i.mediaConsts,
        n = r.transformToTintColors;
    return {
        displayName: "MediaOverlayControls",
        mixins: [s.compMixins.skinBasedComp, s.compMixins.animationsMixin],
        propTypes: {
            mediaAspect: o.Types.SiteAspects.mediaAspect.isRequired,
            handleBehavior: o.Types.Behaviors.handleBehavior.isRequired,
            iconsDescriptor: o.Types.MediaControls.iconsDescriptor,
            THEME_DATA: o.Types.Theme.THEME_DATA,
            playerId: e.PropTypes.string,
            isPlayingAllowed: o.Types.RenderFlags.isPlayingAllowed,
            playerInteraction: e.PropTypes.string,
            playerInHoverState: e.PropTypes.bool
        },
        statics: {
            useSantaTypes: !0
        },
        getDefaultProps: function() {
            return {
                playerInteraction: "click",
                playerInHoverState: !1
            }
        },
        getInitialState: function() {
            return {
                playbackState: a.playbackTypes.WAITING,
                showReplay: !1,
                showPlay: !1
            }
        },
        componentDidMount: function() {
            this.props.playerId && this.props.mediaAspect.registerStateChange(this.props.id, this.props.playerId, this.onStateChange)
        },
        componentWillUnmount: function() {
            this.props.mediaAspect.unregisterStateChange(this.props.id, this.props.playerId)
        },
        componentWillReceiveProps: function(t) {
            var e = this.props.playerId,
                s = t.playerId;
            e !== s && this.props.mediaAspect.unregisterStateChange(this.props.id, e), s && this.props.mediaAspect.registerStateChange(this.props.id, s, this.onStateChange), t.isPlayingAllowed || this.setState({
                showPlay: !0,
                showReplay: !1,
                showPauseIndicator: !1,
                showPlayIndicator: !1
            })
        },
        componentDidUpdate: function(t, e) {
            if (this.shouldAnimateHover(t)) {
                var s = this.props.playerInHoverState ? 1.07 : 1;
                this.animate("indicator", "BaseScale", .2, 0, {
                    to: {
                        scale: s
                    },
                    ease: "Sine.easeOut"
                })
            } else this.shouldShowIndication(e) && (this.animate("indicator", "BaseScale", .3, 0, {
                from: {
                    scale: .8
                },
                to: {
                    scale: 1.2
                },
                ease: "Sine.easeIn"
            }), this.animate("indicator", "BaseFade", .3, 0, {
                from: {
                    opacity: .8
                },
                to: {
                    opacity: 0
                },
                ease: "Sine.easeIn"
            }))
        },
        shouldAnimateHover: function(t) {
            return (this.state.showPlay || this.state.showReplay) && this.props.playerInHoverState !== t.playerInHoverState
        },
        shouldShowIndication: function(t) {
            return this.state.showPlayIndicator && !t.showPlayIndicator || this.state.showPauseIndicator && !t.showPauseIndicator && "click" === this.props.playerInteraction
        },
        onStateChange: function(e) {
            var s = {};
            this.state.playbackState !== e.playbackState && (s.playbackState = e.playbackState), this.state.showPlay || e.playbackState !== a.playbackTypes.IDLE ? this.state.showPlay && e.currentTime > 0 && (s.showPlay = !1) : s.showPlay = !0, t.isEmpty(s) || this.setState(s)
        },
        clickAction: function() {
            var t = this.state.playbackState === a.playbackTypes.PLAYING;
            this.state.showPlay || this.state.showReplay ? this.setState({
                showPauseIndicator: !1,
                showPlayIndicator: !1
            }) : this.setState({
                showPauseIndicator: t,
                showPlayIndicator: !t
            })
        },
        getIconSymbolName: function() {
            return this.state.showPlay ? "playButton" : this.state.showReplay ? "replayButton" : this.state.showPlayIndicator && "click" === this.props.playerInteraction ? "playIndication" : this.state.showPauseIndicator && "click" === this.props.playerInteraction ? "pauseIndication" : null
        },
        getIconComponent: function() {
            var e = this.getIconSymbolName();
            if (!e) return null;
            var s = {
                    skin: "skins.viewer.svgPrimitive.SvgPrimitiveDefaultSkin",
                    styleId: this.props.styleId + "_" + e
                },
                o = t.get(this.props, ["compTheme", "style", "properties", "fillcolor"]),
                r = i.colorParser.getColorValue(this.props.THEME_DATA, o),
                a = n(this.props.iconsDescriptor[e], r),
                p = {
                    id: this.props.id + "indicator",
                    key: e,
                    ref: "indicator",
                    svgString: a,
                    className: this.classSet({
                        indicator: !0,
                        hover: this.props.playerInHoverState
                    })
                };
            return this.createChildComponent(this.props.compData, "wysiwyg.viewer.components.svgPrimitive", s, p)
        },
        getCatcherProperties: function() {
            var t = {};
            return "click" === this.props.playerInteraction && (t.onClick = this.clickAction), t
        },
        getSkinProperties: function() {
            return {
                "": {
                    style: this.props.style,
                    "data-player-id": this.props.playerId
                },
                indicator: this.getIconComponent(),
                catcher: this.getCatcherProperties()
            }
        }
    }
}), define("mediaControls/mediaControlPlay/mediaControlPlay", ["react", "core", "utils", "santaProps"], function(t, e, s, i) {
    function o(t) {
        return t === a.playbackTypes.PLAYING || t === a.playbackTypes.SEEK_PLAYING
    }

    function r(t) {
        var e = "play";
        return t.playbackState !== a.playbackTypes.PLAY_ENDED || t.looped ? o(t.playbackState) && (e = "pause") : e = "replay", e
    }
    var a = s.mediaConsts;
    return {
        displayName: "MediaControlPlay",
        mixins: [e.compMixins.skinBasedComp],
        propTypes: {
            style: t.PropTypes.object,
            playerId: t.PropTypes.string.isRequired,
            iconsDescriptor: t.PropTypes.object,
            mediaAspect: i.Types.SiteAspects.mediaAspect.isRequired,
            handleBehavior: i.Types.Behaviors.handleBehavior.isRequired
        },
        statics: {
            useSantaTypes: !0
        },
        getInitialState: function() {
            return {
                playbackState: a.playbackTypes.WAITING
            }
        },
        componentDidMount: function() {
            this.props.mediaAspect.registerStateChange(this.props.id, this.props.playerId, this.setPlaybackState)
        },
        componentWillUnmount: function() {
            this.props.mediaAspect.unregisterStateChange(this.props.id, this.props.playerId)
        },
        setPlaybackState: function(t) {
            this.state.playbackState !== t.playbackState && this.setState(t)
        },
        clickAction: function() {
            this.props.handleBehavior({
                type: "comp",
                targetId: this.props.playerId,
                name: o(this.state.playbackState) ? "pause" : "play"
            })
        },
        getIconComponent: function(t) {
            var e = {
                    skin: "skins.viewer.svgPrimitive.SvgPrimitiveDefaultSkin",
                    styleId: this.props.styleId + "_" + t
                },
                s = {
                    id: this.props.id + "icon",
                    ref: "icon",
                    svgString: this.props.iconsDescriptor[t]
                };
            return this.createChildComponent(this.props.compData, "wysiwyg.viewer.components.svgPrimitive", e, s)
        },
        getSkinProperties: function() {
            return {
                "": {
                    style: this.props.style
                },
                playButton: {
                    children: this.getIconComponent(r(this.state)),
                    onClick: this.clickAction
                }
            }
        }
    }
}), define("mediaControls/mediaControlFullscreen/mediaControlFullscreen", ["react", "core", "santaProps"], function(t, e, s) {
    function i(t) {
        return t ? "exitFullscreen" : "fullscreen"
    }
    return {
        displayName: "MediaControlFullscreen",
        mixins: [e.compMixins.skinBasedComp],
        propTypes: {
            style: t.PropTypes.object,
            playerId: t.PropTypes.string.isRequired,
            enableFullsceen: t.PropTypes.bool,
            mediaAspect: s.Types.SiteAspects.mediaAspect.isRequired,
            handleBehavior: s.Types.Behaviors.handleBehavior.isRequired
        },
        statics: {
            useSantaTypes: !0
        },
        getInitialState: function() {
            return {
                fullscreen: !1
            }
        },
        componentDidMount: function() {
            this.props.mediaAspect.registerStateChange(this.props.id, this.props.playerId, this.setFullscreenState)
        },
        componentWillUnmount: function() {
            this.props.mediaAspect.unregisterStateChange(this.props.id, this.props.playerId)
        },
        setFullscreenState: function(t) {
            this.state.fullscreen !== t.fullscreen && this.setState({
                fullscreen: t.fullscreen
            })
        },
        clickAction: function() {
            this.props.handleBehavior({
                type: "comp",
                targetId: this.props.playerId,
                name: this.state.fullscreen ? "exitFullscreen" : "enterFullscreen"
            })
        },
        getIconComponent: function(t) {
            var e = {
                    skin: "skins.viewer.svgPrimitive.SvgPrimitiveDefaultSkin",
                    styleId: this.props.styleId + "_" + t
                },
                s = {
                    id: this.props.id + "icon",
                    ref: "icon",
                    svgString: this.props.iconsDescriptor[t]
                };
            return this.createChildComponent(this.props.compData, "wysiwyg.viewer.components.svgPrimitive", e, s)
        },
        getSkinProperties: function() {
            var t = {
                "": {
                    style: this.props.style
                },
                fullscreenButton: {
                    children: this.getIconComponent(i(this.state.fullscreen)),
                    className: this.classSet({
                        "video-fullscreen": this.state.fullscreen,
                        "video-windowed": !this.state.fullscreen,
                        disabled: !this.props.enableFullsceen
                    })
                }
            };
            return this.props.enableFullsceen && (t.fullscreenButton.onClick = this.clickAction), t
        }
    }
}), define("mediaControls/mediaControlVolume/mediaControlVolume", ["lodash", "react", "core", "coreUtils", "santaProps"], function(t, e, s, i, o) {
    function r(t, e) {
        return !1 === e ? "noAudio" : t ? "volumeOff" : "volumeOn"
    }
    var a = i.SimpleDrag;
    return {
        displayName: "MediaControlVolume",
        mixins: [s.compMixins.skinBasedComp],
        propTypes: {
            style: e.PropTypes.object,
            playerId: e.PropTypes.string.isRequired,
            hasAudio: e.PropTypes.bool.isRequired,
            mediaAspect: o.Types.SiteAspects.mediaAspect.isRequired,
            handleBehavior: o.Types.Behaviors.handleBehavior.isRequired
        },
        statics: {
            useSantaTypes: !0
        },
        getInitialState: function() {
            return this.isDragging = !1, {
                muted: !1,
                volume: 0
            }
        },
        getDefaultProps: function() {
            return {
                hasAudio: !0
            }
        },
        componentDidMount: function() {
            this.props.mediaAspect.registerStateChange(this.props.id, this.props.playerId, this.setVolumeState)
        },
        componentWillUnmount: function() {
            this.props.mediaAspect.unregisterStateChange(this.props.id, this.props.playerId)
        },
        setVolumeState: function(t) {
            this.isDragging || this.state.volume === t.volume && this.state.muted === t.muted || this.setState({
                muted: t.muted,
                volume: t.volume,
                hasAudio: this.props.hasAudio
            })
        },
        clickActionMute: function() {
            var t = this.state.muted ? "unMute" : "mute";
            this.props.handleBehavior({
                type: "comp",
                targetId: this.props.playerId,
                name: t
            })
        },
        setVolumeOnSeek: function(t) {
            this.props.handleBehavior({
                type: "comp",
                targetId: this.props.playerId,
                name: "setVolume",
                params: {
                    volume: t.endX / t.maxX
                }
            })
        },
        onDragStart: function(t, e) {
            this.isDragging = !0, this.refs.volumeBarActive.style.width = e.endX / e.maxX * 100 + "%", this.setVolumeOnSeek(e)
        },
        onDrag: function(t, e) {
            this.refs.volumeBarActive.style.width = e.endX / e.maxX * 100 + "%", this.setVolumeOnSeek(e)
        },
        onDragEnd: function(t, e) {
            this.isDragging = !1, this.setVolumeOnSeek(e)
        },
        volumeSeekStart: function(t) {
            a({
                onDragStart: this.onDragStart,
                onDragEnd: this.onDragEnd,
                onDrag: this.onDrag,
                minX: 0,
                maxX: t.target.offsetWidth,
                offsetX: t.clientX - t.currentTarget.getBoundingClientRect().left
            }).start(t)
        },
        getIconComponent: function(t) {
            var e = {
                    skin: "skins.viewer.svgPrimitive.SvgPrimitiveDefaultSkin",
                    styleId: this.props.styleId + "_" + t
                },
                s = {
                    id: this.props.id + "icon",
                    ref: "icon",
                    svgString: this.props.iconsDescriptor[t]
                };
            return this.createChildComponent(this.props.compData, "wysiwyg.viewer.components.svgPrimitive", e, s)
        },
        getSkinProperties: function() {
            var e = {
                "": {
                    style: this.props.style
                },
                volume: {
                    className: this.classSet({
                        muted: this.state.muted,
                        disabled: !this.props.hasAudio
                    })
                },
                mute: {
                    children: this.getIconComponent(r(this.state.muted, this.state.hasAudio))
                },
                volumeBarActive: {
                    style: {
                        width: 100 * this.state.volume + "%"
                    }
                }
            };
            return this.state.muted || t.assign(e, {
                volumeBarDragArea: {
                    onMouseDown: this.volumeSeekStart
                }
            }), this.props.hasAudio && (e.mute.onClick = this.clickActionMute), e
        }
    }
}), define("mediaControls/utils/mediaControlsUtils", [], function() {
    function t(t, e) {
        e && (t %= e);
        var s = new Date(1e3 * t),
            i = s.getUTCHours(),
            o = s.getUTCMinutes(),
            r = s.getUTCSeconds();
        return r < 10 && (r = "0" + r), i ? (o < 10 && (o = "0" + o), i + ":" + o + ":" + r) : o + ":" + r
    }
    return {
        getReadableTime: t
    }
}), define("mediaControls/mediaControlStoryboard/mediaControlStoryboard", ["lodash", "react", "core", "mediaControls/utils/mediaControlsUtils"], function(t, e, s, i) {
    var o = i.getReadableTime;
    return {
        displayName: "MediaControlStoryboard",
        mixins: [s.compMixins.skinBasedComp],
        propTypes: {
            style: e.PropTypes.object,
            iconsDescriptor: e.PropTypes.object.isRequired,
            hidden: e.PropTypes.bool,
            showVideo: e.PropTypes.bool,
            setStateCallback: e.PropTypes.func.isRequired,
            storyboardUrl: e.PropTypes.string,
            videoAspectRatio: e.PropTypes.number,
            playbackErrorCallback: e.PropTypes.func
        },
        statics: {
            useSantaTypes: !0
        },
        componentDidMount: function() {
            this.props.setStateCallback(this.setState.bind(this))
        },
        componentWillUnmount: function() {
            this.props.setStateCallback(null)
        },
        componentDidUpdate: function(t, e) {
            if (this.props.showVideo) {
                this.refs.mediaSource && this.refs.mediaSource.addEventListener("error", this.handlePlaybackError, !0);
                var s = this.refs.video;
                this.props.storyboardUrl !== s.currentSrc && s.load(), s && e.time !== this.state.time && (s.currentTime = this.state.time)
            }
        },
        handlePlaybackError: function() {
            (t.get(this.props, "playbackErrorCallback") || t.noop)()
        },
        getInitialState: function() {
            return {
                time: 0,
                left: 0
            }
        },
        getPreviewDimensions: function(t) {
            return {
                width: Math.round(58 * t) + 4,
                height: 62
            }
        },
        getIconComponent: function(t) {
            var e = {
                    skin: "skins.viewer.svgPrimitive.SvgPrimitiveDefaultSkin",
                    styleId: this.props.styleId + "_" + t
                },
                s = {
                    id: this.props.id + t,
                    ref: t,
                    svgString: this.props.iconsDescriptor[t]
                };
            return this.createChildComponent(this.props.compData, "wysiwyg.viewer.components.svgPrimitive", e, s)
        },
        getSkinProperties: function() {
            var e = {
                    left: this.state.left,
                    visibility: this.props.hidden ? "hidden" : "visible"
                },
                s = this.getPreviewDimensions(this.props.videoAspectRatio);
            return this.props.showVideo ? (e.top = -58, {
                "": {
                    style: t.defaults(e, s, this.props.style)
                },
                video: {
                    onError: this.handlePlaybackError
                },
                mediaSource: {
                    src: this.props.storyboardUrl,
                    onError: this.handlePlaybackError
                },
                label: {
                    children: [o(this.state.time)]
                }
            }) : {
                "": {
                    style: e
                },
                backgroundSymbol: {
                    children: this.getIconComponent("storyboardTime")
                },
                label: {
                    children: [o(this.state.time, 3599)]
                }
            }
        }
    }
}), define("mediaControls/mediaControlProgress/mediaControlProgress", ["lodash", "react", "core", "coreUtils", "santaProps", "mediaControls/mediaControlStoryboard/mediaControlStoryboard"], function(t, e, s, i, o, r) {
    function a(e) {
        return t.includes([n.playbackTypes.SEEK_PLAYING, n.playbackTypes.SEEK_PAUSED, n.playbackTypes.SEEKING], e)
    }
    var n = i.mediaConsts,
        p = i.SimpleDrag;
    return {
        displayName: "MediaControlProgress",
        mixins: [s.compMixins.skinBasedComp],
        propTypes: t.defaults({
            style: e.PropTypes.object,
            playerId: e.PropTypes.string.isRequired,
            mediaAspect: o.Types.SiteAspects.mediaAspect.isRequired,
            handleBehavior: o.Types.Behaviors.handleBehavior.isRequired,
            getMediaQualityState: o.Types.Media.getMediaQualityState,
            serviceTopologyStaticVideoUrl: o.Types.ServiceTopology.staticVideoUrl,
            showStoryboard: e.PropTypes.string,
            storyboardUrl: e.PropTypes.string,
            videoAspectRatio: e.PropTypes.number,
            iconsDescriptor: e.PropTypes.object.isRequired
        }, o.santaTypesUtils.getSantaTypesByDefinition(r)),
        statics: {
            useSantaTypes: !0
        },
        getInitialState: function() {
            return this.isDragging = !1, this.setStoryboardState = null, this.lastPlayHeadPosition = 0, {
                playbackState: n.playbackTypes.WAITING,
                currentTime: 0,
                progress: 0,
                duration: 0,
                isStoryboardVisible: !1,
                storyboardPlaybackError: !1
            }
        },
        getDefaultProps: function() {
            return {
                showVideoInStoryboard: !0,
                showProgressBuffer: !1
            }
        },
        componentDidMount: function() {
            this.props.mediaAspect.registerStateChange(this.props.id, this.props.playerId, this.setState.bind(this))
        },
        componentWillUnmount: function() {
            this.props.mediaAspect.unregisterStateChange(this.props.id, this.props.playerId)
        },
        componentWillUpdate: function(t, e) {
            "idle" === e.storyboardReadyState && this.state.storyboardPlaybackError && this.setState({
                storyboardPlaybackError: !1
            })
        },
        onSeekStart: function(t, e) {
            this.isDragging = !0, this.lastPlayHeadPosition = e.endX / e.maxX * 100 + "%", this.refs.playHead.style.left = this.lastPlayHeadPosition, this.props.handleBehavior({
                type: "comp",
                targetId: this.props.playerId,
                name: "seekStart"
            })
        },
        onSeekEnd: function(t, e) {
            var s = e.endX / e.maxX * this.state.duration;
            this.props.handleBehavior({
                type: "comp",
                targetId: this.props.playerId,
                name: "seekEnd",
                params: {
                    time: s
                }
            }), this.isDragging = !1
        },
        onSeek: function(t, e) {
            this.lastPlayHeadPosition = e.endX / e.maxX * 100 + "%", this.refs.playHead.style.left = this.lastPlayHeadPosition
        },
        seekStartDrag: function(t) {
            this.isDragging || p({
                onDragStart: this.onSeekStart,
                onDragEnd: this.onSeekEnd,
                onDrag: this.onSeek,
                minX: 0,
                maxX: t.target.offsetWidth,
                offsetX: t.nativeEvent.offsetX
            }).start(t)
        },
        getStoryboardComp: function() {
            var t = this.props.showStoryboard;
            if (!t || "none" === t) return null;
            var e = "videoAndTime" === t && this.props.storyboardUrl && !this.state.storyboardPlaybackError,
                s = e ? "storyboard" : "storyboardMinimal",
                i = this.getStoryboardProps("storyboard", e);
            return this.createChildComponent(null, "wysiwyg.viewer.components.MediaControlStoryboard", s, i)
        },
        setStoryboardStateCallback: function(t) {
            this.setStoryboardState = t
        },
        getStoryboardProps: function(t, e) {
            var s = {
                ref: t,
                id: this.props.id + t,
                iconsDescriptor: this.props.iconsDescriptor,
                hidden: !this.state.isStoryboardVisible,
                setStateCallback: this.setStoryboardStateCallback
            };
            return e && (s.videoAspectRatio = this.props.videoAspectRatio, s.storyboardUrl = this.props.serviceTopologyStaticVideoUrl + this.props.storyboardUrl, s.showVideo = !0, s.playbackErrorCallback = this.handleStoryboardError), s
        },
        handleStoryboardError: function() {
            this.setState({
                storyboardPlaybackError: !0
            })
        },
        onStoryboardStart: function() {
            this.setState({
                isStoryboardVisible: !0
            })
        },
        onStoryboardEnd: function() {
            this.setState({
                isStoryboardVisible: !1
            })
        },
        onStoryboardScrub: function(t, e) {
            this.setStoryboardState && this.props.showStoryboard && "none" !== this.props.showStoryboard && this.setStoryboardState({
                left: e.endX,
                time: e.endX / e.maxX * this.state.duration
            }), this.refs.playHeadGhost.style.left = e.endX + "px"
        },
        storyboardStartScrub: function(t) {
            p({
                onDragStart: this.onStoryboardStart,
                onDragEnd: this.onStoryboardEnd,
                onDrag: this.onStoryboardScrub,
                minX: 0,
                maxX: t.target.offsetWidth,
                offsetX: t.clientX - t.currentTarget.getBoundingClientRect().left
            }).start(t)
        },
        getPlayHeadPosition: function(t) {
            return !(this.isDragging || a(this.state.playbackState)) ? this.state.currentTime / this.state.duration * 100 + "%" : t
        },
        getProgressPlaySize: function(t) {
            return !this.isDragging ? t : this.state.currentTime / this.state.duration * 100 + "%"
        },
        getIconComponent: function(t) {
            var e = {
                    skin: "skins.viewer.svgPrimitive.SvgPrimitiveDefaultSkin",
                    styleId: this.props.styleId + "_" + t
                },
                s = {
                    id: this.props.id + t,
                    ref: t,
                    svgString: this.props.iconsDescriptor[t]
                };
            return this.createChildComponent(this.props.compData, "wysiwyg.viewer.components.svgPrimitive", e, s)
        },
        getProgressLoad: function(t, e) {
            return e.showProgressBuffer ? {
                progressLoad: {
                    style: {
                        width: t.progress / t.duration * 100 + "%"
                    }
                }
            } : null
        },
        getSkinProperties: function() {
            this.lastPlayHeadPosition = this.getPlayHeadPosition(this.lastPlayHeadPosition);
            var e = {
                "": {
                    style: this.props.style
                },
                progressDragArea: {
                    onMouseDown: this.seekStartDrag,
                    onMouseEnter: this.storyboardStartScrub
                },
                progressPlay: {
                    style: {
                        width: this.getProgressPlaySize(this.lastPlayHeadPosition)
                    }
                },
                playHead: {
                    children: this.getIconComponent("playhead"),
                    style: {
                        left: this.lastPlayHeadPosition
                    }
                },
                playHeadGhost: {
                    children: this.getIconComponent("playheadGhost"),
                    hidden: !this.state.isStoryboardVisible
                },
                storyboard: this.getStoryboardComp()
            };
            return t.assign(e, this.getProgressLoad(this.state, this.props)), e
        }
    }
}), define("mediaControls/mediaControlTime/mediaControlTime", ["react", "core", "santaProps", "mediaControls/utils/mediaControlsUtils"], function(t, e, s, i) {
    var o = i.getReadableTime;
    return {
        displayName: "MediaControlTime",
        mixins: [e.compMixins.skinBasedComp],
        propTypes: {
            style: t.PropTypes.object,
            playerId: t.PropTypes.string.isRequired,
            mediaAspect: s.Types.SiteAspects.mediaAspect.isRequired
        },
        statics: {
            useSantaTypes: !0
        },
        getInitialState: function() {
            return {
                currentTime: 0,
                duration: 0
            }
        },
        componentDidMount: function() {
            this.props.mediaAspect.registerStateChange(this.props.id, this.props.playerId, this.setState.bind(this))
        },
        componentWillUnmount: function() {
            this.props.mediaAspect.unregisterStateChange(this.props.id, this.props.playerId)
        },
        getSkinProperties: function() {
            return {
                "": {
                    style: this.props.style
                },
                played: {
                    children: [o(this.state.currentTime)]
                },
                total: {
                    children: [o(this.state.duration)]
                }
            }
        }
    }
}), define("mediaControls/mediaControlsContainer/mediaControlsContainer", ["react", "lodash", "core", "santaProps", "utils", "mediaControls/mediaControlPlay/mediaControlPlay", "mediaControls/mediaControlFullscreen/mediaControlFullscreen", "mediaControls/mediaControlVolume/mediaControlVolume", "mediaControls/mediaControlProgress/mediaControlProgress", "mediaControls/mediaControlTime/mediaControlTime"], function(t, e, s, i, o, r, a, n, p, l) {
    var d = o.mediaConsts,
        c = [d.playbackTypes.LOADING, d.playbackTypes.READY, d.playbackTypes.IDLE],
        h = {
            play: {
                componentName: "wysiwyg.viewer.components.MediaControlPlay"
            },
            volume: {
                componentName: "wysiwyg.viewer.components.MediaControlVolume"
            },
            fullscreen: {
                componentName: "wysiwyg.viewer.components.MediaControlFullscreen"
            },
            progress: {
                componentName: "wysiwyg.viewer.components.MediaControlProgress"
            },
            time: {
                componentName: "wysiwyg.viewer.components.MediaControlTime"
            }
        };
    return {
        displayName: "MediaControls",
        mixins: [s.compMixins.skinBasedComp, s.compMixins.animationsMixin],
        propTypes: e.defaults({
            id: i.Types.Component.id.isRequired,
            mediaAspect: i.Types.SiteAspects.mediaAspect.isRequired,
            iconsDescriptor: i.Types.MediaControls.iconsDescriptor,
            compProp: i.Types.Component.compProp,
            componentViewMode: i.Types.RenderFlags.componentViewMode.isRequired,
            playerId: t.PropTypes.string,
            enableFullsceen: t.PropTypes.bool,
            playerInTimedHoverState: t.PropTypes.bool,
            playerInHoverState: t.PropTypes.bool
        }, i.santaTypesUtils.getSantaTypesByDefinition(r), i.santaTypesUtils.getSantaTypesByDefinition(a), i.santaTypesUtils.getSantaTypesByDefinition(n), i.santaTypesUtils.getSantaTypesByDefinition(p), i.santaTypesUtils.getSantaTypesByDefinition(l)),
        statics: {
            useSantaTypes: !0
        },
        getInitialState: function() {
            return {
                playbackState: d.playbackTypes.WAITING
            }
        },
        getDefaultProps: function() {
            return {
                enableFullsceen: !1,
                playerInHoverState: !1
            }
        },
        componentDidMount: function() {
            this.props.playerId && this.props.mediaAspect.registerStateChange(this.props.id, this.props.playerId, this.setPlaybackState)
        },
        componentDidUpdate: function(t, s) {
            var i = !e.includes(c, this.state.playbackState),
                o = this.state.playbackState !== s.playbackState,
                r = "preview" !== this.props.componentViewMode && this.state.playbackState !== d.playbackTypes.PLAYING,
                a = i && this.props.playerInTimedHoverState && this.props.playerInHoverState,
                n = r || a;
            (this.props.playerInTimedHoverState !== t.playerInTimedHoverState || o || this.props.componentViewMode !== t.componentViewMode) && (n ? this.animate("controls", "BaseFade", .2, .2, {
                opacity: 1,
                ease: "Quad.easeOut"
            }) : this.animate("controls", "BaseFade", .15, .2, {
                opacity: 0,
                ease: "Quad.easeIn"
            }))
        },
        componentWillUnmount: function() {
            this.props.mediaAspect.unregisterStateChange(this.props.id, this.props.playerId)
        },
        componentWillReceiveProps: function(t) {
            this.props.playerId !== t.playerId && this.props.mediaAspect.unregisterStateChange(this.props.id, this.props.playerId), t.playerId && this.props.mediaAspect.registerStateChange(this.props.id, this.props.playerId, this.setPlaybackState)
        },
        getProgressProps: function(t) {
            var s = {
                showStoryboard: this.props.compProp.showStoryboard
            };
            return e.assign(s, e.pick(t, ["storyboardUrl", "videoAspectRatio"]))
        },
        setPlaybackState: function(t) {
            this.state.playbackState !== t.playbackState && this.setState({
                playbackState: t.playbackState
            })
        },
        getControl: function(t, s) {
            var i = h[t].componentName,
                o = t,
                r = {
                    height: this.props.style.height
                },
                a = e.assign({
                    ref: t,
                    skinPart: t,
                    id: this.props.id + t,
                    playerId: this.props.playerId,
                    iconsDescriptor: this.props.iconsDescriptor,
                    style: r,
                    className: this.classSet({
                        control: !0
                    })
                }, s);
            return this.createChildComponent(null, i, o, a)
        },
        getSkinProperties: function() {
            var t = this.props.mediaAspect.getControlsData(this.props.playerId),
                e = !1 !== t.hasAudio;
            return {
                "": {
                    style: this.props.style,
                    "data-player-id": this.props.playerId,
                    "data-element-queries-def": "controls",
                    onClick: function(t) {
                        t.stopPropagation()
                    }
                },
                controls: {
                    className: this.classSet({
                        "has-audio": e,
                        controls: !0
                    })
                },
                play: this.getControl("play"),
                volume: this.getControl("volume", {
                    hasAudio: e
                }),
                fullscreen: this.props.enableFullsceen ? this.getControl("fullscreen") : {
                    style: {
                        display: "none"
                    }
                },
                progress: this.getControl("progress", this.getProgressProps(t)),
                time: this.getControl("time")
            }
        }
    }
}), define("mediaControls/utils/mediaControlsDataRequiermentsChecker", ["core", "lodash", "utils", "experiment"], function(t, e, s) {
    function i(t, e) {
        return a.createSvgFetchRequest(t.serviceTopology.mediaRootUrl, t, e)
    }

    function o(t, s) {
        var o = e.get(s, ["style", "style", "properties"]),
            r = e.filter(o, function(t) {
                return e.startsWith(t, "svgshape")
            }),
            a = e.map(r, function(e) {
                return i(t, e)
            });
        return e.compact(a)
    }
    var r = t.dataRequirementsChecker,
        a = s.svg;
    r.registerCheckerForCompType("wysiwyg.viewer.components.MediaOverlayControls", o), r.registerCheckerForCompType("wysiwyg.viewer.components.MediaControls", o)
}), define("mediaControls", ["mediaControls/mediaOverlayControls/mediaOverlayControls", "mediaControls/mediaControlsContainer/mediaControlsContainer", "mediaControls/mediaControlPlay/mediaControlPlay", "mediaControls/mediaControlFullscreen/mediaControlFullscreen", "mediaControls/mediaControlVolume/mediaControlVolume", "mediaControls/mediaControlProgress/mediaControlProgress", "mediaControls/mediaControlTime/mediaControlTime", "mediaControls/mediaControlStoryboard/mediaControlStoryboard", "mediaControls/utils/mediaControlsDataRequiermentsChecker"], function(t, e, s, i, o, r, a, n) {
    return {
        mediaOverlayControls: t,
        mediaControls: e,
        mediaControlPlay: s,
        mediaControlFullscreen: i,
        mediaControlVolume: o,
        mediaControlProgress: r,
        mediaControlTime: a,
        mediaControlStoryboard: n
    }
});
//# sourceMappingURL=mediaControls.min.js.map