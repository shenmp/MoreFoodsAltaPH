"use strict";
define("menuButton", ["lodash", "react", "core", "reactDOM", "santaProps"], function(e, t, s, i, o) {
    function n(e) {
        return (e = e && e.trim()) || "Â "
    }
    var p = s.compMixins;
    return {
        displayName: "MenuButton",
        propTypes: {
            isMobileView: o.Types.isMobileView,
            isMobileDevice: o.Types.Device.isMobileDevice,
            isTabletDevice: o.Types.Device.isTabletDevice,
            compProp: o.Types.Component.compProp,
            compData: o.Types.Component.compData,
            style: o.Types.Component.style,
            refInParent: o.Types.Component.refInParent,
            isContainer: t.PropTypes.bool,
            isSelected: t.PropTypes.bool,
            display: t.PropTypes.string,
            positionInList: t.PropTypes.string,
            dir: t.PropTypes.string,
            mouseEnterHandler: t.PropTypes.func.isRequired,
            mouseLeaveHandler: t.PropTypes.func.isRequired,
            onMouseClick: t.PropTypes.func.isRequired,
            isDropDownButton: t.PropTypes.bool
        },
        statics: {
            useSantaTypes: !0
        },
        mixins: [p.skinBasedComp, p.skinInfo],
        getInitialState: function() {
            return {
                $container: this.props.isContainer ? "drop" : "menu",
                $selected: this.props.isSelected ? "selected" : "",
                $state: "idle",
                $type: this.props.compData.link ? "link" : "header",
                $mobile: this.props.isMobileDevice || this.props.isMobileView || this.props.isTabletDevice ? "mobile" : "notMobile"
            }
        },
        componentWillReceiveProps: function(e) {
            this.setState({
                $selected: e.isSelected ? "selected" : ""
            })
        },
        getSkinProperties: function() {
            var s = this.props.compData,
                i = this.props.compProp.alignText,
                o = {
                    parentConst: t.DOM.a,
                    style: e.merge(this.props.style || {}, {
                        display: this.props.display,
                        position: "relative",
                        boxSizing: "border-box",
                        color: "grey"
                    }),
                    onClick: this.onMouseClick,
                    "data-listposition": this.props.positionInList
                };
            return "mobile" !== this.state.$mobile && e.assign(o, {
                onMouseEnter: this.onMouseEnter,
                onMouseLeave: this.onMouseLeave
            }), s.link && e.merge(o, s.link.render), {
                "": o,
                bg: {
                    style: {
                        textAlign: i
                    }
                },
                label: {
                    children: n(s.label),
                    dir: this.props.dir,
                    style: {
                        textAlign: i
                    }
                }
            }
        },
        onMouseEnter: function() {
            (this.props.compData.link || "__more__" === this.props.refInParent) && this.setState({
                $state: "over"
            });
            var e = i.findDOMNode(this);
            this.props.mouseEnterHandler(this.props.refInParent, e.getAttribute("data-listposition"))
        },
        onMouseLeave: function() {
            this.props.isDropDownButton && this.setIdleState(), this.props.mouseLeaveHandler(this.props.refInParent)
        },
        onMouseClick: function(e) {
            "notMobile" !== this.state.$mobile && this.props.onMouseClick(e, this.props.refInParent, this.props.isDropDownButton)
        },
        setIdleState: function() {
            this.setState({
                $state: "idle"
            })
        }
    }
});
//# sourceMappingURL=menuButton.min.js.map