"use strict";
define("vKShareButton", ["react", "lodash", "core", "santaProps", "utils", "socialCommon"], function(t, e, s, i, r, n) {
    function o(t, s, i) {
        return {
            allowTransparency: "true",
            key: "VKShareButton-" + t.currentUrlPageId,
            frameBorder: "0",
            "data-src": p(t, i),
            scrolling: "no",
            style: e.clone(s)
        }
    }
    var a = s.compMixins,
        u = {
            Button: {
                w: 100,
                h: 21
            },
            ButtonWithoutCounter: {
                w: 64,
                h: 21
            },
            Link: {
                w: 50,
                h: 21
            },
            LinkWithoutIcon: {
                w: 30,
                h: 21
            },
            Icon: {
                w: 36,
                h: 36
            }
        },
        c = u.Button,
        p = function(t, e) {
            var s = t.compData,
                i = {
                    id: t.id,
                    url: e,
                    style: s.style,
                    text: s.text || "Share"
                };
            return t.santaBase + "/static/external/VKShare.html?" + r.urlUtils.toQueryString(i)
        },
        h = function(t, e) {
            var s = u[e] || c;
            return {
                width: t || s.w,
                height: s.h
            }
        };
    return {
        displayName: "VKShareButton",
        mixins: [a.skinBasedComp, n.socialCompMixin],
        statics: {
            useSantaTypes: !0
        },
        propTypes: {
            compData: i.Types.Component.compData.isRequired,
            id: i.Types.Component.id.isRequired,
            santaBase: i.Types.santaBase.isRequired,
            currentUrlPageId: i.Types.currentUrlPageId.isRequired,
            registerToPostMessage: i.Types.VK.registerToPostMessage.isRequired,
            unRegisterToPostMessage: i.Types.VK.unRegisterToPostMessage.isRequired
        },
        onVKPostMessage: function(t) {
            this.setState({
                widthFromVK: t.width
            })
        },
        getInitialState: function() {
            return {}
        },
        componentDidMount: function() {
            this.props.registerToPostMessage(this)
        },
        componentWillUnmount: function() {
            this.props.unRegisterToPostMessage(this)
        },
        getSkinProperties: function() {
            var e = h(this.state.widthFromVK, this.props.compData.style),
                s = this.getSocialUrl(),
                i = o(this.props, e, s);
            return {
                "": {
                    style: e
                },
                iframe: t.DOM.iframe(i)
            }
        }
    }
});
//# sourceMappingURL=vKShareButton.min.js.map