"use strict";
define("comboBoxInput", ["lodash", "react", "core", "santaProps", "textCommon"], function(e, t, o, i, s) {
    function a(e) {
        return t.DOM.option({
            value: e.value,
            default: e.default,
            style: e.style,
            ref: e.ref || e.value,
            disabled: e.disabled,
            key: e.key
        }, e.text)
    }

    function n(t, o, i, s) {
        var n, l = !1,
            p = e.map(t, function(t, o) {
                return l = l || t.value === i, a(e.assign({
                    default: t.value === i,
                    key: o
                }, t))
            });
        return n = o.placeholder ? e.assign({
            disabled: !0,
            default: !l,
            style: {
                display: "none"
            },
            className: s,
            ref: "placeholder",
            key: "placeholder-" + o.placeholder.value
        }, o.placeholder, {
            value: ""
        }) : {
            default: !l,
            style: {
                display: "none"
            },
            className: s,
            text: "",
            value: "",
            ref: "placeholder",
            key: "noPlaceholder"
        }, p.unshift(a(n)), p
    }

    function l(t) {
        return e.get(t, ["compProp", "placeholder", "value"])
    }

    function p(e) {
        return e.compData.value === l(e)
    }

    function r(e) {
        return p(e) ? "" : e.compData.value
    }

    function c(t, o) {
        return t.value === e.get(o, "placeholder.value")
    }

    function u(e) {
        return {
            $validity: e.errorMessage ? "invalid" : "valid"
        }
    }
    var d = o.compMixins,
        h = function(e) {
            return o.compMixins.validatableMixin.getPublicState(e)
        };
    return {
        displayName: "ComboBoxInput",
        mixins: [d.skinBasedComp, d.runTimeCompData, s.textScaleMixin, o.compMixins.inputFocusMixin, o.compMixins.validatableMixin.validatable, o.compMixins.compStateMixin(h)],
        propTypes: {
            compData: i.Types.Component.compData.isRequired,
            compProp: i.Types.Component.compProp.isRequired,
            componentViewMode: i.Types.RenderFlags.componentViewMode,
            onSelectionChange: t.PropTypes.func,
            shouldResetComponent: i.Types.RenderFlags.shouldResetComponent,
            errorMessage: t.PropTypes.string
        },
        statics: {
            useSantaTypes: !0,
            behaviors: e.assign({}, o.compMixins.inputFocusMixin.INPUT_FOCUS_BEHAVIORS, o.compMixins.validatableMixin.VALIDATABLE_BEHAVIORS)
        },
        focus: function() {
            this.refs.collection.focus()
        },
        blur: function() {
            this.refs.collection.blur()
        },
        getInitialState: function() {
            return e.assign(u(this.props), h(), {
                value: r(this.props),
                defaultValue: this.props.compData.value,
                placeholderValue: l(this.props)
            })
        },
        setCustomValidity: function(e) {
            this.refs.collection.setCustomValidity(e)
        },
        componentWillReceiveProps: function(e) {
            e.shouldResetComponent && e.shouldResetComponent !== this.props.shouldResetComponent && this.hideValidityIndication();
            var t = u(e),
                o = e.compData.value !== this.state.value,
                i = l(e) !== this.state.placeholderValue;
            (o || i || this.props.onSelectionChange) && (t.value = r(e)), this.setState(t)
        },
        onChange: function(t, o) {
            var i = t.target.value;
            this.updateData({
                value: i
            }), this.props.onSelectionChange ? (t.type = "selectionChanged", t.payload = e.find(this.props.compData.options, {
                value: i
            }) || {}, this.props.onSelectionChange(t, o)) : this.setState({
                value: i
            }), this.handleAction("change", t)
        },
        onFocus: function(e) {
            this.handleAction("focus", e)
        },
        onBlur: function(e) {
            this.handleAction("blur", e)
        },
        getSkinProperties: function() {
            var t = {
                "with-validation-indication": this.shouldShowValidityIndication()
            };
            t[this.props.compProp.textAlignment + "-direction"] = !0;
            var o = {};
            o["padding" + e.capitalize(this.props.compProp.textAlignment)] = this.props.compProp.textPadding;
            var i = this.props.compData.options;
            return {
                "": {
                    className: this.classSet(t),
                    "data-disabled": !!this.props.compProp.isDisabled,
                    "data-preview": e.isFunction(this.getComponentPreviewState) && this.getComponentPreviewState()
                },
                collection: {
                    defaultValue: -1,
                    disabled: !!e.get(this.props, "compProp.isDisabled"),
                    children: n(i, this.props.compProp, this.state.defaultValue, this.classSet({
                        "placeholder-style": !0
                    })),
                    value: this.state.value,
                    required: this.props.compProp.required,
                    onChange: this.onChange,
                    onFocus: this.onFocus,
                    onBlur: this.onBlur,
                    style: e.merge(o, this.getFontSize()),
                    className: this.isPlaceholderSelected() ? this.classSet({
                        "placeholder-style": !0
                    }) : "",
                    "data-preview": e.isFunction(this.getComponentPreviewState) && this.getComponentPreviewState()
                },
                errorMessage: {
                    children: [this.props.errorMessage]
                }
            }
        },
        isPlaceholderSelected: function() {
            return c(this.state, this.props.compProp)
        }
    }
});
//# sourceMappingURL=comboBoxInput.min.js.map