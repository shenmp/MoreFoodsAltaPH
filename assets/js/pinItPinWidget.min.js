a "use strict";
define("pinItPinWidget/layout/PinItPinWidgetLayout", ["layout"], function(t) {
    return t.registerCustomMeasure("wysiwyg.common.components.pinitpinwidget.viewer.PinItPinWidget", function(t, e, i) {
        e.height[t] = i[t].offsetHeight, e.width[t] = i[t].offsetWidth
    }), {}
}), define("pinItPinWidget/aspects/PinterestWidgetPostMessageAspect", ["lodash", "core"], function(t, e) {
    function i(t) {
        var e;
        try {
            if ("pinterest" !== (e = JSON.parse(t.data)).type) return;
            var i = {};
            i = e.showError ? {
                shouldShowError: "error"
            } : {
                shouldShowError: "noError",
                iframeDimensions: {
                    height: e.height,
                    width: e.width
                }
            }, this.siteAspectsSiteAPI.updateAspectComponentData("PinterestWidgetPostMessageAspect", e.compId, i), this.siteAspectsSiteAPI.forceUpdate()
        } catch (t) {
            return
        }
    }
    var s = function(t) {
        this.siteAspectsSiteAPI = t, t.registerToMessage(i.bind(this))
    };
    return e.siteAspectsRegistry.registerSiteAspect("PinterestWidgetPostMessageAspect", s), s
}), define("pinItPinWidget", ["lodash", "core", "santaProps", "utils", "pinItPinWidget/layout/PinItPinWidgetLayout", "pinItPinWidget/aspects/PinterestWidgetPostMessageAspect"], function(t, e, i, s) {
    function r(e, i, s) {
        return s ? n : t.assign({}, e, i)
    }
    var n = {
            height: 274,
            width: 225
        },
        o = function(t) {
            var e = {
                pinUrl: t.compData.pinId,
                compId: t.id
            };
            return t.santaBase + "/static/external/pinterestWidget.html?" + s.urlUtils.toQueryString(e)
        };
    return {
        displayName: "PinItPinWidget",
        mixins: [e.compMixins.skinBasedComp, e.compMixins.skinInfo],
        propTypes: {
            aspectData: i.Types.Pinterest.data.isRequired,
            santaBase: i.Types.santaBase.isRequired,
            compData: i.Types.Component.compData.isRequired,
            style: i.Types.Component.style.isRequired
        },
        statics: {
            useSantaTypes: !0
        },
        getInitialState: function() {
            return {
                $shouldShowError: this.props.aspectData.shouldPresentErrorMessage || "noError"
            }
        },
        componentWillReceiveProps: function() {
            var t = this.props.aspectData.shouldPresentErrorMessage;
            t !== this.state.$shouldShowError && this.setState({
                $shouldShowError: t
            })
        },
        getSkinProperties: function() {
            var e = "error" === this.state.$shouldShowError,
                i = r(this.props.style, this.props.aspectData.iframeDimensions, e);
            return {
                "": {
                    style: t.pick(i, ["width", "height"])
                },
                iframe: {
                    src: o(this.props),
                    style: e ? {
                        height: "0%",
                        width: "0%"
                    } : {
                        height: "100%",
                        width: "100%"
                    }
                }
            }
        }
    }
});
//# sourceMappingURL=pinItPinWidget.min.js.map