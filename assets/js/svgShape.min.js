"use strict";
define("svgShape/util/svgShapeDataRequirementsChecker", ["core", "lodash", "utils"], function(e, s, o) {
    function t(e, o, t) {
        return s(t).without("skins.viewer.svgshape.SvgShapeDefaultSkin").map(s.partial(r.createSvgFetchRequest, e, o, s)).compact().value()
    }

    function n(e, s) {
        return t(e.serviceTopology.mediaRootUrl, e, s.skins)
    }
    var p = e.dataRequirementsChecker,
        r = o.svg;
    return p.registerCheckerForCompType("wysiwyg.viewer.components.svgshape.SvgShape", n), p.registerCheckerForCompType("wysiwyg.viewer.components.PopupCloseIconButton", n), {
        requirementChecker: t,
        DEFAULT_SHAPE: "<svg><g></g></svg>",
        SVG_ROOT: "svgShapes"
    }
}), define("svgShape/components/svgShape", ["lodash", "core", "skins", "svgCommon", "utils", "santaProps", "svgShape/util/svgShapeDataRequirementsChecker"], function(e, s, o, t, n, p) {
    function r(s, o) {
        var t = "";
        return e.forOwn(o, function(e, s) {
            t += " " + s + '="' + e + '"'
        }), "<a" + t + ">" + s + "</a>"
    }
    var i = o.skinsRenderer,
        a = function(e, s) {
            return "skins.viewer.svgshape.SvgShapeDefaultSkin" === s ? '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 376.654 376.654"><g><polygon points="298.185,264.061 149.092,352.082 0,264.061 0,88.021 149.092,0 298.185,88.021 "/></g></svg>' : e || null
        };
    return {
        displayName: "SvgShape",
        mixins: [s.compMixins.baseCompMixin],
        statics: {
            useSantaTypes: !0
        },
        propTypes: {
            id: p.Types.Component.id,
            structure: p.Types.Component.structure,
            skin: p.Types.Component.skin,
            compData: p.Types.Component.compData.isRequired,
            theme: p.Types.Component.theme,
            rootNavigationInfo: p.Types.Component.rootNavigationInfo,
            THEME_DATA: p.Types.Theme.THEME_DATA,
            svgString: p.Types.SvgShape.string,
            styleId: p.Types.Component.styleId,
            linkRenderInfo: p.Types.Link.linkRenderInfo,
            renderFixedPositionContainers: p.Types.RenderFlags.renderFixedPositionContainers,
            serviceTopology: p.Types.ServiceTopology.serviceTopology
        },
        getSkinProperties: function() {
            var e = this.props.skin,
                s = {
                    "": {}
                },
                p = a(this.props.svgString, e, this.props.id, this.props.structure.layout);
            if (p) {
                var u = this.props.theme,
                    l = "",
                    g = o.skins["skins.viewer.svgshape.SvgShapeDefaultSkin"],
                    c = {},
                    h = this.props.compData,
                    v = g.paramsDefaults.fillcolor;
                h && h.link && (p = r(p, n.linkRenderer.renderLink(h.link, this.props.linkRenderInfo, this.props.rootNavigationInfo))), u && (c = {
                    css: g.css,
                    params: g.params,
                    paramsDefaults: g.paramsDefaults
                }, l = '<style type="text/css">' + i.createSkinCss(c, u.style.properties, this.props.THEME_DATA, this.props.styleId, null, this.props.serviceTopology) + "</style>", v = u.style.properties.fillcolor || v), p = t.transformToTintColors(p, n.colorParser.getColorValue(this.props.THEME_DATA, v)), s[""] = {
                    dangerouslySetInnerHTML: {
                        __html: l + p || ""
                    }
                }
            }
            return this.updateRootRefDataStyles(s[""]), s
        },
        render: function() {
            var e = this.getSkinProperties();
            return i.renderSkinHTML(null, e, this.props.styleId, this.props.id, this.props.structure, this.props, this.state)
        }
    }
}), define("svgShape/components/popupCloseIconButton", ["lodash", "svgShape/components/svgShape", "santaProps"], function(e, s, o) {
    function t() {
        this.props.closePopupPage()
    }
    var n = e.cloneDeep(s);
    return n.propTypes = e.defaults({
        closePopupPage: o.Types.popupPage.close
    }, s.propTypes), n.displayName = "PopupCloseIconButton", n.getSkinProperties = function() {
        var e = s.getSkinProperties.apply(this, arguments);
        return e[""].onClick = t.bind(this), e[""].style.cursor = "pointer", e
    }, n
}), define("svgShape", ["svgShape/components/popupCloseIconButton", "svgShape/components/svgShape"], function(e, s) {
    return {
        popupCloseIconButton: e,
        svgShape: s
    }
});
//# sourceMappingURL=svgShape.min.js.map