"use strict";
define("matrixGallery", ["lodash", "skins", "core", "santaProps", "utils", "coreUtils", "galleriesCommon", "displayer"], function(e, t, i, s, o, r, p, a) {
    function l(e, t, i) {
        return i <= e * t ? "fullView" : "hiddenChildren"
    }

    function n(e) {
        return Math.max(d, e)
    }

    function h(t, i) {
        if (t && i && t.skin === i.skin) {
            var s = e.pick(t.style.properties, f),
                o = e.pick(i.style.properties, f);
            return !e.isEqual(s, o)
        }
        return !1
    }
    var m = i.compMixins,
        g = r.matrix.calculations,
        c = r.matrix.scalingCalculations,
        u = p.utils.galleriesHelperFunctions,
        y = o.galleriesCommonLayout,
        d = 70,
        f = ["topPadding", "imgHeightDiff"];
    return {
        displayName: "MatrixGallery",
        propTypes: e.assign({
            shouldResetGalleryToOriginalState: s.Types.RenderFlags.shouldResetGalleryToOriginalState.isRequired,
            compProp: s.Types.Component.compProp.isRequired,
            compData: s.Types.Component.compData.isRequired,
            style: s.Types.Component.style.isRequired,
            skin: s.Types.Component.skin.isRequired,
            compTheme: s.Types.Component.theme,
            currentUrlPageId: s.Types.Component.currentUrlPageId.isRequired,
            isMobileView: s.Types.isMobileView,
            isMobileDevice: s.Types.Device.isMobileDevice,
            isTabletDevice: s.Types.Device.isTabletDevice,
            compActions: s.Types.Component.compActions.isRequired
        }, s.santaTypesUtils.getSantaTypesByDefinition(a)),
        statics: {
            useSantaTypes: !0
        },
        mixins: [m.skinBasedComp, m.skinInfo],
        getInitialState: function() {
            return this.getInitStateAndResetInstance(this.props)
        },
        getInitStateAndResetInstance: function(e) {
            var t = e || this.props;
            this.shouldResetGalleryToOriginalState = t.shouldResetGalleryToOriginalState;
            var i = g.getAvailableRowsNumber(t.compProp.maxRows, t.compProp.numCols, t.compData.items.length),
                s = t.isMobileView ? "mobileView" : "desktopView";
            return this.showMoreClicked = !1, this.galleryHeight = n(t.style.height), this.itemHeight = g.getItemHeight(t.compProp.margin, this.galleryHeight, i, u.getSkinHeightDiff(t.skin)), {
                numberOfRows: i,
                $mobile: t.isMobileDevice || t.isTabletDevice ? "mobile" : "notMobile",
                $displayDevice: s,
                $state: l(i, t.compProp.numCols, t.compData.items.length)
            }
        },
        createDisplayer: function(e, i, s, o) {
            var r = this.getDisplayerSkin(),
                p = t.skins[this.props.skin],
                a = p.exports && p.exports.bottomGap || 0,
                l = this.getParams(f, r),
                n = u.getDisplayerHeightDiff(t.skins[r], l, this.state.$displayDevice),
                h = u.getDisplayerWidthDiff(t.skins[r], this.state.$displayDevice),
                m = c.getSizeAfterScaling({
                    itemHeight: o,
                    itemWidth: s,
                    displayerData: e,
                    imageMode: this.props.compProp.imageMode,
                    widthDiff: h,
                    heightDiff: n,
                    bottomGap: a
                }),
                y = g.getItemPosition(i, s, o, this.props.compProp.margin, this.props.compProp.numCols);
            return this.createChildComponent(e, "wysiwyg.viewer.components.Displayer", "imageItem", {
                key: e.id,
                ref: e.id,
                id: this.props.id + e.id,
                currentUrlPageId: this.props.currentUrlPageId,
                galleryId: this.props.id,
                galleryDataId: this.props.compData.id,
                imageWrapperSize: m.imageWrapperSize,
                imageIndex: i,
                heightDiff: n,
                widthDiff: h,
                bottomGap: a,
                style: {
                    width: m.displayerSize.width,
                    height: m.displayerSize.height,
                    position: "absolute",
                    left: y.left,
                    top: y.top
                }
            })
        },
        createDisplayers: function() {
            var t = e.take(this.props.compData.items, this.props.compProp.numCols * this.state.numberOfRows),
                i = g.getItemWidth(this.props.compProp.margin, this.props.compProp.numCols, this.props.style.width, u.getSkinWidthDiff(this.props.skin)),
                s = this.itemHeight || g.getItemHeight(this.props.compProp.margin, this.galleryHeight, this.state.numberOfRows, u.getSkinHeightDiff(this.props.skin));
            return e.map(t, function(e, t) {
                return this.createDisplayer(e, t, i, s)
            }.bind(this))
        },
        componentWillReceiveProps: function(t) {
            var i = g.getAvailableRowsNumber(t.compProp.maxRows, t.compProp.numCols, t.compData.items.length),
                s = {},
                o = !1;
            if (this.props.compProp.maxRows === t.compProp.maxRows && this.props.compProp.numCols === t.compProp.numCols && this.props.compData.items.length === t.compData.items.length || (o = !0, s.numberOfRows = i, this.galleryHeight = n(u.getGalleryHeight(this.state.numberOfRows, i, this.props.compProp.margin, this.props.skin, this.galleryHeight)), s.$state = l(i, t.compProp.numCols, t.compData.items.length)), this.props.style.height !== t.style.height && (o = !0, this.galleryHeight = n(t.style.height)), this.shouldResetGalleryToOriginalState !== t.shouldResetGalleryToOriginalState && (this.shouldResetGalleryToOriginalState && this.resetGalleryState && this.resetGalleryState(t), this.shouldResetGalleryToOriginalState = t.shouldResetGalleryToOriginalState), o || h(this.props.compTheme, t.compTheme)) {
                this.itemHeight = g.getItemHeight(t.compProp.margin, this.galleryHeight, i, u.getSkinHeightDiff(this.props.skin));
                var r = u.getSkinHeightDiff(this.props.skin),
                    p = s.numberOfRows || this.state.numberOfRows;
                this.galleryHeight = p * this.itemHeight + (p - 1) * this.props.compProp.margin + r
            }
            e.isEmpty(s) || this.setState(s)
        },
        getSkinProperties: function() {
            var e = {
                showMore: {
                    children: this.props.compProp.showMoreLabel,
                    onClick: this.showMoreRows
                },
                itemsContainer: {
                    children: this.createDisplayers(),
                    style: {
                        height: this.galleryHeight
                    }
                },
                "": {
                    "data-height-diff": u.getSkinHeightDiff(this.props.skin),
                    "data-width-diff": u.getSkinWidthDiff(this.props.skin),
                    "data-presented-row": this.state.numberOfRows,
                    style: {
                        height: this.galleryHeight
                    }
                }
            };
            return (this.showMoreClicked || "fullView" === this.state.$state) && y.updateSkinPropsForFlexibleHeightGallery(e, this.galleryHeight), e
        },
        showMoreRows: function() {
            var e = g.getAvailableRowsNumber(this.state.numberOfRows + this.props.compProp.incRows, this.props.compProp.numCols, this.props.compData.items.length);
            this.showMoreClicked = !0, this.galleryHeight = n(u.getGalleryHeight(this.state.numberOfRows, e, this.props.compProp.margin, this.props.skin, this.galleryHeight)), this.registerReLayout(), this.setState({
                numberOfRows: e,
                $state: l(e, this.props.compProp.numCols, this.props.compData.items.length)
            })
        },
        getDisplayerSkin: function() {
            return this.getSkinExports().imageItem.skin
        }
    }
});
//# sourceMappingURL=matrixGallery.min.js.map