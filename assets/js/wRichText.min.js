"use strict";
define("wRichText", ["lodash", "santaProps", "textCommon", "utils"], function(e, t, o, i) {
    var n = i.linkRenderer;
    return {
        displayName: "WRichText",
        propTypes: {
            structure: t.Types.Component.structure.isRequired,
            compData: t.Types.Component.compData.isRequired,
            compProp: t.Types.Component.compProp,
            linkRenderInfo: t.Types.Link.linkRenderInfo,
            rootNavigationInfo: t.Types.Component.rootNavigationInfo,
            colorsMap: t.Types.Theme.colorsMap.isRequired,
            fontsMap: t.Types.Fonts.fontsMap.isRequired,
            isMobileView: t.Types.isMobileView,
            isPreviewMode: t.Types.isPreviewMode
        },
        statics: {
            useSantaTypes: !0
        },
        mixins: [o.textCompMixin],
        allowIframes: !1,
        fontGetter: function(e) {
            var t = e.split("_")[1];
            return this.props.fontsMap[t]
        },
        colorGetter: function(e) {
            var t = e.split("_")[1];
            return this.props.colorsMap[t] || e
        },
        convertCompDataTextToHTML: function(t) {
            if (this._componentHtml) {
                this._componentHtml = o.textComponentsUtils.convertDataQueryLinksIntoHtmlAnchors(this._componentHtml, t.compData.linkList, n.renderLink, t.linkRenderInfo, t.rootNavigationInfo);
                var i = e.get(t, ["compProp", "overrideColor"]);
                i = i && this.colorGetter(i), this._componentHtml = o.textComponentsUtils.mobileTextTransformIfNeeded(this._componentHtml, {
                    brightness: e.get(t, "compProp.brightness"),
                    overrideColor: i,
                    isMobileView: t.isMobileView,
                    scale: e.get(t, "structure.layout.scale"),
                    fontGetter: this.fontGetter,
                    colorGetter: this.colorGetter
                }), t.noAutoLinkGeneration || this.props.isPreviewMode || (this._componentHtml = o.textComponentsUtils.createImpliedLinks({
                    htmlContent: this._componentHtml,
                    isMobileView: this.props.isMobileView
                }))
            }
        }
    }
});
//# sourceMappingURL=wRichText.min.js.map