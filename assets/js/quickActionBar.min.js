"use strict";
define("quickActionBar/quickAction/quickAction", ["lodash", "react"], function(i, t) {
    return t.createClass({
        propTypes: {
            id: t.PropTypes.string.isRequired,
            styleId: t.PropTypes.string.isRequired,
            svgString: t.PropTypes.string.isRequired,
            fillColor: t.PropTypes.string.isRequired,
            backgroundColor: t.PropTypes.string.isRequired,
            textColor: t.PropTypes.string.isRequired,
            text: t.PropTypes.string.isRequired,
            href: t.PropTypes.string,
            clickHandler: t.PropTypes.func,
            notificationCount: t.PropTypes.number
        },
        render: function() {
            return t.DOM.a({
                className: this.props.styleId + "_action",
                style: {
                    backgroundColor: this.props.backgroundColor,
                    color: this.props.textColor
                },
                href: this.props.href,
                onClick: this.props.clickHandler
            }, [t.DOM.div({
                className: this.props.styleId + "_icon",
                key: this.props.id + "_icon",
                style: {
                    fill: this.props.fillColor
                },
                dangerouslySetInnerHTML: {
                    __html: this.props.svgString
                }
            }, null), t.DOM.div({
                className: this.props.styleId + "_text",
                key: "text"
            }, this.props.text), t.DOM.div({
                className: this.props.styleId + "_notifications",
                key: this.props.id + "_notifications",
                style: {
                    display: i.get(this.props, "notificationCount", 0) > 0 ? "initial" : "none"
                }
            }, null)])
        }
    })
}), define("quickActionBar/utils/quickActionUtils", ["lodash"], function(i) {
    function t(t, o) {
        var n = i.get(e, o.colorScheme);
        return o.invertColors ? {
            fillColor: "#fff",
            backgroundColor: n || t.color,
            textColor: "#fff"
        } : {
            fillColor: n || t.color,
            backgroundColor: "#fff",
            textColor: n || "#000"
        }
    }
    var e = {
        black: "#000",
        grey: "#888"
    };
    return {
        resolveIconColors: t
    }
}), define("quickActionBar/bi/events.json", [], function() {
    return {
        DYNAMIC_QUICK_ACTION_CLICK: {
            eventId: 385,
            adapter: "ugc-viewer",
            params: {
                site_id: "site_id",
                appDefinitionId: "appDefinitionId"
            }
        }
    }
}), define("quickActionBar/utils/quickActionBarDataRequirementsChecker", ["core", "lodash", "utils"], function(i, t, e) {
    function o(i, t) {
        var e = "svgshape.v2.Svg_" + t;
        return c.createSvgFetchRequest(i.serviceTopology.mediaRootUrl, i, e)
    }

    function n(i) {
        var e = t.map(i.getClientSpecMap(), "appDefinitionId");
        return t(p).values().filter(function(i) {
            return t.includes(e, i.appId)
        }).map(function(t) {
            return o(i, t.icon)
        }).compact().value()
    }

    function r(i, e) {
        return t.compact([o(i, e.data.icon)])
    }
    var s = i.dataRequirementsChecker,
        c = e.svg,
        p = e.constants.SUPPORTED_DYNAMIC_ACTIONS;
    s.registerCheckerForCompType("wysiwyg.viewer.components.QuickActionBarItem", r), s.registerCheckerForCompType("wysiwyg.viewer.components.QuickActionBar", n)
}), define("quickActionBar", ["lodash", "react", "core", "santaProps", "quickActionBar/quickAction/quickAction", "quickActionBar/utils/quickActionUtils", "quickActionBar/bi/events.json", "quickActionBar/utils/quickActionBarDataRequirementsChecker"], function(i, t, e, o, n, r, s) {
    return {
        displayName: "QuickActionBar",
        mixins: [e.compMixins.skinBasedComp],
        propTypes: {
            compProp: o.Types.Component.compProp.isRequired,
            siteScrollingBlocker: o.Types.SiteAspects.siteScrollingBlocker.isRequired,
            styleId: o.Types.Component.styleId.isRequired,
            dynamicActions: o.Types.QuickActions.dynamicActions.isRequired,
            structuredActions: o.Types.QuickActions.structuredActions.isRequired,
            reportBI: o.Types.reportBI.isRequired
        },
        getInitialState: function() {
            return {
                isOpen: !1
            }
        },
        toggleActionBar: function() {
            this.setState({
                isOpen: !this.state.isOpen
            })
        },
        componentDidUpdate: function() {
            this.props.siteScrollingBlocker.setSiteScrollingBlocked(this, this.state.isOpen)
        },
        getActions: function() {
            return i(this.props.dynamicActions).concat(i.orderBy(this.props.structuredActions, "priority", "desc")).filter("enabled").take(5).value()
        },
        createActionClickHandler: function(t) {
            return i.has(t, "appId") ? i.isFunction(this.createActionClickHandlerInPreview) ? this.createActionClickHandlerInPreview : function() {
                this.props.reportBI(s.DYNAMIC_QUICK_ACTION_CLICK, {
                    site_id: this.props.siteId,
                    appDefinitionId: t.appId
                }), this.handleAction(t.appId)
            }.bind(this) : i.noop()
        },
        createActionComponent: function(e, o) {
            var s = r.resolveIconColors(e, this.props.compProp),
                c = i.assign({
                    id: this.props.id + "_" + o,
                    clickHandler: this.createActionClickHandler(e)
                }, i.pick(this.props, ["styleId"]), i.pick(e, ["text", "href", "svgString", "notificationCount"]), i.pick(s, ["fillColor", "backgroundColor", "textColor"]));
            return t.createElement(n, c)
        },
        createActionComponents: function() {
            return i.map(this.getActions(), this.createActionComponent)
        },
        getRootClasses: function() {
            var i = {
                "hide-text": this.props.compProp.hideText,
                closed: !this.state.isOpen
            };
            return i["align-" + this.props.compProp.alignment] = !0, i["action-count-" + this.getActions().length] = !0, i
        },
        getSkinProperties: function() {
            return {
                "": {
                    className: this.classSet(this.getRootClasses())
                },
                overlay: {
                    onClick: this.toggleActionBar
                },
                controlButton: {
                    onClick: this.toggleActionBar
                },
                actionsContainer: {
                    children: this.createActionComponents()
                }
            }
        }
    }
});
//# sourceMappingURL=quickActionBar.min.js.map