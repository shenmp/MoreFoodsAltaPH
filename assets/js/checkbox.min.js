"use strict";
define("checkbox", ["lodash", "core", "santaProps"], function(i, t, e) {
    var s = function(i) {
        return t.compMixins.validatableMixin.getPublicState(i)
    };
    return {
        displayName: "Checkbox",
        propTypes: {
            compData: e.Types.Component.compData.isRequired,
            compProp: e.Types.Component.compProp.isRequired,
            renderFlags: e.Types.RenderFlags.all,
            shouldResetComponent: e.Types.RenderFlags.shouldResetComponent
        },
        mixins: [t.compMixins.skinBasedComp, t.compMixins.runTimeCompData, t.compMixins.inputFocusMixin, t.compMixins.validatableMixin.validatable, t.compMixins.compStateMixin(s)],
        statics: {
            useSantaTypes: !0,
            behaviors: i.assign({}, t.compMixins.inputFocusMixin.INPUT_FOCUS_BEHAVIORS, t.compMixins.validatableMixin.VALIDATABLE_BEHAVIORS)
        },
        focus: function() {
            this.refs.input.focus()
        },
        blur: function() {
            this.refs.input.blur()
        },
        setCustomValidity: function(i) {
            this.refs.input.setCustomValidity(i)
        },
        getInitialState: function() {
            return i.assign(s(), {
                checked: !1
            })
        },
        componentWillMount: function() {
            this.setState({
                checked: this.props.compData.checked
            })
        },
        componentWillReceiveProps: function(i) {
            i.shouldResetComponent && i.shouldResetComponent !== this.props.shouldResetComponent && this.hideValidityIndication(), this.setState({
                checked: i.compData.checked
            })
        },
        onChange: function() {
            if (!this.props.compProp.readOnly && !this.props.compProp.isDisabled) {
                var i = {
                    checked: !this.state.checked
                };
                this.setState({
                    checked: !this.state.checked
                }), this.updateData(i), this.handleAction("change", i)
            }
        },
        onFocus: function() {
            this.handleAction("focus")
        },
        onBlur: function() {
            this.handleAction("blur"), this.showValidityIndication()
        },
        getSkinProperties: function() {
            var i = {
                "with-validation-indication": this.shouldShowValidityIndication()
            };
            return {
                "": {
                    className: this.classSet(i),
                    "data-disabled": !!this.props.compProp.isDisabled
                },
                container: {
                    tabIndex: 0
                },
                input: {
                    onFocus: this.onFocus,
                    onBlur: this.onBlur,
                    disabled: !!this.props.compProp.isDisabled,
                    required: this.props.compProp.required,
                    checked: this.state.checked,
                    onChange: this.onChange,
                    value: this.props.compData.value
                }
            }
        }
    }
});
//# sourceMappingURL=checkbox.min.js.map