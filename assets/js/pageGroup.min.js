"use strict";
define("pageGroup", ["lodash", "core", "reactDOM", "santaProps"], function(e, i, t, s) {
    function r(e, i, t, s) {
        return function() {
            var r = i();
            switch (e) {
                case "SlideHorizontal":
                    return {
                        siteWidth: t,
                        width: r.width,
                        ease: "Cubic.easeOut"
                    };
                case "SlideVertical":
                    var n = Math.max(r.height, s());
                    return {
                        screenHeight: r.height,
                        height: n,
                        reverse: !0,
                        ease: "Cubic.easeInOut"
                    };
                case "OutIn":
                    return {
                        sourceEase: "Strong.easeOut",
                        destEase: "Strong.easeIn"
                    };
                case "CrossFade":
                    return {
                        sourceEase: "Sine.easeInOut",
                        destEase: "Quad.easeInOut"
                    };
                default:
                    return {}
            }
        }
    }

    function n(e, i, s) {
        e.refs[i] ? e.props.currentUrlPageId !== i && e.refs[i].forceUpdate(function() {
            e.refs[s].updateVisibility(), e.props.isExperimentOpen("sv_platform1") && (t.findDOMNode(e.refs[i]).style.visibility = "hidden")
        }) : e.refs[s].updateVisibility()
    }
    var a = i.compMixins,
        o = {
            outIn: "OutIn",
            crossfade: "CrossFade",
            shrinkfade: "CrossFade",
            swipeHorizontal: "SlideHorizontal",
            swipeHorizontalFullScreen: "SlideHorizontal",
            swipeVertical: "SlideVertical",
            swipeVerticalFullScreen: "SlideVertical",
            none: "NoTransition"
        };
    return {
        displayName: "PageGroup",
        mixins: [a.skinBasedComp, a.animationsMixin],
        propTypes: {
            getRenderedMasterPageHeight: s.Types.__DangerousSantaTypes.getRenderedMasterPageHeight.isRequired,
            getWindowSize: s.Types.__DangerousSantaTypes.getWindowSize.isRequired,
            actionsAspect: s.Types.SiteAspects.actionsAspect.isRequired,
            siteWidth: s.Types.siteWidth.isRequired,
            currentUrlPageId: s.Types.currentUrlPageId.isRequired,
            rootNavigationInfo: s.Types.Component.rootNavigationInfo.isRequired,
            compProp: s.Types.Component.compProp.isRequired,
            pagesToRender: s.Types.PageGroup.pagesToRender.isRequired,
            isExperimentOpen: s.Types.isExperimentOpen
        },
        statics: {
            useSantaTypes: !0
        },
        componentWillReceiveProps: function(e) {
            var i, t, s, a = this.props.currentUrlPageId,
                p = e.currentUrlPageId,
                d = o[e.rootNavigationInfo.transition || this.props.compProp.transition] || o.none;
            a !== p && (this.refs[a].clearAnimationsQueue(!0), i = this.getAnimationProperties(d).defaultDuration || 0, s = r(d, this.props.getWindowSize, this.props.siteWidth, this.props.getRenderedMasterPageHeight), t = {
                onComplete: function() {
                    n(this, a, p), this.props.actionsAspect.handlePageTransitionComplete(a, p)
                }.bind(this)
            }, this.props.actionsAspect.registerNextPageTransition(this, a, p, d, i, 0, s, t))
        },
        createPage: function(e) {
            var i = 1 === this.props.pagesToRender.length;
            return this.props.createPage(e, i)
        },
        getSkinProperties: function() {
            return {
                "": {
                    children: e.map(this.props.pagesToRender, this.createPage)
                }
            }
        }
    }
});
//# sourceMappingURL=pageGroup.min.js.map