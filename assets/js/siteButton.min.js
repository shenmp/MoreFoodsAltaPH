"use strict";
define("siteButton", ["lodash", "react", "core", "santaProps", "buttonCommon", "coreUtils", "utils", "experiment"], function(e, i, t, s, o, n, r, p) {
    var a = r.linkRenderer,
        l = n.anchorTagsGenerator;
    return {
        displayName: "SiteButton",
        mixins: [t.compMixins.skinBasedComp, o.buttonMixin],
        propTypes: {
            compData: s.Types.Component.compData,
            isMobileDevice: s.Types.Device.isMobileDevice,
            isMobileView: s.Types.isMobileView,
            linkRenderInfo: s.Types.Link.linkRenderInfo,
            rootNavigationInfo: s.Types.Component.rootNavigationInfo
        },
        statics: {
            useSantaTypes: !0
        },
        getDefaultProps: function() {
            return {
                shouldUseFlex: !0
            }
        },
        getInitialState: function() {
            return {
                $mobile: this.props.isMobileDevice ? "mobile" : "desktop",
                $shouldUseFlex: this.props.shouldUseFlex ? "shouldUseFlex" : "",
                $align: this.props.compProp.align
            }
        },
        componentWillReceiveProps: function(e) {
            this.setState({
                $align: e.compProp.align
            })
        },
        getImpliedLink: function() {
            if (!this.props.noAutoLinkGeneration) {
                var i = l.getIncludedPatterns(p, this.props.isMobileView);
                return e.head(l.findDataForAnchors(this.props.compData.label, i))
            }
        },
        getLinkSkinPart: function() {
            var e = this.props.compData,
                t = this.props.compProp,
                s = {
                    parentConst: i.DOM.div
                };
            return t.isDisabled ? s : e.link ? a.renderLink(e.link, this.props.linkRenderInfo, this.props.rootNavigationInfo) : this.getImpliedLink() || s
        },
        getSkinProperties: function() {
            this.lastScale = e.get(this, "props.structure.layout.scale") || 1;
            var i = this.props.compData,
                t = this.props.compProp,
                s = !!t.isDisabled,
                o = this.getLinkSkinPart();
            o.style = {}, this.props.shouldUseFlex || (o.style.textAlign = t.align);
            var n = {
                "": {
                    id: this.props.id,
                    key: "f" + this.getDesktopFontSize() * this.currentScale,
                    ref: this.props.id,
                    "data-align": t.align,
                    "data-disabled": s,
                    "data-margin": t.margin,
                    "data-should-use-flex": this.props.shouldUseFlex
                },
                label: {
                    children: [i.label],
                    style: this.getLabelStyle()
                },
                link: o
            };
            return this.props.onClick && !s && (n[""].onClick = this.props.onClick), this.resetMinHeightIfNeeded(n), n
        }
    }
});
//# sourceMappingURL=siteButton.min.js.map