"use strict";
define("buttonCommon/mixins/buttonMixin", ["lodash", "santaProps", "utils", "textCommon"], function(t, e, n, i) {
    function o(t) {
        var e = {};
        return "center" !== t.compProp.align && (e["margin" + (t.compProp.align ? n.stringUtils.capitalize(t.compProp.align) : "")] = t.compProp.margin), e
    }

    function r(t) {
        var e = {};
        return "" !== t.compProp.padding && (e.padding = t.compProp.padding), e
    }

    function c() {
        return this.shouldRecalculateLineHeight ? {
            lineHeight: ""
        } : {}
    }
    return {
        propTypes: {
            compData: e.Types.Component.compData,
            compProp: e.Types.Component.compProp,
            compTheme: e.Types.Component.theme
        },
        mixins: [i.textScaleMixin],
        componentWillMount: function() {
            this.currentStyle = this.props.theme, this.currentScale = t.get(this, "props.structure.layout.scale", 1)
        },
        componentWillReceiveProps: function(e) {
            var n = e.theme,
                i = t.get(e, "structure.layout.scale", 1);
            t.isEqual(this.currentStyle, n) && this.currentScale === i || (this.shouldRecalculateLineHeight = !0), this.currentStyle = n, this.currentScale = i
        },
        componentDidUpdate: function() {
            this.shouldRecalculateLineHeight && (this.shouldRecalculateLineHeight = !1)
        },
        resetMinHeightIfNeeded: function(t) {
            this.shouldRecalculateLineHeight && (t[""] = t[""] || {}, t[""].style = t[""].style || {}, t[""].style.minHeight = "")
        },
        getLabelStyle: function() {
            var e = t.merge(o(this.props), r(this.props), this.getFontSize(), c.call(this));
            return t.omitBy(e, t.isUndefined)
        }
    }
}), define("buttonCommon", ["buttonCommon/mixins/buttonMixin"], function(t) {
    return {
        buttonMixin: t
    }
});
//# sourceMappingURL=buttonCommon.min.js.map