"use strict";
define("documentMedia", ["lodash", "santaProps", "react", "core", "utils", "image"], function(t, e, n, i, a, o) {
    var s = i.compMixins,
        p = a.linkRenderer;
    return {
        displayName: "DocumentMedia",
        mixins: [s.skinBasedComp, s.skinInfo],
        propTypes: t.assign({
            compData: e.Types.Component.compData.isRequired,
            compProp: e.Types.Component.compProp.isRequired,
            style: e.Types.Component.style.isRequired,
            linkRenderInfo: e.Types.Link.linkRenderInfo.isRequired,
            rootNavigationInfo: e.Types.Component.rootNavigationInfo.isRequired
        }, e.santaTypesUtils.getSantaTypesByDefinition(o)),
        statics: {
            useSantaTypes: !0
        },
        getSkinProperties: function() {
            var e = this.props.compData,
                i = this.props.compProp,
                a = e.link ? p.renderLink(e.link, this.props.linkRenderInfo, this.props.rootNavigationInfo) : {},
                o = this.getParams(["contentPaddingLeft", "contentPaddingRight", "contentPaddingTop"]),
                s = {
                    title: e.title
                };
            return s["data-content-padding-left"] = parseInt(o.contentPaddingLeft.value, 10), s["data-content-padding-right"] = parseInt(o.contentPaddingRight.value, 10), s["data-content-padding-top"] = parseInt(o.contentPaddingTop.value, 10), s["data-content-image-height"] = parseInt(this.props.style.height, 10), {
                "": s,
                img: this.createChildComponent(e, "core.components.Image", "img", {
                    displayName: "Image",
                    id: this.props.id + "img",
                    ref: "img",
                    imageData: e,
                    containerWidth: this.props.style.width,
                    containerHeight: this.props.style.height,
                    displayMode: "full"
                }),
                link: t.assign(a, {
                    target: "_blank"
                }),
                label: {
                    parentConst: n.DOM.span,
                    children: e.title,
                    className: this.classSet({
                        hidden: !i.showTitle || t.isEmpty(e.title)
                    })
                }
            }
        }
    }
});
//# sourceMappingURL=documentMedia.min.js.map