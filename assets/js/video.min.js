"use strict";
define("video", ["zepto", "lodash", "core", "react", "utils", "reactDOM", "santaProps"], function(o, e, i, t, a, s, r) {
    function n(o, e, i) {
        if ("100%" === i) return "100%";
        var t = l(),
            a = o ? t[o].hMinSize : 0;
        return "YOUTUBE" === o && "always_show" === e && (a += 20), Math.max(i, a)
    }

    function p(o, e) {
        if ("100%" === e) return "100%";
        var i = l(),
            t = o ? i[o].wMinSize : 0;
        return Math.max(e, t)
    }

    function l() {
        return {
            YOUTUBE: {
                url: e.template("//www.youtube.com/embed/${videoId}?"),
                getParams: d,
                hMinSize: 200,
                wMinSize: 200
            },
            VIMEO: {
                url: e.template("//player.vimeo.com/video/${videoId}?"),
                getParams: u,
                hMinSize: 100,
                wMinSize: 100
            },
            DAILYMOTION: {
                url: e.template("//www.dailymotion.com/embed/video/${videoId}?"),
                getParams: m,
                hMinSize: 100,
                wMinSize: 100
            },
            FACEBOOK: {
                url: e.template("//www.facebook.com/plugins/video.php?href=https://www.facebook.com/${videoId}&"),
                getParams: h,
                hMinSize: 100,
                wMinSize: 100
            }
        }
    }

    function d(o, e, i) {
        var t = o.showControls,
            a = o.autoplay && !0,
            s = o.enablejsapi || 0,
            r = o.lightTheme,
            n = o.loop,
            p = o.showinfo,
            l = e.videoId || "";
        return {
            wmode: "transparent",
            autoplay: a && i ? "1" : "0",
            theme: r ? "light" : "dark",
            controls: "always_hide" !== t ? "1" : "0",
            autohide: "temp_show" === t ? "1" : "0",
            loop: n ? "1" : "0",
            showinfo: p ? "1" : "0",
            rel: "0",
            playlist: !!n && l,
            enablejsapi: s
        }
    }

    function h(o, e, i) {
        return {
            autoplay: o.autoplay && i
        }
    }

    function u(o, e, i) {
        return {
            autoplay: o.autoplay && i,
            loop: o.loop,
            byline: o.showinfo,
            portrait: o.showinfo,
            title: o.showinfo
        }
    }

    function m(o, e, i) {
        return {
            autoplay: o.autoplay && i,
            "ui-start-screen-info": o.showinfo ? "1" : "0",
            controls: "temp_show" === o.showControls ? "1" : "0",
            "sharing-enable": "0",
            "ui-logo": "0"
        }
    }

    function c(o, i, t) {
        var a = o.videoId,
            s = o.videoType;
        if (!s || !a) return "";
        var r = l()[s],
            n = r.getParams(i, o, t);
        return r.url({
            videoId: a
        }) + e.map(n, function(o, e) {
            return e + "=" + o
        }).join("&")
    }
    return {
        displayName: "Video",
        mixins: [i.compMixins.skinBasedComp],
        statics: {
            useSantaTypes: !0
        },
        propTypes: {
            isPlayingAllowed: r.Types.RenderFlags.isPlayingAllowed.isRequired,
            compData: r.Types.Component.compData.isRequired,
            compProp: r.Types.Component.compProp.isRequired,
            style: r.Types.Component.style.isRequired
        },
        componentWillMount: function() {
            this.canPlayVideo = this.props.isPlayingAllowed
        },
        componentDidUpdate: function() {
            if (this.canPlayVideo !== this.props.isPlayingAllowed) {
                this.canPlayVideo = this.props.isPlayingAllowed;
                var e = o(s.findDOMNode(this.refs.videoFrame)).find("iframe")[0];
                e.src = "", e.src = c(this.props.compData, this.props.compProp, this.props.isPlayingAllowed)
            }
        },
        getSkinProperties: function() {
            var o = n(this.props.compData.videoType, this.props.compProp.showControls, this.props.style.height),
                e = p(this.props.compData.videoType, this.props.style.width),
                i = c(this.props.compData, this.props.compProp, this.props.isPlayingAllowed),
                s = {
                    height: "100%",
                    width: "100%",
                    allowFullScreen: !0,
                    frameBorder: "0"
                };
            return a.validationUtils.isValidUrl(i) && (s["data-src"] = i), this.props.addItemProp && (s.itemProp = "image"), {
                "": {
                    style: {
                        height: o,
                        width: e
                    }
                },
                videoFrame: {
                    children: t.DOM.iframe(s)
                },
                preview: {
                    style: {
                        display: "none"
                    }
                }
            }
        }
    }
});
//# sourceMappingURL=video.min.js.map